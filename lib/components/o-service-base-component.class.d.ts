import { ChangeDetectorRef, Injector, OnChanges, SimpleChange } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { ILocalStorageComponent } from '../interfaces/local-storage-component.interface';
import { ServiceResponse } from '../interfaces/service-response.interface';
import { DialogService } from '../services/dialog.service';
import { LocalStorageService } from '../services/local-storage.service';
import { OQueryDataArgs } from '../types/query-data-args.type';
import { OFormComponent } from './form/o-form.component';
import { OExpandableContainerComponent } from './expandable-container/o-expandable-container.component';
export declare const DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT: string[];
export declare class OServiceBaseComponent implements ILocalStorageComponent, OnChanges {
    protected injector: Injector;
    protected localStorageService: LocalStorageService;
    protected dialogService: DialogService;
    oattr: string;
    service: string;
    serviceType: string;
    entity: string;
    queryOnInit: boolean;
    queryOnBind: boolean;
    queryOnEvent: any;
    pageable: boolean;
    columns: string;
    keys: string;
    parentKeys: string;
    staticData: Array<any>;
    queryMethod: string;
    paginatedQueryMethod: string;
    originalQueryRows: number;
    protected _queryRows: number;
    oQueryRows: number;
    queryRows: number;
    insertMethod: string;
    updateMethod: string;
    deleteMethod: string;
    storeState: boolean;
    queryWithNullParentKeys: boolean;
    queryFallbackFunction: (err: any) => void;
    protected colArray: Array<string>;
    protected keysArray: Array<string>;
    protected _pKeysEquiv: {};
    dataArray: Array<any>;
    protected oattrFromEntity: boolean;
    protected onRouteChangeStorageSubscription: any;
    protected onFormDataSubscribe: any;
    protected loaderSubscription: Subscription;
    protected querySubscription: Subscription;
    protected dataService: any;
    protected _state: any;
    protected loadingSubject: BehaviorSubject<boolean>;
    loading: Observable<boolean>;
    protected form: OFormComponent;
    expandableContainer: OExpandableContainerComponent;
    protected alreadyStored: boolean;
    protected queryOnEventSubscription: Subscription;
    cd: ChangeDetectorRef;
    protected queryArguments: any[];
    protected router: Router;
    protected actRoute: ActivatedRoute;
    protected sqlTypes: any;
    constructor(injector: Injector);
    initialize(): void;
    afterViewInit(): void;
    destroy(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    beforeunloadHandler(): void;
    getAttribute(): string;
    getComponentKey(): string;
    getDataToStore(): object;
    getRouteKey(): string;
    getKeys(): string[];
    configureService(): void;
    getDataArray(): any[];
    setDataArray(data: any): void;
    setFormComponent(form: OFormComponent): void;
    getParentKeysFromContext(parentKeys: object, context: any): {};
    queryData(filter?: any, ovrrArgs?: OQueryDataArgs): void;
    reloadData(): void;
    reloadPaginatedDataFromStart(): void;
    load(): any;
    extractKeysFromRecord(item: any): object;
    getAttributesValuesToQuery(): Array<string>;
    getQueryArguments(filter: object, ovrrArgs?: OQueryDataArgs): Array<any>;
    updatePaginationInfo(queryRes: ServiceResponse): void;
    getTotalRecordsNumber(): number;
    getContextComponent(): OFormComponent | OExpandableContainerComponent;
    getComponentFilter(existingFilter?: any): any;
    getSqlTypes(): any;
    state: any;
    getParentKeysValues(): {};
    protected updateStateStorage(): void;
    protected setData(data: any, sqlTypes?: any, replace?: boolean): void;
    initializeState(): void;
}
