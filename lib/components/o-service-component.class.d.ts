import { SelectionModel } from '@angular/cdk/collections';
import { ElementRef, Injector } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { OFilterBuilderComponent } from '../components/filter-builder/o-filter-builder.component';
import { OSearchInputComponent } from '../components/input/search-input/o-search-input.component';
import { OFormLayoutDialogComponent } from '../layouts/form-layout/dialog/o-form-layout-dialog.component';
import { OFormLayoutManagerComponent } from '../layouts/form-layout/o-form-layout-manager.component';
import { NavigationService } from '../services/navigation.service';
import { PermissionsService } from '../services/permissions/permissions.service';
import { OTranslateService } from '../services/translate/o-translate.service';
import { Expression } from '../types/expression.type';
import { OListInitializationOptions } from '../types/o-list-initialization-options.type';
import { OTableInitializationOptions } from '../types/o-table-initialization-options.type';
import { OFormComponent } from './form/o-form.component';
import { OServiceBaseComponent } from './o-service-base-component.class';
export declare const DEFAULT_INPUTS_O_SERVICE_COMPONENT: string[];
export declare class OServiceComponent extends OServiceBaseComponent {
    protected elRef: ElementRef;
    protected form: OFormComponent;
    protected permissionsService: PermissionsService;
    protected translateService: OTranslateService;
    protected navigationService: NavigationService;
    title: string;
    protected _title: string;
    protected ovisible: boolean;
    protected oenabled: boolean;
    protected controls: boolean;
    detailMode: string;
    protected detailFormRoute: string;
    protected recursiveDetail: boolean;
    detailButtonInRow: boolean;
    detailButtonInRowIcon: string;
    protected editFormRoute: string;
    protected recursiveEdit: boolean;
    editButtonInRow: boolean;
    editButtonInRowIcon: string;
    insertButton: boolean;
    protected _rowHeight: string;
    protected rowHeightSubject: BehaviorSubject<string>;
    rowHeightObservable: Observable<string>;
    rowHeight: string;
    protected insertFormRoute: string;
    protected recursiveInsert: boolean;
    filterCaseSensitive: boolean;
    protected _quickFilter: boolean;
    quickFilter: boolean;
    filterBuilder: OFilterBuilderComponent;
    selection: SelectionModel<Element>;
    protected onTriggerUpdateSubscription: any;
    protected formLayoutManager: OFormLayoutManagerComponent;
    protected formLayoutManagerTabIndex: number;
    oFormLayoutDialog: OFormLayoutDialogComponent;
    protected tabsSubscriptions: any;
    quickFilterComponent: OSearchInputComponent;
    searchInputComponent: OSearchInputComponent;
    protected quickFilterColArray: string[];
    constructor(injector: Injector, elRef: ElementRef, form: OFormComponent);
    initialize(): void;
    afterViewInit(): void;
    destroy(): void;
    isVisible(): boolean;
    hasControls(): boolean;
    hasTitle(): boolean;
    getSelectedItems(): any[];
    clearSelection(): void;
    setSelected(item: any): void;
    protected navigateToDetail(route: any[], qParams: any, relativeTo: ActivatedRoute): void;
    insertDetail(): void;
    viewDetail(item: any): void;
    editDetail(item: any): void;
    protected addFormLayoutManagerRoute(routeArr: any[]): void;
    protected getEncodedParentKeys(): string;
    getInsertRoute(): any[];
    getItemModeRoute(item: any, modeRoute: string): any[];
    protected getQueryConfiguration(): any;
    getRouteOfSelectedRow(item: any): any[];
    protected deleteLocalItems(): void;
    reinitialize(options: OListInitializationOptions | OTableInitializationOptions): void;
    setFilterBuilder(filterBuilder: OFilterBuilderComponent): void;
    getComponentFilter(existingFilter?: any): any;
    protected getQuickFilterExpression(): Expression;
    protected getFilterBuilderExpression(): Expression;
    protected storeNavigationFormRoutes(activeMode: string, queryConf?: any): void;
    protected saveDataNavigationInLocalStorage(): void;
    protected getKeysValues(): any[];
    getRouteKey(): string;
    readonly elementRef: ElementRef;
    initializeState(): void;
    showCaseSensitiveCheckbox(): boolean;
    registerQuickFilter(arg: any): void;
    filterData(value?: string, loadMore?: boolean): void;
    isFilterCaseSensitive(): boolean;
    configureFilterValue(value: string): string;
    getQuickFilterValue(): string;
    getQuickFilterColumns(): string[];
}
