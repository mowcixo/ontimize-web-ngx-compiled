import { ElementRef, Injector, OnDestroy, OnInit } from '@angular/core';
import { FormControl, ValidationErrors, ValidatorFn } from '@angular/forms';
import * as _moment from 'moment';
import { FormValueOptions } from '../../../types/form-value-options.type';
import { ODateValueType } from '../../../types/o-date-value.type';
import { OFormComponent } from '../../form/o-form.component';
import { OFormDataComponent } from '../../o-form-data-component.class';
import { ODaterangepickerDirective } from './o-daterange-input.directive';
import { DaterangepickerComponent } from './o-daterange-picker.component';
export declare const DEFAULT_OUTPUTS_O_DATERANGE_INPUT: string[];
export declare const DEFAULT_INPUTS_O_DATERANGE_INPUT: string[];
export declare class ODateRangeInputComponent extends OFormDataComponent implements OnDestroy, OnInit {
    pickerDirective: ODaterangepickerDirective;
    picker: DaterangepickerComponent;
    private matInputRef;
    textInputEnabled: boolean;
    showWeekNumbers: boolean;
    oTouchUi: boolean;
    showRanges: boolean;
    protected _oMinDate: _moment.Moment;
    oMinDate: _moment.Moment;
    protected _oMaxDate: _moment.Moment;
    oMaxDate: _moment.Moment;
    protected _startKey: string;
    startKey: string;
    protected _endKey: string;
    endKey: string;
    protected _valueType: ODateValueType;
    protected _separator: string;
    separator: string;
    readonly showClearButton: boolean;
    readonly localeOptions: any;
    oformat: string;
    protected _localeOptions: any;
    protected olocale: string;
    private momentSrv;
    private oTranslate;
    constructor(form: OFormComponent, elRef: ElementRef, injector: Injector);
    ngOnInit(): void;
    openPicker(): void;
    onChangeEvent(event: any): void;
    setValue(val: any, options?: FormValueOptions, setDirty?: boolean): void;
    onClickClearValue(e: Event): void;
    datesUpdated(range: any): void;
    setData(newValue: any): void;
    updateElement(): void;
    getDateRangeToString(valueToString: string): {};
    resolveValidators(): ValidatorFn[];
    isObjectDataRangeNull(objectValue: any): boolean;
    protected rangeDateValidator(control: FormControl): ValidationErrors;
    protected minDateValidator(control: FormControl): ValidationErrors;
    protected maxDateValidator(control: FormControl): ValidationErrors;
    protected parseDateValidator(control: FormControl): ValidationErrors;
    ensureDateRangeValue(val: any, valueType: any): void;
    valueType: any;
}
