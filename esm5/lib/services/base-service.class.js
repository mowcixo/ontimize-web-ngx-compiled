import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { map, share } from 'rxjs/operators';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import { LoginStorageService } from './login-storage.service';
import { OntimizeServiceResponseAdapter } from './ontimize/ontimize-service-response.adapter';
import { OntimizeServiceResponseParser } from './parser/o-service-response.parser';
var BaseService = (function () {
    function BaseService(injector) {
        this.injector = injector;
        this.httpClient = this.injector.get(HttpClient);
        this.router = this.injector.get(Router);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
        this.responseParser = this.injector.get(OntimizeServiceResponseParser);
        this.loginStorageService = this.injector.get(LoginStorageService);
        this.configureAdapter();
    }
    BaseService.prototype.configureAdapter = function () {
        this.adapter = this.injector.get(OntimizeServiceResponseAdapter);
    };
    BaseService.prototype.configureService = function (config) {
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig.apiEndpoint;
    };
    BaseService.prototype.getDefaultServiceConfiguration = function (serviceName) {
        var configuration = this._config.getServiceConfiguration();
        var servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        servConfig[Codes.SESSION_KEY] = this.loginStorageService.getSessionInfo();
        return servConfig;
    };
    Object.defineProperty(BaseService.prototype, "urlBase", {
        get: function () {
            return this._urlBase;
        },
        set: function (value) {
            this._urlBase = value;
        },
        enumerable: true,
        configurable: true
    });
    BaseService.prototype.doRequest = function (param) {
        var _this = this;
        var dataObservable = new Observable(function (observer) {
            var options = param.options || {
                headers: _this.buildHeaders()
            };
            options.observe = 'response';
            var requestObs;
            switch (param.method) {
                case 'GET':
                    requestObs = _this.httpClient.get(param.url, options);
                    break;
                case 'PUT':
                    requestObs = _this.httpClient.put(param.url, param.body, options);
                    break;
                case 'DELETE':
                    var deleteOptions = {
                        headers: options.headers,
                        body: param.body
                    };
                    deleteOptions.observe = 'response';
                    requestObs = _this.httpClient.delete(param.url, deleteOptions);
                    break;
                case 'POST':
                default:
                    requestObs = _this.httpClient.post(param.url, param.body, options);
                    break;
            }
            requestObs.pipe(map(function (data) { return _this.adapter.adapt(data); })).subscribe(function (resp) {
                (param.successCallback || _this.parseSuccessfulResponse).bind(_this)(resp, observer);
            }, function (error) {
                (param.errorCallBack || _this.parseUnsuccessfulResponse).bind(_this)(error, observer);
            }, function () { return observer.complete(); });
        });
        return dataObservable.pipe(share());
    };
    BaseService.prototype.buildHeaders = function () {
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8'
        });
    };
    BaseService.prototype.clientErrorFallback = function (errorCode) {
    };
    BaseService.prototype.serverErrorFallback = function (errorCode) {
    };
    BaseService.prototype.parseSuccessfulResponse = function (resp, observer) {
        this.responseParser.parseSuccessfulResponse(resp, observer, this);
    };
    BaseService.prototype.parseSuccessfulQueryResponse = function (resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseSuccessfulAdvancedQueryResponse = function (resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseSuccessfulInsertResponse = function (resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseSuccessfulUpdateResponse = function (resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseSuccessfulDeleteResponse = function (resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseUnsuccessfulResponse = function (error, observer) {
        this.responseParser.parseUnsuccessfulResponse(error, observer, this);
    };
    BaseService.prototype.parseUnsuccessfulQueryResponse = function (resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseUnsuccessfulAdvancedQueryResponse = function (resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseUnsuccessfulInsertResponse = function (resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseUnsuccessfulUpdateResponse = function (resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    };
    BaseService.prototype.parseUnsuccessfulDeleteResponse = function (resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    };
    return BaseService;
}());
export { BaseService };
//# sourceMappingURL=data:application/json;base64,