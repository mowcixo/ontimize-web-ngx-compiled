import { Injectable, Injector } from '@angular/core';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import * as i0 from "@angular/core";
var AppMenuService = (function () {
    function AppMenuService(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig);
        this.MENU_ROOTS = this._config.getMenuConfiguration();
        this.ALL_MENU_ITEMS = [];
        for (var i = 0, len = this.MENU_ROOTS.length; i < len; i++) {
            var item = this.MENU_ROOTS[i];
            this.ALL_MENU_ITEMS = this.ALL_MENU_ITEMS.concat(this.getMenuItems(item));
        }
    }
    AppMenuService.prototype.getMenuRoots = function () {
        return this.MENU_ROOTS;
    };
    AppMenuService.prototype.getMenuRootById = function (id) {
        return this.MENU_ROOTS.find(function (c) { return c.id === id; });
    };
    AppMenuService.prototype.getAllMenuItems = function () {
        return this.ALL_MENU_ITEMS;
    };
    AppMenuService.prototype.getMenuItemById = function (id) {
        return this.ALL_MENU_ITEMS.find(function (i) { return i.id === id; });
    };
    AppMenuService.prototype.getMenuItemType = function (item) {
        var type;
        switch (true) {
            case (item.route === Codes.LOGIN_ROUTE):
                type = 'logout';
                break;
            case (item.route !== undefined):
                type = 'route';
                break;
            case (item.action !== undefined):
                type = 'action';
                break;
            case (item.locale !== undefined):
                type = 'locale';
                break;
            case (item.user !== undefined):
                type = 'user-info';
                break;
            case (item.items !== undefined):
                type = 'group';
                break;
            default:
                type = 'default';
                break;
        }
        return type;
    };
    AppMenuService.prototype.isMenuGroup = function (item) {
        return this.getMenuItemType(item) === 'group';
    };
    AppMenuService.prototype.getMenuItems = function (item) {
        if (item.items !== undefined) {
            return item.items;
        }
        return [item];
    };
    AppMenuService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    AppMenuService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    AppMenuService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AppMenuService_Factory() { return new AppMenuService(i0.ɵɵinject(i0.INJECTOR)); }, token: AppMenuService, providedIn: "root" });
    return AppMenuService;
}());
export { AppMenuService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLW1lbnUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXBwLW1lbnUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFXakQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFdEM7SUFTRSx3QkFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBRXRELElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFELElBQU0sSUFBSSxHQUFpQixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzNFO0lBRUgsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHdDQUFlLEdBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsSUFBa0I7UUFDaEMsSUFBSSxJQUFZLENBQUM7UUFDakIsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLENBQUUsSUFBdUIsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLFdBQVcsQ0FBQztnQkFDekQsSUFBSSxHQUFHLFFBQVEsQ0FBQztnQkFDaEIsTUFBTTtZQUNSLEtBQUssQ0FBRSxJQUFzQixDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7Z0JBQ2hELElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ2YsTUFBTTtZQUNSLEtBQUssQ0FBRSxJQUF1QixDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUM7Z0JBQ2xELElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ2hCLE1BQU07WUFDUixLQUFLLENBQUUsSUFBdUIsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDO2dCQUNsRCxJQUFJLEdBQUcsUUFBUSxDQUFDO2dCQUNoQixNQUFNO1lBQ1IsS0FBSyxDQUFFLElBQXlCLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQztnQkFDbEQsSUFBSSxHQUFHLFdBQVcsQ0FBQztnQkFDbkIsTUFBTTtZQUNSLEtBQUssQ0FBRSxJQUFrQixDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7Z0JBQzVDLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ2YsTUFBTTtZQUNSO2dCQUNFLElBQUksR0FBRyxTQUFTLENBQUM7Z0JBQ2pCLE1BQU07U0FDVDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxJQUFrQjtRQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssT0FBTyxDQUFDO0lBQ2hELENBQUM7SUFFTyxxQ0FBWSxHQUFwQixVQUFxQixJQUFrQjtRQUNyQyxJQUFLLElBQWtCLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUMzQyxPQUFRLElBQWtCLENBQUMsS0FBSyxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7O2dCQTFFRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Z0JBakJvQixRQUFROzs7eUJBQTdCO0NBMkZDLEFBNUVELElBNEVDO1NBekVZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBcHBDb25maWcgfSBmcm9tICcuLi9jb25maWcvYXBwLWNvbmZpZyc7XG5pbXBvcnQge1xuICBNZW51R3JvdXAsXG4gIE1lbnVJdGVtLFxuICBNZW51SXRlbUFjdGlvbixcbiAgTWVudUl0ZW1Mb2NhbGUsXG4gIE1lbnVJdGVtTG9nb3V0LFxuICBNZW51SXRlbVJvdXRlLFxuICBNZW51SXRlbVVzZXJJbmZvLFxufSBmcm9tICcuLi9pbnRlcmZhY2VzL2FwcC1tZW51LmludGVyZmFjZSc7XG5pbXBvcnQgeyBNZW51Um9vdEl0ZW0gfSBmcm9tICcuLi90eXBlcy9tZW51LXJvb3QtaXRlbS50eXBlJztcbmltcG9ydCB7IENvZGVzIH0gZnJvbSAnLi4vdXRpbC9jb2Rlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFwcE1lbnVTZXJ2aWNlIHtcblxuICBwcm90ZWN0ZWQgX2NvbmZpZzogQXBwQ29uZmlnO1xuICBwcm90ZWN0ZWQgTUVOVV9ST09UUzogTWVudVJvb3RJdGVtW107XG4gIHByb3RlY3RlZCBBTExfTUVOVV9JVEVNUzogTWVudUl0ZW1bXTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5pbmplY3Rvci5nZXQoQXBwQ29uZmlnKTtcbiAgICB0aGlzLk1FTlVfUk9PVFMgPSB0aGlzLl9jb25maWcuZ2V0TWVudUNvbmZpZ3VyYXRpb24oKTtcblxuICAgIHRoaXMuQUxMX01FTlVfSVRFTVMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5NRU5VX1JPT1RTLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtOiBNZW51Um9vdEl0ZW0gPSB0aGlzLk1FTlVfUk9PVFNbaV07XG4gICAgICB0aGlzLkFMTF9NRU5VX0lURU1TID0gdGhpcy5BTExfTUVOVV9JVEVNUy5jb25jYXQodGhpcy5nZXRNZW51SXRlbXMoaXRlbSkpO1xuICAgIH1cbiAgICAvLyB0aGlzLkFMTF9NRU5VX0lURU1TID0gdGhpcy5NRU5VX1JPT1RTLnJlZHVjZSgocmVzdWx0LCBjYXRlZ29yeSkgPT4gcmVzdWx0LmNvbmNhdChjYXRlZ29yeS5pdGVtcyksIFtdKTtcbiAgfVxuXG4gIGdldE1lbnVSb290cygpOiBNZW51Um9vdEl0ZW1bXSB7XG4gICAgcmV0dXJuIHRoaXMuTUVOVV9ST09UUztcbiAgfVxuXG4gIGdldE1lbnVSb290QnlJZChpZDogc3RyaW5nKTogTWVudVJvb3RJdGVtIHtcbiAgICByZXR1cm4gdGhpcy5NRU5VX1JPT1RTLmZpbmQoYyA9PiBjLmlkID09PSBpZCk7XG4gIH1cblxuICBnZXRBbGxNZW51SXRlbXMoKTogTWVudUl0ZW1bXSB7XG4gICAgcmV0dXJuIHRoaXMuQUxMX01FTlVfSVRFTVM7XG4gIH1cblxuICBnZXRNZW51SXRlbUJ5SWQoaWQ6IHN0cmluZyk6IE1lbnVJdGVtIHtcbiAgICByZXR1cm4gdGhpcy5BTExfTUVOVV9JVEVNUy5maW5kKGkgPT4gaS5pZCA9PT0gaWQpO1xuICB9XG5cbiAgZ2V0TWVudUl0ZW1UeXBlKGl0ZW06IE1lbnVSb290SXRlbSk6IHN0cmluZyB7XG4gICAgbGV0IHR5cGU6IHN0cmluZztcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgKChpdGVtIGFzIE1lbnVJdGVtTG9nb3V0KS5yb3V0ZSA9PT0gQ29kZXMuTE9HSU5fUk9VVEUpOlxuICAgICAgICB0eXBlID0gJ2xvZ291dCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAoKGl0ZW0gYXMgTWVudUl0ZW1Sb3V0ZSkucm91dGUgIT09IHVuZGVmaW5lZCk6XG4gICAgICAgIHR5cGUgPSAncm91dGUnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKChpdGVtIGFzIE1lbnVJdGVtQWN0aW9uKS5hY3Rpb24gIT09IHVuZGVmaW5lZCk6XG4gICAgICAgIHR5cGUgPSAnYWN0aW9uJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICgoaXRlbSBhcyBNZW51SXRlbUxvY2FsZSkubG9jYWxlICE9PSB1bmRlZmluZWQpOlxuICAgICAgICB0eXBlID0gJ2xvY2FsZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAoKGl0ZW0gYXMgTWVudUl0ZW1Vc2VySW5mbykudXNlciAhPT0gdW5kZWZpbmVkKTpcbiAgICAgICAgdHlwZSA9ICd1c2VyLWluZm8nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKChpdGVtIGFzIE1lbnVHcm91cCkuaXRlbXMgIT09IHVuZGVmaW5lZCk6XG4gICAgICAgIHR5cGUgPSAnZ3JvdXAnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHR5cGUgPSAnZGVmYXVsdCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGlzTWVudUdyb3VwKGl0ZW06IE1lbnVSb290SXRlbSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldE1lbnVJdGVtVHlwZShpdGVtKSA9PT0gJ2dyb3VwJztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TWVudUl0ZW1zKGl0ZW06IE1lbnVSb290SXRlbSk6IE1lbnVJdGVtW10ge1xuICAgIGlmICgoaXRlbSBhcyBNZW51R3JvdXApLml0ZW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAoaXRlbSBhcyBNZW51R3JvdXApLml0ZW1zO1xuICAgIH1cbiAgICByZXR1cm4gW2l0ZW1dO1xuICB9XG5cbn1cbiJdfQ==