import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Codes } from '../../util/codes';
import { Util } from '../../util/util';
import { LoginStorageService } from '../login-storage.service';
var OntimizeEEPermissionsService = (function () {
    function OntimizeEEPermissionsService(injector) {
        this.injector = injector;
        this.path = '';
        this._sessionid = -1;
        this.httpClient = this.injector.get(HttpClient);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
    }
    OntimizeEEPermissionsService.prototype.getDefaultServiceConfiguration = function (permissionsConfig) {
        var serviceName = permissionsConfig ? permissionsConfig.service : undefined;
        var loginStorageService = this.injector.get(LoginStorageService);
        var configuration = this._config.getServiceConfiguration();
        var servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        servConfig[Codes.SESSION_KEY] = loginStorageService.getSessionInfo();
        return servConfig;
    };
    OntimizeEEPermissionsService.prototype.configureService = function (permissionsConfig) {
        var config = this.getDefaultServiceConfiguration(permissionsConfig);
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig.apiEndpoint;
        this._sessionid = config.session ? config.session.id : -1;
        this._user = config.session ? config.session.user : '';
        this.path = config.path ? config.path : OntimizeEEPermissionsService.DEFAULT_PERMISSIONS_PATH;
    };
    OntimizeEEPermissionsService.prototype.loadPermissions = function () {
        var url = this._urlBase + this.path;
        var options = {
            headers: this.buildHeaders()
        };
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.get(url, options).subscribe(function (res) {
                var permissions = {};
                if ((res.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) && Util.isDefined(res.data)) {
                    var response = res.data;
                    if ((response.length === 1) && Util.isObject(response[0])) {
                        try {
                            permissions = JSON.parse(response[0][OntimizeEEPermissionsService.PERMISSIONS_KEY]);
                        }
                        catch (e) {
                            console.warn('[OntimizeEEPermissionsService: permissions parsing failed]');
                        }
                    }
                }
                _innerObserver.next(permissions);
            }, function (error) {
                _innerObserver.error(error);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEPermissionsService.prototype.buildHeaders = function () {
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8',
            Authorization: 'Bearer ' + this._sessionid
        });
    };
    OntimizeEEPermissionsService.DEFAULT_PERMISSIONS_PATH = '/loadPermissions';
    OntimizeEEPermissionsService.PERMISSIONS_KEY = 'permission';
    OntimizeEEPermissionsService.decorators = [
        { type: Injectable }
    ];
    OntimizeEEPermissionsService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeEEPermissionsService;
}());
export { OntimizeEEPermissionsService };
//# sourceMappingURL=data:application/json;base64,