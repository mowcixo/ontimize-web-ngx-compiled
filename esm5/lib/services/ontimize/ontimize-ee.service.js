import * as tslib_1 from "tslib";
import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { Util } from '../../util/util';
import { OntimizeBaseService } from './ontimize-base-service.class';
var OntimizeEEService = (function (_super) {
    tslib_1.__extends(OntimizeEEService, _super);
    function OntimizeEEService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.path = '';
        return _this;
    }
    OntimizeEEService.prototype.configureService = function (config) {
        _super.prototype.configureService.call(this, config);
        this._startSessionPath = this._appConfig.startSessionPath ? this._appConfig.startSessionPath : '/users/login';
        this.path = config.path;
    };
    OntimizeEEService.prototype.startsession = function (user, password) {
        var _this = this;
        var url = this.urlBase + this._startSessionPath;
        var options = {
            headers: new HttpHeaders({
                Authorization: 'Basic ' + btoa(user + ':' + password)
            }),
            observe: 'response'
        };
        var dataObservable = new Observable(function (observer) {
            _this.httpClient.post(url, null, options).subscribe(function (resp) {
                if (Util.isDefined(resp) && Util.isDefined(resp.headers) && Util.isDefined(resp.headers.get('X-Auth-Token'))) {
                    observer.next(resp.headers.get('X-Auth-Token'));
                }
                else {
                    observer.error('Invalid user or password');
                }
            }, function (error) { return observer.error(error); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.endsession = function (user, sessionId) {
        var dataObservable = new Observable(function (observer) {
            setTimeout(function () {
                observer.next(0);
            }, 0);
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.hassession = function (user, sessionId) {
        var dataObservable = new Observable(function (observer) {
            observer.next(true);
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.query = function (kv, av, entity, sqltypes) {
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = "" + this.urlBase + this.path + "/" + entity + "/search";
        var body = JSON.stringify({
            filter: kv,
            columns: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulQueryResponse,
            errorCallBack: this.parseUnsuccessfulQueryResponse
        });
    };
    OntimizeEEService.prototype.advancedQuery = function (kv, av, entity, sqltypes, offset, pagesize, orderby) {
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        orderby = (Util.isDefined(orderby)) ? orderby : this.orderby;
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        pagesize = (Util.isDefined(pagesize)) ? pagesize : this.pagesize;
        var url = "" + this.urlBase + this.path + "/" + entity + "/advancedsearch";
        var body = JSON.stringify({
            filter: kv,
            columns: av,
            sqltypes: sqltypes,
            offset: offset,
            pageSize: pagesize,
            orderBy: orderby
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulAdvancedQueryResponse,
            errorCallBack: this.parseUnsuccessfulAdvancedQueryResponse
        });
    };
    OntimizeEEService.prototype.insert = function (av, entity, sqltypes) {
        if (av === void 0) { av = {}; }
        var url = "" + this.urlBase + this.path + "/" + entity;
        var body = JSON.stringify({
            data: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulInsertResponse,
            errorCallBack: this.parseUnsuccessfulInsertResponse
        });
    };
    OntimizeEEService.prototype.update = function (kv, av, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        if (av === void 0) { av = {}; }
        var url = "" + this.urlBase + this.path + "/" + entity;
        var body = JSON.stringify({
            filter: kv,
            data: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'PUT',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulUpdateResponse,
            errorCallBack: this.parseUnsuccessfulUpdateResponse
        });
    };
    OntimizeEEService.prototype.delete = function (kv, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        var url = "" + this.urlBase + this.path + "/" + entity;
        var body = JSON.stringify({
            filter: kv,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'DELETE',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulDeleteResponse,
            errorCallBack: this.parseUnsuccessfulDeleteResponse
        });
    };
    OntimizeEEService.prototype.buildHeaders = function () {
        var headers = _super.prototype.buildHeaders.call(this);
        return headers.append('Authorization', 'Bearer ' + this._sessionid);
    };
    OntimizeEEService.decorators = [
        { type: Injectable }
    ];
    return OntimizeEEService;
}(OntimizeBaseService));
export { OntimizeEEService };
//# sourceMappingURL=data:application/json;base64,