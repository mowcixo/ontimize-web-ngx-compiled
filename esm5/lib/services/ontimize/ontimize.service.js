import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { Util } from '../../util/util';
import { OntimizeBaseService } from './ontimize-base-service.class';
var OntimizeService = (function (_super) {
    tslib_1.__extends(OntimizeService, _super);
    function OntimizeService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.entity = '';
        return _this;
    }
    OntimizeService.prototype.configureService = function (config) {
        _super.prototype.configureService.call(this, config);
        this._startSessionPath = this._appConfig.startSessionPath ? this._appConfig.startSessionPath : '/startsession';
        this.user = config.session ? config.session.user : '';
        if (config.entity !== undefined) {
            this.entity = config.entity;
        }
    };
    OntimizeService.prototype.startsession = function (user, password) {
        var _this = this;
        var encodedPassword = encodeURIComponent(password);
        var url = this.urlBase + this._startSessionPath + '?user=' + user + '&password=' + encodedPassword;
        var dataObservable = new Observable(function (_startSessionObserver) {
            _this.httpClient.get(url).subscribe(function (resp) {
                if (resp >= 0) {
                    _startSessionObserver.next(resp);
                }
                else {
                    _startSessionObserver.error('Invalid user or password');
                }
            }, function (error) { return _startSessionObserver.error(error); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.endsession = function (user, sessionId) {
        var _this = this;
        var url = this.urlBase + '/endsession?user=' + user + '&sessionid=' + sessionId;
        var dataObservable = new Observable(function (_closeSessionObserver) {
            _this.httpClient.get(url).subscribe(function (resp) {
                _closeSessionObserver.next(resp);
            }, function (error) {
                if (error.status === 401 || error.status === 0 || !error.ok) {
                    _closeSessionObserver.next(0);
                }
                else {
                    _closeSessionObserver.error(error);
                }
            });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.hassession = function (user, sessionId) {
        var _this = this;
        var dataObservable = new Observable(function (observer) {
            var url = _this.urlBase + '/hassession?user=' + user + '&sessionid=' + sessionId;
            _this.httpClient.get(url).subscribe(function (resp) {
                observer.next(resp);
            }, function (error) { return observer.error(error); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.query = function (kv, av, entity, sqltypes) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this.urlBase + "/query";
        var body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            type: 1,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulQueryResponse,
            errorCallBack: this.parseUnsuccessfulQueryResponse
        });
    };
    OntimizeService.prototype.advancedQuery = function (kv, av, entity, sqltypes, offset, pagesize, orderby) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        orderby = (Util.isDefined(orderby)) ? orderby : this.orderby;
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        pagesize = (Util.isDefined(pagesize)) ? pagesize : this.pagesize;
        var url = this.urlBase + "/advancedquery";
        var body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            type: 1,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes,
            offset: offset,
            pageSize: pagesize,
            orderBy: orderby
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulAdvancedQueryResponse,
            errorCallBack: this.parseUnsuccessfulAdvancedQueryResponse
        });
    };
    OntimizeService.prototype.insert = function (av, entity, sqltypes) {
        if (av === void 0) { av = {}; }
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this.urlBase + "/insert";
        var body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            entity: entity,
            av: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulInsertResponse,
            errorCallBack: this.parseUnsuccessfulInsertResponse
        });
    };
    OntimizeService.prototype.update = function (kv, av, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        if (av === void 0) { av = {}; }
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this.urlBase + "/update";
        var body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulUpdateResponse,
            errorCallBack: this.parseUnsuccessfulUpdateResponse
        });
    };
    OntimizeService.prototype.delete = function (kv, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this.urlBase + "/delete";
        var body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            entity: entity,
            kv: kv,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulDeleteResponse,
            errorCallBack: this.parseUnsuccessfulDeleteResponse
        });
    };
    OntimizeService.decorators = [
        { type: Injectable }
    ];
    return OntimizeService;
}(OntimizeBaseService));
export { OntimizeService };
//# sourceMappingURL=data:application/json;base64,