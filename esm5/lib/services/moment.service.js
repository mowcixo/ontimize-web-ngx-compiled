import { Injectable, Injector } from '@angular/core';
import moment from 'moment';
import { AppConfig } from '../config/app-config';
import * as i0 from "@angular/core";
var MomentService = (function () {
    function MomentService(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig).getConfiguration();
        this.load(this._config.locale);
    }
    MomentService.prototype.load = function (locale) {
        this._locale = locale;
    };
    MomentService.prototype.parseDate = function (value, format, locale) {
        var result = '';
        if (!locale) {
            locale = this._locale;
        }
        if (typeof value === 'number') {
            result = moment(new Date(value)).locale(locale).format(format ? format : MomentService.defaultFormat);
        }
        else {
            result = moment(value, MomentService.DATE_FORMATS, locale).format(format ? format : MomentService.defaultFormat);
        }
        result = (result === 'Invalid date') ? '' : result;
        return result;
    };
    MomentService.prototype.getLocale = function () {
        return this._locale;
    };
    MomentService.DATE_FORMATS = ['YYYY-MM-DD', 'DD-MM-YYYY', 'MM-DD-YYYY', 'YYYY-MM-DDThh:mm:ss.S', 'YYYY-MM-DDThh:mm:ss.SSSZ', 'YYYY-MM-DD hh:mm:ssZ'];
    MomentService.defaultFormat = 'L';
    MomentService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MomentService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    MomentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MomentService_Factory() { return new MomentService(i0.ɵɵinject(i0.INJECTOR)); }, token: MomentService, providedIn: "root" });
    return MomentService;
}());
export { MomentService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21vbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBR2pEO0lBWUUsdUJBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsNEJBQUksR0FBSixVQUFLLE1BQWM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELGlDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBZSxFQUFFLE1BQWU7UUFDcEQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN2QjtRQUNELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkc7YUFBTTtZQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbEg7UUFDRCxNQUFNLEdBQUcsQ0FBQyxNQUFNLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25ELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxpQ0FBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUE5Qk0sMEJBQVksR0FBRyxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFFLDBCQUEwQixFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDdkksMkJBQWEsR0FBVyxHQUFHLENBQUM7O2dCQVJwQyxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Z0JBUm9CLFFBQVE7Ozt3QkFBN0I7Q0E2Q0MsQUF2Q0QsSUF1Q0M7U0FwQ1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmltcG9ydCB7IEFwcENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9hcHAtY29uZmlnJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL3R5cGVzL2NvbmZpZy50eXBlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTW9tZW50U2VydmljZSB7XG5cbiAgLy8gSFRNTDUgaW5wdXQgZGF0ZTogWVlZWS1NTS1ERCAvLyBsb2NhbGUgRVMtZXM6IERELU1NLVlZWVkgLy8gbG9jYWxlIEVOLWVuOiBNTS1ERC1ZWVlZIC8vIElTTyA4NjAxOlxuICAvLyBZWVlZLU1NLUREVGhoOm1tOnNzLlMgLy8gVVRDOiBZWVlZLU1NLUREIGhoOm1tOnNzWlxuICBzdGF0aWMgREFURV9GT1JNQVRTID0gWydZWVlZLU1NLUREJywgJ0RELU1NLVlZWVknLCAnTU0tREQtWVlZWScsICdZWVlZLU1NLUREVGhoOm1tOnNzLlMnLCAnWVlZWS1NTS1ERFRoaDptbTpzcy5TU1NaJywgJ1lZWVktTU0tREQgaGg6bW06c3NaJ107XG4gIHN0YXRpYyBkZWZhdWx0Rm9ybWF0OiBzdHJpbmcgPSAnTCc7XG4gIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nO1xuICBwcml2YXRlIF9jb25maWc6IENvbmZpZztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5pbmplY3Rvci5nZXQoQXBwQ29uZmlnKS5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgdGhpcy5sb2FkKHRoaXMuX2NvbmZpZy5sb2NhbGUpO1xuICB9XG5cbiAgbG9hZChsb2NhbGU6IHN0cmluZykge1xuICAgIHRoaXMuX2xvY2FsZSA9IGxvY2FsZTtcbiAgfVxuXG4gIHBhcnNlRGF0ZSh2YWx1ZTogYW55LCBmb3JtYXQ/OiBzdHJpbmcsIGxvY2FsZT86IHN0cmluZyk6IGFueSB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICBsb2NhbGUgPSB0aGlzLl9sb2NhbGU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXN1bHQgPSBtb21lbnQobmV3IERhdGUodmFsdWUpKS5sb2NhbGUobG9jYWxlKS5mb3JtYXQoZm9ybWF0ID8gZm9ybWF0IDogTW9tZW50U2VydmljZS5kZWZhdWx0Rm9ybWF0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gbW9tZW50KHZhbHVlLCBNb21lbnRTZXJ2aWNlLkRBVEVfRk9STUFUUywgbG9jYWxlKS5mb3JtYXQoZm9ybWF0ID8gZm9ybWF0IDogTW9tZW50U2VydmljZS5kZWZhdWx0Rm9ybWF0KTtcbiAgICB9XG4gICAgcmVzdWx0ID0gKHJlc3VsdCA9PT0gJ0ludmFsaWQgZGF0ZScpID8gJycgOiByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGdldExvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICB9XG5cbn1cbiJdfQ==