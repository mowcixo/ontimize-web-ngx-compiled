import { InjectionToken, Injector } from '@angular/core';
import { AppConfig } from '../config/app-config';
import { Util } from '../util/util';
import { OntimizeEEService } from './ontimize/ontimize-ee.service';
import { OntimizeExportService } from './ontimize/ontimize-export.service';
import { OntimizeFileService } from './ontimize/ontimize-file.service';
import { OntimizeService } from './ontimize/ontimize.service';
import { OntimizeEEPermissionsService } from './permissions/ontimize-ee-permissions.service';
import { OntimizePermissionsService } from './permissions/ontimize-permissions.service';
export var O_DATA_SERVICE = new InjectionToken('Ontimize data service');
export var O_TRANSLATE_SERVICE = new InjectionToken('Translate service');
export var O_FILE_SERVICE = new InjectionToken('File uploader service');
export var O_EXPORT_SERVICE = new InjectionToken('Export service');
export var O_PERMISSION_SERVICE = new InjectionToken('Permission service');
export function dataServiceFactory(injector) {
    var serviceClass = _getInjectionTokenValue(O_DATA_SERVICE, injector);
    var service = _createServiceInstance(serviceClass, injector);
    if (Util.isDefined(service)) {
        return service;
    }
    var config = injector.get(AppConfig).getConfiguration();
    if (typeof (config.serviceType) === 'undefined') {
        return new OntimizeService(injector);
    }
    else if ('OntimizeEE' === config.serviceType) {
        return new OntimizeEEService(injector);
    }
    return _createServiceInstance(config.serviceType, injector);
}
export function fileServiceFactory(injector) {
    var serviceClass = _getInjectionTokenValue(O_FILE_SERVICE, injector);
    var service = _createServiceInstance(serviceClass, injector);
    return Util.isDefined(service) ? service : new OntimizeFileService(injector);
}
export function exportServiceFactory(injector) {
    var serviceClass = _getInjectionTokenValue(O_EXPORT_SERVICE, injector);
    var service = _createServiceInstance(serviceClass, injector);
    if (Util.isDefined(service)) {
        return service;
    }
    var config = injector.get(AppConfig).getConfiguration();
    if (typeof (config.exportServiceType) === 'undefined') {
        return new OntimizeExportService(injector);
    }
    return _createServiceInstance(config.exportServiceType, injector);
}
export function permissionsServiceFactory(injector) {
    var serviceClass = _getInjectionTokenValue(O_PERMISSION_SERVICE, injector);
    var service = _createServiceInstance(serviceClass, injector);
    if (Util.isDefined(service)) {
        return service;
    }
    var config = injector.get(AppConfig).getConfiguration();
    if (!Util.isDefined(config.permissionsServiceType) || 'OntimizePermissions' === config.permissionsServiceType) {
        return new OntimizePermissionsService(injector);
    }
    else if ('OntimizeEEPermissions' === config.permissionsServiceType) {
        return new OntimizeEEPermissionsService(injector);
    }
    return _createServiceInstance(config.permissionsServiceType, injector);
}
export var OntimizeServiceProvider = { provide: OntimizeService, useFactory: dataServiceFactory, deps: [Injector] };
export var OntimizeExportServiceProvider = { provide: OntimizeExportService, useFactory: exportServiceFactory, deps: [Injector] };
export function _getInjectionTokenValue(token, injector) {
    var service;
    try {
        service = injector.get(token);
    }
    catch (e) {
    }
    return service;
}
export function _createServiceInstance(clazz, injector) {
    if (!Util.isDefined(clazz)) {
        return;
    }
    var newInstance = Object.create(clazz.prototype);
    clazz.apply(newInstance, [injector]);
    return newInstance;
}
//# sourceMappingURL=data:application/json;base64,