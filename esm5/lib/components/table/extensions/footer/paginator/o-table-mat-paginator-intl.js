import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { MatPaginatorIntl } from '@angular/material';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
var OTableMatPaginatorIntl = (function (_super) {
    tslib_1.__extends(OTableMatPaginatorIntl, _super);
    function OTableMatPaginatorIntl(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.translateService = _this.injector.get(OTranslateService);
        _this.itemsPerPageLabel = _this.translateService.get('TABLE.PAGINATE.ITEMSPERPAGELABEL');
        _this.nextPageLabel = _this.translateService.get('TABLE.PAGINATE.NEXT');
        _this.previousPageLabel = _this.translateService.get('TABLE.PAGINATE.PREVIOUS');
        _this.firstPageLabel = _this.translateService.get('TABLE.PAGINATE.FIRST');
        _this.lastPageLabel = _this.translateService.get('TABLE.PAGINATE.LAST');
        _this.getRangeLabel = _this.getORangeLabel;
        _this.onLanguageChangeSubscribe = _this.translateService.onLanguageChanged.subscribe(function (res) {
            _this.itemsPerPageLabel = _this.translateService.get('TABLE.PAGINATE.ITEMSPERPAGELABEL');
            _this.nextPageLabel = _this.translateService.get('TABLE.PAGINATE.NEXT');
            _this.previousPageLabel = _this.translateService.get('TABLE.PAGINATE.PREVIOUS');
            _this.firstPageLabel = _this.translateService.get('TABLE.PAGINATE.FIRST');
            _this.lastPageLabel = _this.translateService.get('TABLE.PAGINATE.LAST');
            _this.getRangeLabel = _this.getORangeLabel;
            _this.changes.next();
        });
        return _this;
    }
    OTableMatPaginatorIntl.prototype.getORangeLabel = function (page, pageSize, length) {
        if (!isNaN(pageSize) && (length === 0 || pageSize === 0)) {
            return "0  " + this.translateService.get('TABLE.PAGINATE.RANGE_LABEL') + " " + length;
        }
        length = Math.max(length, 0);
        var startIndex = page * pageSize;
        var endIndex = startIndex < length ?
            Math.min(startIndex + pageSize, length) :
            startIndex + pageSize;
        if (isNaN(pageSize)) {
            startIndex = 0;
            endIndex = length;
        }
        return startIndex + 1 + " - " + endIndex + "  " + this.translateService.get('TABLE.PAGINATE.RANGE_LABEL') + " " + length;
    };
    OTableMatPaginatorIntl.decorators = [
        { type: Injectable }
    ];
    OTableMatPaginatorIntl.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OTableMatPaginatorIntl;
}(MatPaginatorIntl));
export { OTableMatPaginatorIntl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1tYXQtcGFnaW5hdG9yLWludGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvZXh0ZW5zaW9ucy9mb290ZXIvcGFnaW5hdG9yL28tdGFibGUtbWF0LXBhZ2luYXRvci1pbnRsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUUxRjtJQUM0QyxrREFBZ0I7SUFRMUQsZ0NBQXNCLFFBQWtCO1FBQXhDLFlBQ0UsaUJBQU8sU0FrQlI7UUFuQnFCLGNBQVEsR0FBUixRQUFRLENBQVU7UUFFdEMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDN0QsS0FBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUN2RixLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN0RSxLQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzlFLEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3hFLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3RFLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQztRQUV6QyxLQUFJLENBQUMseUJBQXlCLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxVQUFBLEdBQUc7WUFDcEYsS0FBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztZQUN2RixLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN0RSxLQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlFLEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hFLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3RFLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQztZQUN6QyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDOztJQUNMLENBQUM7SUFFRCwrQ0FBYyxHQUFkLFVBQWUsSUFBWSxFQUFFLFFBQWdCLEVBQUUsTUFBYztRQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDeEQsT0FBTyxRQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsU0FBSSxNQUFRLENBQUM7U0FDbEY7UUFDRCxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxVQUFVLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUVqQyxJQUFJLFFBQVEsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDekMsVUFBVSxHQUFHLFFBQVEsQ0FBQztRQUd4QixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNuQixVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsUUFBUSxHQUFHLE1BQU0sQ0FBQztTQUNuQjtRQUVELE9BQVUsVUFBVSxHQUFHLENBQUMsV0FBTSxRQUFRLFVBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxTQUFJLE1BQVEsQ0FBQztJQUNqSCxDQUFDOztnQkFoREYsVUFBVTs7O2dCQUxVLFFBQVE7O0lBdUQ3Qiw2QkFBQztDQUFBLEFBbERELENBQzRDLGdCQUFnQixHQWlEM0Q7U0FqRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFBhZ2luYXRvckludGwgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbmltcG9ydCB7IE9UcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvdHJhbnNsYXRlL28tdHJhbnNsYXRlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT1RhYmxlTWF0UGFnaW5hdG9ySW50bCBleHRlbmRzIE1hdFBhZ2luYXRvckludGwge1xuXG4gIGl0ZW1zUGVyUGFnZUxhYmVsO1xuICBuZXh0UGFnZUxhYmVsO1xuICBwcmV2aW91c1BhZ2VMYWJlbDtcbiAgdHJhbnNsYXRlU2VydmljZTogT1RyYW5zbGF0ZVNlcnZpY2U7XG4gIHByb3RlY3RlZCBvbkxhbmd1YWdlQ2hhbmdlU3Vic2NyaWJlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoT1RyYW5zbGF0ZVNlcnZpY2UpO1xuICAgIHRoaXMuaXRlbXNQZXJQYWdlTGFiZWwgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KCdUQUJMRS5QQUdJTkFURS5JVEVNU1BFUlBBR0VMQUJFTCcpO1xuICAgIHRoaXMubmV4dFBhZ2VMYWJlbCA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXQoJ1RBQkxFLlBBR0lOQVRFLk5FWFQnKTtcbiAgICB0aGlzLnByZXZpb3VzUGFnZUxhYmVsID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldCgnVEFCTEUuUEFHSU5BVEUuUFJFVklPVVMnKTtcbiAgICB0aGlzLmZpcnN0UGFnZUxhYmVsID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldCgnVEFCTEUuUEFHSU5BVEUuRklSU1QnKTtcbiAgICB0aGlzLmxhc3RQYWdlTGFiZWwgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KCdUQUJMRS5QQUdJTkFURS5MQVNUJyk7XG4gICAgdGhpcy5nZXRSYW5nZUxhYmVsID0gdGhpcy5nZXRPUmFuZ2VMYWJlbDtcblxuICAgIHRoaXMub25MYW5ndWFnZUNoYW5nZVN1YnNjcmliZSA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5vbkxhbmd1YWdlQ2hhbmdlZC5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgIHRoaXMuaXRlbXNQZXJQYWdlTGFiZWwgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KCdUQUJMRS5QQUdJTkFURS5JVEVNU1BFUlBBR0VMQUJFTCcpO1xuICAgICAgdGhpcy5uZXh0UGFnZUxhYmVsID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldCgnVEFCTEUuUEFHSU5BVEUuTkVYVCcpO1xuICAgICAgdGhpcy5wcmV2aW91c1BhZ2VMYWJlbCA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXQoJ1RBQkxFLlBBR0lOQVRFLlBSRVZJT1VTJyk7XG4gICAgICB0aGlzLmZpcnN0UGFnZUxhYmVsID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldCgnVEFCTEUuUEFHSU5BVEUuRklSU1QnKTtcbiAgICAgIHRoaXMubGFzdFBhZ2VMYWJlbCA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXQoJ1RBQkxFLlBBR0lOQVRFLkxBU1QnKTtcbiAgICAgIHRoaXMuZ2V0UmFuZ2VMYWJlbCA9IHRoaXMuZ2V0T1JhbmdlTGFiZWw7XG4gICAgICB0aGlzLmNoYW5nZXMubmV4dCgpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0T1JhbmdlTGFiZWwocGFnZTogbnVtYmVyLCBwYWdlU2l6ZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKCFpc05hTihwYWdlU2l6ZSkgJiYgKGxlbmd0aCA9PT0gMCB8fCBwYWdlU2l6ZSA9PT0gMCkpIHtcbiAgICAgIHJldHVybiBgMCAgJHt0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KCdUQUJMRS5QQUdJTkFURS5SQU5HRV9MQUJFTCcpfSAke2xlbmd0aH1gO1xuICAgIH1cbiAgICBsZW5ndGggPSBNYXRoLm1heChsZW5ndGgsIDApO1xuICAgIGxldCBzdGFydEluZGV4ID0gcGFnZSAqIHBhZ2VTaXplO1xuICAgIC8vIElmIHRoZSBzdGFydCBpbmRleCBleGNlZWRzIHRoZSBsaXN0IGxlbmd0aCwgZG8gbm90IHRyeSBhbmQgZml4IHRoZSBlbmQgaW5kZXggdG8gdGhlIGVuZC5cbiAgICBsZXQgZW5kSW5kZXggPSBzdGFydEluZGV4IDwgbGVuZ3RoID9cbiAgICAgIE1hdGgubWluKHN0YXJ0SW5kZXggKyBwYWdlU2l6ZSwgbGVuZ3RoKSA6XG4gICAgICBzdGFydEluZGV4ICsgcGFnZVNpemU7XG5cbiAgICAvLyBvcHRpb24gc2hvdyBhbGxcbiAgICBpZiAoaXNOYU4ocGFnZVNpemUpKSB7XG4gICAgICBzdGFydEluZGV4ID0gMDtcbiAgICAgIGVuZEluZGV4ID0gbGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtzdGFydEluZGV4ICsgMX0gLSAke2VuZEluZGV4fSAgJHt0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0KCdUQUJMRS5QQUdJTkFURS5SQU5HRV9MQUJFTCcpfSAke2xlbmd0aH1gO1xuICB9XG5cbn1cbiJdfQ==