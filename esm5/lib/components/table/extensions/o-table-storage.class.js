import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
var OTableStorage = (function () {
    function OTableStorage(table) {
        this.table = table;
    }
    OTableStorage.prototype.getDataToStore = function () {
        var dataToStore = {
            filter: this.table.oTableQuickFilterComponent ? this.table.oTableQuickFilterComponent.value : ''
        };
        var properties = ['sort', 'columns-display', 'columns-filter', 'quick-filter', 'page', 'selection', 'initial-configuration', 'filter-columns', 'filter-column-active-by-default'];
        Object.assign(dataToStore, this.getTablePropertiesToStore(properties));
        var storedFiltersArr = this.getStoredFilters();
        if (storedFiltersArr.length > 0) {
            dataToStore[OTableStorage.USER_STORED_FILTERS_KEY] = storedFiltersArr;
        }
        var storedConfigurationsArr = this.getStoredConfigurations();
        if (storedConfigurationsArr.length > 0) {
            dataToStore[OTableStorage.STORED_CONFIGURATIONS_KEY] = storedConfigurationsArr;
        }
        return dataToStore;
    };
    OTableStorage.prototype.getTablePropertiesToStore = function (properties) {
        var _this = this;
        var result = {};
        properties.forEach(function (prop) {
            Object.assign(result, _this.getTablePropertyToStore(prop));
        });
        return result;
    };
    OTableStorage.prototype.getTablePropertyToStore = function (property) {
        var result = {};
        switch (property) {
            case 'sort':
                result = this.getSortState();
                break;
            case 'columns-display':
                result = this.getColumnsDisplayState();
                break;
            case 'quick-filter':
                result = this.getColumnsQuickFilterState();
                break;
            case 'columns-filter':
                result = this.getColumnFiltersState();
                break;
            case 'page':
                result = this.getPageState();
                break;
            case 'selection':
                result = this.getSelectionState();
                break;
            case 'initial-configuration':
                result = this.getInitialConfigurationState();
                break;
            case 'filter-column-active-by-default':
                result = this.getFilterColumnActiveByDefaultState();
                break;
            case 'filter-columns':
                result = this.getFilterColumnsState();
                break;
        }
        return result;
    };
    OTableStorage.prototype.getFilterColumnsState = function () {
        var result = {};
        if (this.table.state.hasOwnProperty('filter-columns') && this.table.state['filter-columns']) {
            result['filter-columns'] = this.table.state['filter-columns'];
        }
        else if (this.table.filterColumns) {
            result['filter-columns'] = this.table.filterColumns;
        }
        return result;
    };
    OTableStorage.prototype.reset = function () {
        var state = {};
        state[OTableStorage.USER_STORED_FILTERS_KEY] = this.table.state[OTableStorage.USER_STORED_FILTERS_KEY];
        state[OTableStorage.STORED_CONFIGURATIONS_KEY] = this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY];
        if (this.table.pageable) {
            state.totalQueryRecordsNumber = this.table.state.totalQueryRecordsNumber;
        }
        state.currentPage = 0;
        this.table.state = state;
    };
    OTableStorage.prototype.getSortState = function () {
        var result = {};
        var sortColumnsArray = this.table.sort.getSortColumns();
        if (sortColumnsArray.length > 0) {
            var sortColumns_1 = [];
            sortColumnsArray.forEach(function (sortData) {
                sortColumns_1.push(sortData.id + Codes.COLUMNS_ALIAS_SEPARATOR + sortData.direction);
            });
            result['sort-columns'] = sortColumns_1.join(Codes.ARRAY_INPUT_SEPARATOR);
        }
        return result;
    };
    OTableStorage.prototype.getFilterColumnActiveByDefaultState = function () {
        var result = {};
        if (this.table.oTableColumnsFilterComponent) {
            result['filter-column-active-by-default'] = this.table.showFilterByColumnIcon;
        }
        return result;
    };
    OTableStorage.prototype.getColumnFiltersState = function () {
        var result = {};
        if (this.table.oTableColumnsFilterComponent) {
            var columnValueFilters = this.table.dataSource.getColumnValueFilters();
            if (columnValueFilters.length > 0) {
                result['column-value-filters'] = columnValueFilters;
            }
        }
        return result;
    };
    OTableStorage.prototype.getColumnsDisplayState = function () {
        var result = {};
        var oColumnsData = [];
        this.table.oTableOptions.columns.forEach(function (oCol) {
            oColumnsData.push({
                attr: oCol.attr,
                visible: oCol.visible,
                width: oCol.getWidthToStore()
            });
        });
        result['oColumns-display'] = oColumnsData;
        result['select-column-visible'] = this.table.oTableOptions.selectColumn.visible;
        return result;
    };
    OTableStorage.prototype.getColumnsQuickFilterState = function () {
        var result = {};
        var tableOptions = this.table.oTableOptions;
        var oColumnsData = [];
        tableOptions.columns.forEach(function (oCol) {
            oColumnsData.push({
                attr: oCol.attr,
                searchable: oCol.searchable,
                searching: oCol.searching
            });
        });
        result.oColumns = oColumnsData;
        result['filter-case-sensitive'] = tableOptions.filterCaseSensitive;
        return result;
    };
    OTableStorage.prototype.getPageState = function () {
        var result = {
            'query-rows': this.table.matpaginator ? this.table.matpaginator.pageSize : ''
        };
        if (this.table.currentPage > 0 && this.table.storePaginationState) {
            result.currentPage = this.table.currentPage;
        }
        if (this.table.pageable && this.table.storePaginationState) {
            var state = this.table.state;
            result.totalQueryRecordsNumber = state.totalQueryRecordsNumber;
            result.queryRecordOffset = Math.max((state.queryRecordOffset - this.table.dataSource.renderedData.length), (state.queryRecordOffset - this.table.queryRows));
        }
        return result;
    };
    OTableStorage.prototype.getSelectionState = function () {
        var _this = this;
        var result = {
            selection: []
        };
        if (this.table && this.table.keepSelectedItems) {
            var selection_1 = [];
            this.table.getSelectedItems().forEach(function (item) {
                var data = {};
                _this.table.getKeys().forEach(function (key) {
                    data[key] = item[key];
                });
                selection_1.push(data);
            });
            result.selection = selection_1;
        }
        return result;
    };
    OTableStorage.prototype.getInitialConfigurationState = function () {
        var result = {};
        var initialConfiguration = {};
        var oColumnsData = [];
        var self = this;
        Util.parseArray(this.table.visibleColumns, true).forEach(function (x) {
            var oCol = self.table.getOColumn(x);
            oColumnsData.push({
                attr: oCol.attr,
                visible: true,
                width: oCol.definition ? oCol.definition.originalWidth : undefined
            });
        });
        initialConfiguration['oColumns-display'] = oColumnsData;
        initialConfiguration['sort-columns'] = this.table.sortColumns;
        initialConfiguration['select-column-visible'] = this.table.oTableOptions.selectColumn.visible;
        initialConfiguration['filter-case-sensitive'] = this.table.filterCaseSensitive;
        initialConfiguration['query-rows'] = this.table.originalQueryRows;
        initialConfiguration['filter-column-active-by-default'] = this.table.originalFilterColumnActiveByDefault;
        initialConfiguration['filter-columns'] = this.table.originalFilterColumns;
        result['initial-configuration'] = initialConfiguration;
        return result;
    };
    OTableStorage.prototype.setStoredFilters = function (filters) {
        return this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] = filters;
    };
    OTableStorage.prototype.getStoredFilters = function () {
        return this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] || [];
    };
    OTableStorage.prototype.getStoredFilter = function (filterName) {
        return this.getStoredFilters().find(function (item) { return item.name === filterName; });
    };
    OTableStorage.prototype.getStoredFilterConf = function (filterName) {
        return (this.getStoredFilter(filterName) || {})[OTableStorage.STORED_FILTER_KEY];
    };
    OTableStorage.prototype.deleteStoredFilter = function (filterName) {
        var storedFilters = this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] || [];
        var index = storedFilters.findIndex(function (item) { return item.name === filterName; });
        if (index >= 0) {
            storedFilters.splice(index, 1);
            this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] = storedFilters;
        }
    };
    OTableStorage.prototype.storeFilter = function (filterArgs) {
        var result = {};
        var storedFilter = {};
        Object.assign(storedFilter, this.getColumnFiltersState());
        Object.assign(storedFilter, this.getColumnsQuickFilterState());
        result[OTableStorage.STORED_FILTER_KEY] = storedFilter;
        Object.assign(result, filterArgs);
        var existingFilters = this.getStoredFilters();
        existingFilters.push(result);
        this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] = existingFilters;
    };
    OTableStorage.prototype.getStoredColumnsFilters = function (arg) {
        var stateObj = arg || this.table.state;
        return stateObj['column-value-filters'] || [];
    };
    OTableStorage.prototype.getStoredFiltersColumns = function (arg) {
        var stateObj = arg || this.table.state;
        return stateObj['filter-columns'] || [];
    };
    OTableStorage.prototype.getStoredConfigurations = function () {
        return this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY] || [];
    };
    OTableStorage.prototype.getStoredConfiguration = function (configurationName) {
        return this.getStoredConfigurations().find(function (item) { return item.name === configurationName; });
    };
    OTableStorage.prototype.storeConfiguration = function (configurationAgs, tableProperties) {
        var result = {};
        this.table.storePaginationState = true;
        var storedConfiguration = this.getTablePropertiesToStore(tableProperties);
        this.table.storePaginationState = false;
        result[OTableStorage.STORED_CONFIGURATION_KEY] = storedConfiguration;
        Object.assign(result, configurationAgs);
        result[OTableStorage.STORED_PROPERTIES_KEY] = tableProperties;
        var existingConfigurations = this.getStoredConfigurations();
        existingConfigurations.push(result);
        this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY] = existingConfigurations;
    };
    OTableStorage.prototype.deleteStoredConfiguration = function (configurationName) {
        var storedConfigurations = this.getStoredConfigurations();
        var index = storedConfigurations.findIndex(function (item) { return item.name === configurationName; });
        if (index >= 0) {
            storedConfigurations.splice(index, 1);
            this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY] = storedConfigurations;
        }
    };
    OTableStorage.STORED_FILTER_KEY = 'stored-filter';
    OTableStorage.USER_STORED_FILTERS_KEY = 'user-stored-filters';
    OTableStorage.STORED_CONFIGURATION_KEY = 'stored-configuration';
    OTableStorage.STORED_PROPERTIES_KEY = 'stored-properties';
    OTableStorage.STORED_CONFIGURATIONS_KEY = 'user-stored-configurations';
    return OTableStorage;
}());
export { OTableStorage };
//# sourceMappingURL=data:application/json;base64,