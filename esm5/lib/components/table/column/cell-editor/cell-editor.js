import * as tslib_1 from "tslib";
import { OTableCellEditorBooleanComponent, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN } from './boolean/o-table-cell-editor-boolean.component';
import { OTableCellEditorDateComponent, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE } from './date/o-table-cell-editor-date.component';
import { OTableCellEditorIntegerComponent } from './integer/o-table-cell-editor-integer.component';
import { OTableCellEditorRealComponent, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_REAL } from './real/o-table-cell-editor-real.component';
import { OTableCellEditorTextComponent, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TEXT, DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TEXT } from './text/o-table-cell-editor-text.component';
import { OTableCellEditorTimeComponent, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME } from './time/o-table-cell-editor-time.component';
export var O_TABLE_CELL_EDITORS = [
    OTableCellEditorBooleanComponent,
    OTableCellEditorDateComponent,
    OTableCellEditorIntegerComponent,
    OTableCellEditorRealComponent,
    OTableCellEditorTextComponent,
    OTableCellEditorTimeComponent
];
export var O_TABLE_CELL_EDITORS_INPUTS = tslib_1.__spread(DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_REAL, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TEXT, DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME);
export var O_TABLE_CELL_EDITORS_OUTPUTS = tslib_1.__spread(DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TEXT);
export var editorsMapping = {
    boolean: OTableCellEditorBooleanComponent,
    date: OTableCellEditorDateComponent,
    integer: OTableCellEditorIntegerComponent,
    real: OTableCellEditorRealComponent,
    percentage: OTableCellEditorRealComponent,
    currency: OTableCellEditorRealComponent,
    text: OTableCellEditorTextComponent,
    time: OTableCellEditorTimeComponent
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1lZGl0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvY29sdW1uL2NlbGwtZWRpdG9yL2NlbGwtZWRpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsMENBQTBDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUMvSSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNuSSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNuRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNuSSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsdUNBQXVDLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUM3SyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUVuSSxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRztJQUNsQyxnQ0FBZ0M7SUFDaEMsNkJBQTZCO0lBQzdCLGdDQUFnQztJQUNoQyw2QkFBNkI7SUFDN0IsNkJBQTZCO0lBQzdCLDZCQUE2QjtDQUM5QixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sMkJBQTJCLG9CQUNuQywwQ0FBMEMsRUFDMUMsdUNBQXVDLEVBQ3ZDLHVDQUF1QyxFQUN2Qyx1Q0FBdUMsRUFDdkMsdUNBQXVDLENBQzNDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSw0QkFBNEIsb0JBQ3BDLHdDQUF3QyxDQUM1QyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHO0lBQzVCLE9BQU8sRUFBRSxnQ0FBZ0M7SUFDekMsSUFBSSxFQUFFLDZCQUE2QjtJQUNuQyxPQUFPLEVBQUUsZ0NBQWdDO0lBQ3pDLElBQUksRUFBRSw2QkFBNkI7SUFDbkMsVUFBVSxFQUFFLDZCQUE2QjtJQUN6QyxRQUFRLEVBQUUsNkJBQTZCO0lBQ3ZDLElBQUksRUFBRSw2QkFBNkI7SUFDbkMsSUFBSSxFQUFFLDZCQUE2QjtDQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT1RhYmxlQ2VsbEVkaXRvckJvb2xlYW5Db21wb25lbnQsIERFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ0VMTF9FRElUT1JfQk9PTEVBTiB9IGZyb20gJy4vYm9vbGVhbi9vLXRhYmxlLWNlbGwtZWRpdG9yLWJvb2xlYW4uY29tcG9uZW50JztcbmltcG9ydCB7IE9UYWJsZUNlbGxFZGl0b3JEYXRlQ29tcG9uZW50LCBERUZBVUxUX0lOUFVUU19PX1RBQkxFX0NFTExfRURJVE9SX0RBVEUgfSBmcm9tICcuL2RhdGUvby10YWJsZS1jZWxsLWVkaXRvci1kYXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPVGFibGVDZWxsRWRpdG9ySW50ZWdlckNvbXBvbmVudCB9IGZyb20gJy4vaW50ZWdlci9vLXRhYmxlLWNlbGwtZWRpdG9yLWludGVnZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE9UYWJsZUNlbGxFZGl0b3JSZWFsQ29tcG9uZW50LCBERUZBVUxUX0lOUFVUU19PX1RBQkxFX0NFTExfRURJVE9SX1JFQUwgfSBmcm9tICcuL3JlYWwvby10YWJsZS1jZWxsLWVkaXRvci1yZWFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPVGFibGVDZWxsRWRpdG9yVGV4dENvbXBvbmVudCwgREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DRUxMX0VESVRPUl9URVhULCBERUZBVUxUX09VVFBVVFNfT19UQUJMRV9DRUxMX0VESVRPUl9URVhUIH0gZnJvbSAnLi90ZXh0L28tdGFibGUtY2VsbC1lZGl0b3ItdGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgT1RhYmxlQ2VsbEVkaXRvclRpbWVDb21wb25lbnQsIERFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ0VMTF9FRElUT1JfVElNRSB9IGZyb20gJy4vdGltZS9vLXRhYmxlLWNlbGwtZWRpdG9yLXRpbWUuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IE9fVEFCTEVfQ0VMTF9FRElUT1JTID0gW1xuICBPVGFibGVDZWxsRWRpdG9yQm9vbGVhbkNvbXBvbmVudCxcbiAgT1RhYmxlQ2VsbEVkaXRvckRhdGVDb21wb25lbnQsXG4gIE9UYWJsZUNlbGxFZGl0b3JJbnRlZ2VyQ29tcG9uZW50LFxuICBPVGFibGVDZWxsRWRpdG9yUmVhbENvbXBvbmVudCxcbiAgT1RhYmxlQ2VsbEVkaXRvclRleHRDb21wb25lbnQsXG4gIE9UYWJsZUNlbGxFZGl0b3JUaW1lQ29tcG9uZW50XG5dO1xuXG5leHBvcnQgY29uc3QgT19UQUJMRV9DRUxMX0VESVRPUlNfSU5QVVRTID0gW1xuICAuLi5ERUZBVUxUX0lOUFVUU19PX1RBQkxFX0NFTExfRURJVE9SX0JPT0xFQU4sXG4gIC4uLkRFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ0VMTF9FRElUT1JfREFURSxcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DRUxMX0VESVRPUl9SRUFMLCAvLyBpbmNsdWRlcyBJbnRlZ2VyXG4gIC4uLkRFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ0VMTF9FRElUT1JfVEVYVCxcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19UQUJMRV9DRUxMX0VESVRPUl9USU1FLFxuXTtcblxuZXhwb3J0IGNvbnN0IE9fVEFCTEVfQ0VMTF9FRElUT1JTX09VVFBVVFMgPSBbXG4gIC4uLkRFRkFVTFRfT1VUUFVUU19PX1RBQkxFX0NFTExfRURJVE9SX1RFWFRcbl07XG5cbmV4cG9ydCBjb25zdCBlZGl0b3JzTWFwcGluZyA9IHtcbiAgYm9vbGVhbjogT1RhYmxlQ2VsbEVkaXRvckJvb2xlYW5Db21wb25lbnQsXG4gIGRhdGU6IE9UYWJsZUNlbGxFZGl0b3JEYXRlQ29tcG9uZW50LFxuICBpbnRlZ2VyOiBPVGFibGVDZWxsRWRpdG9ySW50ZWdlckNvbXBvbmVudCxcbiAgcmVhbDogT1RhYmxlQ2VsbEVkaXRvclJlYWxDb21wb25lbnQsXG4gIHBlcmNlbnRhZ2U6IE9UYWJsZUNlbGxFZGl0b3JSZWFsQ29tcG9uZW50LFxuICBjdXJyZW5jeTogT1RhYmxlQ2VsbEVkaXRvclJlYWxDb21wb25lbnQsXG4gIHRleHQ6IE9UYWJsZUNlbGxFZGl0b3JUZXh0Q29tcG9uZW50LFxuICB0aW1lOiBPVGFibGVDZWxsRWRpdG9yVGltZUNvbXBvbmVudFxufTtcbiJdfQ==