import { OFormValue } from '../components/form/OFormValue';
import { Codes } from './codes';
import { SQLTypes } from './sqltypes';
import { Util } from './util';
var ServiceUtils = (function () {
    function ServiceUtils() {
    }
    ServiceUtils.getParentKeysFromForm = function (parentKeysObject, form) {
        var result = {};
        var ownKeys = Object.keys(parentKeysObject || {});
        var formComponents = form ? form.getComponents() : {};
        var existsComponents = Object.keys(formComponents).length > 0;
        var formDataProperties = form ? form.getDataValues() : {};
        var existsProperties = Object.keys(formDataProperties).length > 0;
        var urlData = form ? form.getFormNavigation().getFilterFromUrlParams() : {};
        var existsUrlData = Object.keys(urlData).length > 0;
        if (existsUrlData) {
            form.keysArray.forEach(function (key, i) {
                if (urlData.hasOwnProperty(key)) {
                    urlData[key] = SQLTypes.parseUsingSQLType(urlData[key], form.keysSqlTypesArray[i]);
                }
            });
        }
        if (existsComponents || existsProperties || existsUrlData) {
            ownKeys.forEach(function (ownKey) {
                var keyValue = parentKeysObject[ownKey];
                var isEquivObject = Util.isObject(keyValue);
                var formFieldAttr = isEquivObject ? Object.keys(keyValue)[0] : keyValue;
                var currentData;
                if (formComponents.hasOwnProperty(formFieldAttr)) {
                    var component = formComponents[formFieldAttr];
                    if ('getSelectedRecord' in component && isEquivObject) {
                        currentData = (component.getSelectedRecord() || {})[keyValue[formFieldAttr]];
                    }
                    else {
                        currentData = component.getValue();
                    }
                }
                else if (formDataProperties.hasOwnProperty(formFieldAttr)) {
                    var formPropValue = formDataProperties[formFieldAttr];
                    currentData = formPropValue instanceof OFormValue ? formPropValue.value : formPropValue;
                }
                else if (urlData.hasOwnProperty(formFieldAttr)) {
                    currentData = urlData[formFieldAttr];
                }
                if (Util.isDefined(currentData)) {
                    switch (typeof (currentData)) {
                        case 'string':
                            if (currentData.trim().length > 0) {
                                result[ownKey] = currentData.trim();
                            }
                            break;
                        case 'number':
                            if (!isNaN(currentData)) {
                                result[ownKey] = currentData;
                            }
                            break;
                    }
                }
            });
        }
        return result;
    };
    ServiceUtils.filterContainsAllParentKeys = function (parentKeysFilter, parentKeys) {
        var pkKeys = Object.keys(parentKeys);
        if ((pkKeys.length > 0) && Util.isDefined(parentKeysFilter)) {
            var parentKeysFilterKeys_1 = Object.keys(parentKeysFilter);
            return pkKeys.every(function (a) { return parentKeysFilterKeys_1.indexOf(a) !== -1; });
        }
        return true;
    };
    ServiceUtils.getFilterUsingParentKeys = function (parentItem, parentKeysObject) {
        var filter = {};
        var ownKeys = Object.keys(parentKeysObject);
        if (ownKeys.length > 0 && Util.isDefined(parentItem)) {
            ownKeys.forEach(function (ownKey) {
                var parentKey = parentKeysObject[ownKey];
                if (parentItem.hasOwnProperty(parentKey)) {
                    var currentData = parentItem[parentKey];
                    if (currentData instanceof OFormValue) {
                        currentData = currentData.value;
                    }
                    filter[ownKey] = currentData;
                }
            });
        }
        return filter;
    };
    ServiceUtils.getArrayProperties = function (array, properties) {
        var result = array.map(function (item) {
            return ServiceUtils.getObjectProperties(item, properties);
        });
        return result;
    };
    ServiceUtils.getObjectProperties = function (object, properties) {
        var objectProperties = {};
        properties.forEach(function (key) {
            objectProperties[key] = object[key];
        });
        return objectProperties;
    };
    ServiceUtils.parseSortColumns = function (sortColumns) {
        var sortColArray = [];
        if (sortColumns) {
            var cols = Util.parseArray(sortColumns);
            cols.forEach(function (col) {
                var colDef = col.split(Codes.TYPE_SEPARATOR);
                if (colDef.length > 0) {
                    var colName = colDef[0];
                    var colSort = colDef[1] || Codes.ASC_SORT;
                    sortColArray.push({
                        columnName: colName,
                        ascendent: colSort === Codes.ASC_SORT
                    });
                }
            });
        }
        return sortColArray;
    };
    ServiceUtils.redirectLogin = function (router, sessionExpired) {
        if (sessionExpired === void 0) { sessionExpired = false; }
        var arg = {};
        arg[Codes.SESSION_EXPIRED_KEY] = sessionExpired;
        var extras = {};
        extras[Codes.QUERY_PARAMS] = arg;
        router.navigate([Codes.LOGIN_ROUTE], extras);
    };
    return ServiceUtils;
}());
export { ServiceUtils };
//# sourceMappingURL=data:application/json;base64,