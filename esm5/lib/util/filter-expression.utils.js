var FilterExpressionUtils = (function () {
    function FilterExpressionUtils() {
    }
    FilterExpressionUtils.instanceofBasicExpression = function (arg) {
        return arg.hasOwnProperty(FilterExpressionUtils.BASIC_EXPRESSION_KEY)
            && FilterExpressionUtils.instanceofExpression(arg[FilterExpressionUtils.BASIC_EXPRESSION_KEY]);
    };
    FilterExpressionUtils.buildBasicExpression = function (exp) {
        if (exp) {
            if (!FilterExpressionUtils.instanceofExpression(exp)) {
                console.error('The expression provided is not an instance of \'Expression\'');
            }
            var be = {
                '@basic_expression': exp
            };
            return be;
        }
        return undefined;
    };
    FilterExpressionUtils.instanceofFilterExpression = function (exp) {
        return exp.hasOwnProperty(FilterExpressionUtils.FILTER_EXPRESSION_KEY)
            && FilterExpressionUtils.instanceofExpression(exp[FilterExpressionUtils.FILTER_EXPRESSION_KEY]);
    };
    FilterExpressionUtils.buildFilterExpression = function (exp) {
        if (exp) {
            if (!FilterExpressionUtils.instanceofExpression(exp)) {
                console.error('The expression provided is not an instance of \'Expression\'');
            }
            var be = {
                '@filter_expression': exp
            };
            return be;
        }
        return undefined;
    };
    FilterExpressionUtils.instanceofExpression = function (exp) {
        return exp.hasOwnProperty('lop') && exp.hasOwnProperty('op');
    };
    FilterExpressionUtils.buildComplexExpression = function (expr1, expr2, op) {
        if (expr1.lop === undefined && expr1.op === undefined) {
            return expr2;
        }
        if (expr2.lop === undefined && expr2.op === undefined) {
            return expr1;
        }
        var expr = {
            lop: expr1,
            op: op,
            rop: expr2
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionEquals = function (key, value) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_EQUAL,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionIsNotNull = function (key) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NOT_NULL
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionIsNull = function (key) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NULL
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionLess = function (key, value) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LESS,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionLessEqual = function (key, value) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LESS_EQUAL,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionMore = function (key, value) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_MORE,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionMoreEqual = function (key, value) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_MORE_EQUAL,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionIn = function (key, values) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_IN,
            rop: values
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionNotLike = function (key, value) {
        if (value !== undefined) {
            value = value.replace(new RegExp('\\*', 'g'), '%');
            if (value.indexOf('%') === -1) {
                value = '%' + value + '%';
            }
        }
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NOT_LIKE,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionLike = function (key, value) {
        if (value !== undefined) {
            value = value.replace(new RegExp('\\*', 'g'), '%');
            if (value.indexOf('%') === -1) {
                value = '%' + value + '%';
            }
        }
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LIKE,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionLikeEnd = function (key, value) {
        if (value !== undefined) {
            value = '%' + value;
        }
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LIKE,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionLikeStart = function (key, value) {
        if (value !== undefined) {
            value = value + '%';
        }
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LIKE,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionNotEquals = function (key, value) {
        var expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NOT_EQUAL,
            rop: value
        };
        return expr;
    };
    FilterExpressionUtils.buildExpressionNullAndValue = function (key, value, op) {
        var isNull = FilterExpressionUtils.buildExpressionIsNull(key);
        var equals = FilterExpressionUtils.buildExpressionEquals(key, value);
        var expr = {
            lop: isNull,
            op: op,
            rop: equals
        };
        return expr;
    };
    FilterExpressionUtils.buildArrayExpressionLike = function (keys, value) {
        var result = {
            lop: undefined,
            op: undefined
        };
        keys.forEach(function (col) {
            result = FilterExpressionUtils.stackExpressionLikeOR(col, value, result);
        });
        return result;
    };
    FilterExpressionUtils.buildExpressionFromObject = function (obj) {
        var result = {
            lop: undefined,
            op: undefined
        };
        Object.keys(obj || {}).forEach(function (key) {
            result = FilterExpressionUtils.stackExpressionEqualsAND(key, obj[key], result);
        });
        return result;
    };
    FilterExpressionUtils.stackExpressionLikeOR = function (key, value, expr) {
        var likeExpr = FilterExpressionUtils.buildExpressionLike(key, value);
        if (expr.lop === undefined && expr.op === undefined) {
            return likeExpr;
        }
        else {
            expr = FilterExpressionUtils.buildComplexExpression(expr, likeExpr, FilterExpressionUtils.OP_OR);
        }
        return expr;
    };
    FilterExpressionUtils.stackExpressionEqualsAND = function (key, value, expr) {
        var equalsExpr = FilterExpressionUtils.buildExpressionEquals(key, value);
        if (expr.lop === undefined && expr.op === undefined) {
            return equalsExpr;
        }
        else {
            expr = FilterExpressionUtils.buildComplexExpression(expr, equalsExpr, FilterExpressionUtils.OP_AND);
        }
        return expr;
    };
    FilterExpressionUtils.BASIC_EXPRESSION_KEY = '@basic_expression';
    FilterExpressionUtils.FILTER_EXPRESSION_KEY = '@filter_expression';
    FilterExpressionUtils.OP_OR = 'OR';
    FilterExpressionUtils.OP_AND = 'AND';
    FilterExpressionUtils.OP_LIKE = 'LIKE';
    FilterExpressionUtils.OP_NOT_LIKE = 'NOT LIKE';
    FilterExpressionUtils.OP_EQUAL = '=';
    FilterExpressionUtils.OP_NOT_EQUAL = '<>';
    FilterExpressionUtils.OP_NULL = 'IS NULL';
    FilterExpressionUtils.OP_NOT_NULL = 'IS NOT NULL';
    FilterExpressionUtils.OP_LESS = '<';
    FilterExpressionUtils.OP_LESS_EQUAL = '<=';
    FilterExpressionUtils.OP_MORE = '>';
    FilterExpressionUtils.OP_MORE_EQUAL = '>=';
    FilterExpressionUtils.OP_IN = 'IN';
    return FilterExpressionUtils;
}());
export { FilterExpressionUtils };
//# sourceMappingURL=data:application/json;base64,