export function StringConverter(value) {
    if (value == null || typeof value === 'string') {
        return value;
    }
    return value.toString();
}
export function BooleanConverter(value) {
    if (value == null || typeof value === 'boolean') {
        return value;
    }
    return value.toString() === 'true' || value.toString() === 'yes';
}
export function NumberConverter(value) {
    if (value == null || typeof value === 'number') {
        return value;
    }
    return parseFloat(value.toString());
}
function createConverterIfNeeded(metadata, converter) {
    if (converter != null) {
        return converter;
    }
    switch (metadata.name) {
        case 'String':
            converter = StringConverter;
            break;
        case 'Boolean':
            converter = BooleanConverter;
            break;
        case 'Number':
            converter = NumberConverter;
            break;
    }
    return converter;
}
export function InputConverter(converter) {
    return function (target, key) {
        var metadata = Reflect.getMetadata('design:type', target, key);
        if (metadata == null) {
            throw new Error('The reflection metadata could not be found.');
        }
        converter = createConverterIfNeeded(metadata, converter);
        if (converter == null) {
            throw new Error('There is no converter for the given property type "' + metadata.name + '".');
        }
        var stringKey = typeof key === 'string' ? key : key.toString();
        var definition = Object.getOwnPropertyDescriptor(target, key);
        Object.defineProperty(target, key, {
            get: definition != null ? definition.get : function () {
                return this['__' + stringKey];
            },
            set: definition != null ?
                function (newValue) {
                    definition.set(converter(newValue));
                } : function (newValue) {
                this['__' + stringKey] = converter(newValue);
            },
            enumerable: true,
            configurable: true
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFDeEMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM5QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFVO0lBQ3pDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDL0MsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDO0FBQ25FLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFDeEMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM5QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsUUFBYSxFQUFFLFNBQStCO0lBQzdFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtRQUNyQixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELFFBQVEsUUFBUSxDQUFDLElBQUksRUFBRTtRQUNyQixLQUFLLFFBQVE7WUFDWCxTQUFTLEdBQUcsZUFBZSxDQUFDO1lBQzVCLE1BQU07UUFDUixLQUFLLFNBQVM7WUFDWixTQUFTLEdBQUcsZ0JBQWdCLENBQUM7WUFDN0IsTUFBTTtRQUNSLEtBQUssUUFBUTtZQUNYLFNBQVMsR0FBRyxlQUFlLENBQUM7WUFDNUIsTUFBTTtLQUNUO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsU0FBK0I7SUFFNUQsT0FBTyxVQUFDLE1BQWMsRUFBRSxHQUFvQjtRQUMxQyxJQUFNLFFBQVEsR0FBSSxPQUFlLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUUsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUNoRTtRQUNELFNBQVMsR0FBRyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDekQsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELEdBQUcsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztTQUMvRjtRQUVELElBQU0sU0FBUyxHQUFHLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakUsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVoRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFFakMsR0FBRyxFQUFFLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFDaEMsQ0FBQztZQUNELEdBQUcsRUFBRSxVQUFVLElBQUksSUFBSSxDQUFDLENBQUM7Z0JBQ3ZCLFVBQUMsUUFBUTtvQkFDUCxVQUFVLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUV0QyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsUUFBUTtnQkFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0MsQ0FBQztZQUNILFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gU3RyaW5nQ29udmVydGVyKHZhbHVlOiBhbnkpIHtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJvb2xlYW5Db252ZXJ0ZXIodmFsdWU6IGFueSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKSA9PT0gJ3RydWUnIHx8IHZhbHVlLnRvU3RyaW5nKCkgPT09ICd5ZXMnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTnVtYmVyQ29udmVydGVyKHZhbHVlOiBhbnkpIHtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZS50b1N0cmluZygpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udmVydGVySWZOZWVkZWQobWV0YWRhdGE6IGFueSwgY29udmVydGVyPzogKHZhbHVlOiBhbnkpID0+IGFueSkge1xuICBpZiAoY29udmVydGVyICE9IG51bGwpIHtcbiAgICByZXR1cm4gY29udmVydGVyO1xuICB9XG4gIHN3aXRjaCAobWV0YWRhdGEubmFtZSkge1xuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICBjb252ZXJ0ZXIgPSBTdHJpbmdDb252ZXJ0ZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgIGNvbnZlcnRlciA9IEJvb2xlYW5Db252ZXJ0ZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdOdW1iZXInOlxuICAgICAgY29udmVydGVyID0gTnVtYmVyQ29udmVydGVyO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGNvbnZlcnRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElucHV0Q29udmVydGVyKGNvbnZlcnRlcj86ICh2YWx1ZTogYW55KSA9PiBhbnkpIHtcblxuICByZXR1cm4gKHRhcmdldDogb2JqZWN0LCBrZXk6IHN0cmluZyB8IHN5bWJvbCkgPT4ge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gKFJlZmxlY3QgYXMgYW55KS5nZXRNZXRhZGF0YSgnZGVzaWduOnR5cGUnLCB0YXJnZXQsIGtleSk7XG4gICAgaWYgKG1ldGFkYXRhID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHJlZmxlY3Rpb24gbWV0YWRhdGEgY291bGQgbm90IGJlIGZvdW5kLicpO1xuICAgIH1cbiAgICBjb252ZXJ0ZXIgPSBjcmVhdGVDb252ZXJ0ZXJJZk5lZWRlZChtZXRhZGF0YSwgY29udmVydGVyKTtcbiAgICBpZiAoY29udmVydGVyID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgaXMgbm8gY29udmVydGVyIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdHlwZSBcIicgKyBtZXRhZGF0YS5uYW1lICsgJ1wiLicpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0cmluZ0tleSA9IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8ga2V5IDoga2V5LnRvU3RyaW5nKCk7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuXG4gICAgICBnZXQ6IGRlZmluaXRpb24gIT0gbnVsbCA/IGRlZmluaXRpb24uZ2V0IDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpc1snX18nICsgc3RyaW5nS2V5XTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGRlZmluaXRpb24gIT0gbnVsbCA/XG4gICAgICAgIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAgIGRlZmluaXRpb24uc2V0KGNvbnZlcnRlcihuZXdWYWx1ZSkpO1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW5cbiAgICAgICAgfSA6IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgIHRoaXNbJ19fJyArIHN0cmluZ0tleV0gPSBjb252ZXJ0ZXIobmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9O1xufVxuIl19