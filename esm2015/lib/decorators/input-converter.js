export function StringConverter(value) {
    if (value == null || typeof value === 'string') {
        return value;
    }
    return value.toString();
}
export function BooleanConverter(value) {
    if (value == null || typeof value === 'boolean') {
        return value;
    }
    return value.toString() === 'true' || value.toString() === 'yes';
}
export function NumberConverter(value) {
    if (value == null || typeof value === 'number') {
        return value;
    }
    return parseFloat(value.toString());
}
function createConverterIfNeeded(metadata, converter) {
    if (converter != null) {
        return converter;
    }
    switch (metadata.name) {
        case 'String':
            converter = StringConverter;
            break;
        case 'Boolean':
            converter = BooleanConverter;
            break;
        case 'Number':
            converter = NumberConverter;
            break;
    }
    return converter;
}
export function InputConverter(converter) {
    return (target, key) => {
        const metadata = Reflect.getMetadata('design:type', target, key);
        if (metadata == null) {
            throw new Error('The reflection metadata could not be found.');
        }
        converter = createConverterIfNeeded(metadata, converter);
        if (converter == null) {
            throw new Error('There is no converter for the given property type "' + metadata.name + '".');
        }
        const stringKey = typeof key === 'string' ? key : key.toString();
        const definition = Object.getOwnPropertyDescriptor(target, key);
        Object.defineProperty(target, key, {
            get: definition != null ? definition.get : function () {
                return this['__' + stringKey];
            },
            set: definition != null ?
                (newValue) => {
                    definition.set(converter(newValue));
                } : function (newValue) {
                this['__' + stringKey] = converter(newValue);
            },
            enumerable: true,
            configurable: true
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vb250aW1pemUtd2ViLW5neC8iLCJzb3VyY2VzIjpbImxpYi9kZWNvcmF0b3JzL2lucHV0LWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFDeEMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM5QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFVO0lBQ3pDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDL0MsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDO0FBQ25FLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFDeEMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM5QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsUUFBYSxFQUFFLFNBQStCO0lBQzdFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtRQUNyQixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELFFBQVEsUUFBUSxDQUFDLElBQUksRUFBRTtRQUNyQixLQUFLLFFBQVE7WUFDWCxTQUFTLEdBQUcsZUFBZSxDQUFDO1lBQzVCLE1BQU07UUFDUixLQUFLLFNBQVM7WUFDWixTQUFTLEdBQUcsZ0JBQWdCLENBQUM7WUFDN0IsTUFBTTtRQUNSLEtBQUssUUFBUTtZQUNYLFNBQVMsR0FBRyxlQUFlLENBQUM7WUFDNUIsTUFBTTtLQUNUO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsU0FBK0I7SUFFNUQsT0FBTyxDQUFDLE1BQWMsRUFBRSxHQUFvQixFQUFFLEVBQUU7UUFDOUMsTUFBTSxRQUFRLEdBQUksT0FBZSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFFLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7U0FDaEU7UUFDRCxTQUFTLEdBQUcsdUJBQXVCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxHQUFHLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDL0Y7UUFFRCxNQUFNLFNBQVMsR0FBRyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pFLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFaEUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBRWpDLEdBQUcsRUFBRSxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDekMsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1lBQ2hDLENBQUM7WUFDRCxHQUFHLEVBQUUsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFDO2dCQUN2QixDQUFDLFFBQVEsRUFBRSxFQUFFO29CQUNYLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBRXRDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxRQUFRO2dCQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBQ0gsVUFBVSxFQUFFLElBQUk7WUFDaEIsWUFBWSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBTdHJpbmdDb252ZXJ0ZXIodmFsdWU6IGFueSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQm9vbGVhbkNvbnZlcnRlcih2YWx1ZTogYW55KSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZS50b1N0cmluZygpID09PSAndHJ1ZScgfHwgdmFsdWUudG9TdHJpbmcoKSA9PT0gJ3llcyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOdW1iZXJDb252ZXJ0ZXIodmFsdWU6IGFueSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlLnRvU3RyaW5nKCkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb252ZXJ0ZXJJZk5lZWRlZChtZXRhZGF0YTogYW55LCBjb252ZXJ0ZXI/OiAodmFsdWU6IGFueSkgPT4gYW55KSB7XG4gIGlmIChjb252ZXJ0ZXIgIT0gbnVsbCkge1xuICAgIHJldHVybiBjb252ZXJ0ZXI7XG4gIH1cbiAgc3dpdGNoIChtZXRhZGF0YS5uYW1lKSB7XG4gICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgIGNvbnZlcnRlciA9IFN0cmluZ0NvbnZlcnRlcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAgY29udmVydGVyID0gQm9vbGVhbkNvbnZlcnRlcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ051bWJlcic6XG4gICAgICBjb252ZXJ0ZXIgPSBOdW1iZXJDb252ZXJ0ZXI7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gY29udmVydGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSW5wdXRDb252ZXJ0ZXIoY29udmVydGVyPzogKHZhbHVlOiBhbnkpID0+IGFueSkge1xuXG4gIHJldHVybiAodGFyZ2V0OiBvYmplY3QsIGtleTogc3RyaW5nIHwgc3ltYm9sKSA9PiB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSAoUmVmbGVjdCBhcyBhbnkpLmdldE1ldGFkYXRhKCdkZXNpZ246dHlwZScsIHRhcmdldCwga2V5KTtcbiAgICBpZiAobWV0YWRhdGEgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcmVmbGVjdGlvbiBtZXRhZGF0YSBjb3VsZCBub3QgYmUgZm91bmQuJyk7XG4gICAgfVxuICAgIGNvbnZlcnRlciA9IGNyZWF0ZUNvbnZlcnRlcklmTmVlZGVkKG1ldGFkYXRhLCBjb252ZXJ0ZXIpO1xuICAgIGlmIChjb252ZXJ0ZXIgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBjb252ZXJ0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0eXBlIFwiJyArIG1ldGFkYXRhLm5hbWUgKyAnXCIuJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaW5nS2V5ID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBrZXkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW5cbiAgICAgIGdldDogZGVmaW5pdGlvbiAhPSBudWxsID8gZGVmaW5pdGlvbi5nZXQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWydfXycgKyBzdHJpbmdLZXldO1xuICAgICAgfSxcbiAgICAgIHNldDogZGVmaW5pdGlvbiAhPSBudWxsID9cbiAgICAgICAgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5zZXQoY29udmVydGVyKG5ld1ZhbHVlKSk7XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlblxuICAgICAgICB9IDogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgdGhpc1snX18nICsgc3RyaW5nS2V5XSA9IGNvbnZlcnRlcihuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH07XG59XG4iXX0=