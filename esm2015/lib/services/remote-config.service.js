import { HttpClient, HttpHeaders } from '@angular/common/http';
import { HostListener, Injectable, Injector } from '@angular/core';
import { Observable, timer } from 'rxjs';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import { Util } from '../util/util';
import { LocalStorageService } from './local-storage.service';
import { LoginStorageService } from './login-storage.service';
import * as i0 from "@angular/core";
export class ORemoteConfigurationService {
    constructor(injector) {
        this.injector = injector;
        this._columns = {
            user: ORemoteConfigurationService.DEFAULT_COLUMN_USER,
            appId: ORemoteConfigurationService.DEFAULT_COLUMN_APPID,
            configuration: ORemoteConfigurationService.DEFAULT_COLUMN_CONFIG
        };
        this.httpClient = this.injector.get(HttpClient);
        this._appConfig = this.injector.get(AppConfig);
        this.loginStorageService = this.injector.get(LoginStorageService);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.httpClient = this.injector.get(HttpClient);
        this._uuid = this._appConfig.getConfiguration().uuid;
        if (this._appConfig.useRemoteConfiguration()) {
            this._url = this._appConfig.getRemoteConfigurationEndpoint();
            const remoteConfig = this._appConfig.getRemoteConfigurationConfig();
            this._columns = (remoteConfig && remoteConfig.columns) ? Object.assign(this._columns, remoteConfig.columns) : this._columns;
            this._timeout = (remoteConfig && remoteConfig.timeout) ? remoteConfig.timeout : ORemoteConfigurationService.DEFAULT_STORAGE_TIMEOUT;
            const self = this;
            this.localStorageService.onSetLocalStorage.subscribe(() => {
                if (self.storeSubscription) {
                    self.storeSubscription.unsubscribe();
                }
            });
        }
    }
    beforeunloadHandler() {
        this.finalize().subscribe(() => {
        });
    }
    getUserConfiguration() {
        const self = this;
        const observable = new Observable((observer) => {
            const sessionInfo = self.loginStorageService.getSessionInfo();
            if (!self.hasSession(sessionInfo)) {
                observer.error();
                return;
            }
            const url = self._url + '/search';
            const body = {};
            body[self._columns.user] = sessionInfo.user;
            body[self._columns.appId] = self._uuid;
            const options = {
                headers: self.buildHeaders()
            };
            self.httpClient.post(url, body, options).subscribe((resp) => {
                if (resp && resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE && Util.isDefined(resp.data)) {
                    observer.next(resp);
                }
                else {
                    observer.error();
                }
            }, (error) => observer.error(error), () => observer.complete());
        });
        return observable;
    }
    storeUserConfiguration() {
        const self = this;
        if (self.storeSubscription) {
            self.storeSubscription.unsubscribe();
        }
        const observable = new Observable((observer) => {
            const sessionInfo = self.loginStorageService.getSessionInfo();
            if (!self._appConfig.useRemoteConfiguration() || !self.hasSession(sessionInfo)) {
                observer.next();
                observer.complete();
                return;
            }
            const url = self._url;
            const body = { filter: {}, data: {} };
            body.filter[self._columns.user] = sessionInfo.user;
            body.filter[self._columns.appId] = self._uuid;
            let userData = self.localStorageService.getSessionUserComponentsData() || '';
            try {
                userData = btoa(JSON.stringify(userData));
            }
            catch (e) {
                userData = '';
            }
            body.data[self._columns.configuration] = userData;
            const options = {
                headers: self.buildHeaders()
            };
            self.httpClient.put(url, body, options).subscribe((resp) => {
                if (resp && resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                    observer.next(resp);
                }
                else {
                    observer.error();
                }
            }, (error) => observer.error(error), () => observer.complete());
        });
        return observable;
    }
    initialize() {
        const self = this;
        return new Observable(observer => {
            if (self._appConfig.useRemoteConfiguration()) {
                self.timerSubscription = timer(self._timeout, self._timeout).subscribe(() => {
                    self.storeSubscription = self.storeUserConfiguration().subscribe(() => {
                    });
                });
                self.getUserConfiguration().subscribe((resp) => {
                    let storedConf;
                    if (Util.isArray(resp.data)) {
                        storedConf = resp.data[0][self._columns.configuration];
                    }
                    else {
                        storedConf = resp.data;
                    }
                    if (Util.isDefined(storedConf)) {
                        let componentsData;
                        try {
                            const decoded = atob(storedConf);
                            componentsData = JSON.parse(decoded);
                        }
                        catch (e) {
                            componentsData = {};
                        }
                        self.localStorageService.storeSessionUserComponentsData(componentsData);
                    }
                    observer.next();
                }, () => {
                    observer.next();
                });
            }
            else {
                observer.next();
            }
        });
    }
    finalize() {
        if (this.timerSubscription) {
            this.timerSubscription.unsubscribe();
        }
        return this.storeUserConfiguration();
    }
    hasSession(sessionInfo) {
        return Util.isDefined(sessionInfo) && Util.isDefined(sessionInfo.user) && Util.isDefined(sessionInfo.id);
    }
    buildHeaders() {
        const sessionInfo = this.loginStorageService.getSessionInfo();
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8',
            Authorization: 'Bearer ' + sessionInfo.id
        });
    }
}
ORemoteConfigurationService.DEFAULT_COLUMN_USER = 'USER_';
ORemoteConfigurationService.DEFAULT_COLUMN_APPID = 'APP_UUID';
ORemoteConfigurationService.DEFAULT_COLUMN_CONFIG = 'CONFIGURATION';
ORemoteConfigurationService.DEFAULT_STORAGE_TIMEOUT = 60000;
ORemoteConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ORemoteConfigurationService.ctorParameters = () => [
    { type: Injector }
];
ORemoteConfigurationService.propDecorators = {
    beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', [],] }]
};
ORemoteConfigurationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ORemoteConfigurationService_Factory() { return new ORemoteConfigurationService(i0.ɵɵinject(i0.INJECTOR)); }, token: ORemoteConfigurationService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,