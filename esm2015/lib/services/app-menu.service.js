import { Injectable, Injector } from '@angular/core';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import * as i0 from "@angular/core";
export class AppMenuService {
    constructor(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig);
        this.MENU_ROOTS = this._config.getMenuConfiguration();
        this.ALL_MENU_ITEMS = [];
        for (let i = 0, len = this.MENU_ROOTS.length; i < len; i++) {
            const item = this.MENU_ROOTS[i];
            this.ALL_MENU_ITEMS = this.ALL_MENU_ITEMS.concat(this.getMenuItems(item));
        }
    }
    getMenuRoots() {
        return this.MENU_ROOTS;
    }
    getMenuRootById(id) {
        return this.MENU_ROOTS.find(c => c.id === id);
    }
    getAllMenuItems() {
        return this.ALL_MENU_ITEMS;
    }
    getMenuItemById(id) {
        return this.ALL_MENU_ITEMS.find(i => i.id === id);
    }
    getMenuItemType(item) {
        let type;
        switch (true) {
            case (item.route === Codes.LOGIN_ROUTE):
                type = 'logout';
                break;
            case (item.route !== undefined):
                type = 'route';
                break;
            case (item.action !== undefined):
                type = 'action';
                break;
            case (item.locale !== undefined):
                type = 'locale';
                break;
            case (item.user !== undefined):
                type = 'user-info';
                break;
            case (item.items !== undefined):
                type = 'group';
                break;
            default:
                type = 'default';
                break;
        }
        return type;
    }
    isMenuGroup(item) {
        return this.getMenuItemType(item) === 'group';
    }
    getMenuItems(item) {
        if (item.items !== undefined) {
            return item.items;
        }
        return [item];
    }
}
AppMenuService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AppMenuService.ctorParameters = () => [
    { type: Injector }
];
AppMenuService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AppMenuService_Factory() { return new AppMenuService(i0.ɵɵinject(i0.INJECTOR)); }, token: AppMenuService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLW1lbnUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXBwLW1lbnUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFXakQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLdEMsTUFBTSxPQUFPLGNBQWM7SUFNekIsWUFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBRXRELElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFELE1BQU0sSUFBSSxHQUFpQixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzNFO0lBRUgsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVELGVBQWUsQ0FBQyxFQUFVO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxlQUFlO1FBQ2IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRCxlQUFlLENBQUMsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsZUFBZSxDQUFDLElBQWtCO1FBQ2hDLElBQUksSUFBWSxDQUFDO1FBQ2pCLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxDQUFFLElBQXVCLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxXQUFXLENBQUM7Z0JBQ3pELElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ2hCLE1BQU07WUFDUixLQUFLLENBQUUsSUFBc0IsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNmLE1BQU07WUFDUixLQUFLLENBQUUsSUFBdUIsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDO2dCQUNsRCxJQUFJLEdBQUcsUUFBUSxDQUFDO2dCQUNoQixNQUFNO1lBQ1IsS0FBSyxDQUFFLElBQXVCLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQztnQkFDbEQsSUFBSSxHQUFHLFFBQVEsQ0FBQztnQkFDaEIsTUFBTTtZQUNSLEtBQUssQ0FBRSxJQUF5QixDQUFDLElBQUksS0FBSyxTQUFTLENBQUM7Z0JBQ2xELElBQUksR0FBRyxXQUFXLENBQUM7Z0JBQ25CLE1BQU07WUFDUixLQUFLLENBQUUsSUFBa0IsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO2dCQUM1QyxJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNmLE1BQU07WUFDUjtnQkFDRSxJQUFJLEdBQUcsU0FBUyxDQUFDO2dCQUNqQixNQUFNO1NBQ1Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBa0I7UUFDNUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLE9BQU8sQ0FBQztJQUNoRCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQWtCO1FBQ3JDLElBQUssSUFBa0IsQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQzNDLE9BQVEsSUFBa0IsQ0FBQyxLQUFLLENBQUM7U0FDbEM7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEIsQ0FBQzs7O1lBMUVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBakJvQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2FwcC1jb25maWcnO1xuaW1wb3J0IHtcbiAgTWVudUdyb3VwLFxuICBNZW51SXRlbSxcbiAgTWVudUl0ZW1BY3Rpb24sXG4gIE1lbnVJdGVtTG9jYWxlLFxuICBNZW51SXRlbUxvZ291dCxcbiAgTWVudUl0ZW1Sb3V0ZSxcbiAgTWVudUl0ZW1Vc2VySW5mbyxcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9hcHAtbWVudS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTWVudVJvb3RJdGVtIH0gZnJvbSAnLi4vdHlwZXMvbWVudS1yb290LWl0ZW0udHlwZSc7XG5pbXBvcnQgeyBDb2RlcyB9IGZyb20gJy4uL3V0aWwvY29kZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBcHBNZW51U2VydmljZSB7XG5cbiAgcHJvdGVjdGVkIF9jb25maWc6IEFwcENvbmZpZztcbiAgcHJvdGVjdGVkIE1FTlVfUk9PVFM6IE1lbnVSb290SXRlbVtdO1xuICBwcm90ZWN0ZWQgQUxMX01FTlVfSVRFTVM6IE1lbnVJdGVtW107XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuaW5qZWN0b3IuZ2V0KEFwcENvbmZpZyk7XG4gICAgdGhpcy5NRU5VX1JPT1RTID0gdGhpcy5fY29uZmlnLmdldE1lbnVDb25maWd1cmF0aW9uKCk7XG5cbiAgICB0aGlzLkFMTF9NRU5VX0lURU1TID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuTUVOVV9ST09UUy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgaXRlbTogTWVudVJvb3RJdGVtID0gdGhpcy5NRU5VX1JPT1RTW2ldO1xuICAgICAgdGhpcy5BTExfTUVOVV9JVEVNUyA9IHRoaXMuQUxMX01FTlVfSVRFTVMuY29uY2F0KHRoaXMuZ2V0TWVudUl0ZW1zKGl0ZW0pKTtcbiAgICB9XG4gICAgLy8gdGhpcy5BTExfTUVOVV9JVEVNUyA9IHRoaXMuTUVOVV9ST09UUy5yZWR1Y2UoKHJlc3VsdCwgY2F0ZWdvcnkpID0+IHJlc3VsdC5jb25jYXQoY2F0ZWdvcnkuaXRlbXMpLCBbXSk7XG4gIH1cblxuICBnZXRNZW51Um9vdHMoKTogTWVudVJvb3RJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLk1FTlVfUk9PVFM7XG4gIH1cblxuICBnZXRNZW51Um9vdEJ5SWQoaWQ6IHN0cmluZyk6IE1lbnVSb290SXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuTUVOVV9ST09UUy5maW5kKGMgPT4gYy5pZCA9PT0gaWQpO1xuICB9XG5cbiAgZ2V0QWxsTWVudUl0ZW1zKCk6IE1lbnVJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLkFMTF9NRU5VX0lURU1TO1xuICB9XG5cbiAgZ2V0TWVudUl0ZW1CeUlkKGlkOiBzdHJpbmcpOiBNZW51SXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuQUxMX01FTlVfSVRFTVMuZmluZChpID0+IGkuaWQgPT09IGlkKTtcbiAgfVxuXG4gIGdldE1lbnVJdGVtVHlwZShpdGVtOiBNZW51Um9vdEl0ZW0pOiBzdHJpbmcge1xuICAgIGxldCB0eXBlOiBzdHJpbmc7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlICgoaXRlbSBhcyBNZW51SXRlbUxvZ291dCkucm91dGUgPT09IENvZGVzLkxPR0lOX1JPVVRFKTpcbiAgICAgICAgdHlwZSA9ICdsb2dvdXQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKChpdGVtIGFzIE1lbnVJdGVtUm91dGUpLnJvdXRlICE9PSB1bmRlZmluZWQpOlxuICAgICAgICB0eXBlID0gJ3JvdXRlJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICgoaXRlbSBhcyBNZW51SXRlbUFjdGlvbikuYWN0aW9uICE9PSB1bmRlZmluZWQpOlxuICAgICAgICB0eXBlID0gJ2FjdGlvbic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAoKGl0ZW0gYXMgTWVudUl0ZW1Mb2NhbGUpLmxvY2FsZSAhPT0gdW5kZWZpbmVkKTpcbiAgICAgICAgdHlwZSA9ICdsb2NhbGUnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKChpdGVtIGFzIE1lbnVJdGVtVXNlckluZm8pLnVzZXIgIT09IHVuZGVmaW5lZCk6XG4gICAgICAgIHR5cGUgPSAndXNlci1pbmZvJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICgoaXRlbSBhcyBNZW51R3JvdXApLml0ZW1zICE9PSB1bmRlZmluZWQpOlxuICAgICAgICB0eXBlID0gJ2dyb3VwJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0eXBlID0gJ2RlZmF1bHQnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBpc01lbnVHcm91cChpdGVtOiBNZW51Um9vdEl0ZW0pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRNZW51SXRlbVR5cGUoaXRlbSkgPT09ICdncm91cCc7XG4gIH1cblxuICBwcml2YXRlIGdldE1lbnVJdGVtcyhpdGVtOiBNZW51Um9vdEl0ZW0pOiBNZW51SXRlbVtdIHtcbiAgICBpZiAoKGl0ZW0gYXMgTWVudUdyb3VwKS5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gKGl0ZW0gYXMgTWVudUdyb3VwKS5pdGVtcztcbiAgICB9XG4gICAgcmV0dXJuIFtpdGVtXTtcbiAgfVxuXG59XG4iXX0=