import { EventEmitter, Injectable, Injector } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { AppConfig } from '../config/app-config';
import { ObservableWrapper } from '../util/async';
import { Util } from '../util/util';
import { LoginStorageService } from './login-storage.service';
import * as i0 from "@angular/core";
export class LocalStorageService {
    constructor(injector) {
        this.injector = injector;
        this.onRouteChange = new EventEmitter();
        this.onSetLocalStorage = new EventEmitter();
        this._config = this.injector.get(AppConfig).getConfiguration();
        this._router = this.injector.get(Router);
        this.loginStorageService = this.injector.get(LoginStorageService);
        const self = this;
        this._router.events.subscribe(event => {
            if (event instanceof NavigationStart) {
                ObservableWrapper.callEmit(self.onRouteChange, {});
            }
        });
    }
    getComponentStorage(comp, routeKey) {
        const componentKey = comp.getComponentKey();
        let completeKey = componentKey;
        if (routeKey) {
            completeKey += '_' + routeKey;
        }
        return this.getAppComponentData(completeKey) || {};
    }
    updateComponentStorage(comp, routeKey) {
        const dataToStore = comp.getDataToStore();
        const componentKey = comp.getComponentKey();
        if (!Util.isDefined(componentKey)) {
            return;
        }
        let completeKey = componentKey;
        if (routeKey) {
            completeKey += '_' + routeKey;
        }
        const storedObject = {};
        for (const prop in dataToStore) {
            if (dataToStore.hasOwnProperty(prop)) {
                storedObject[prop] = dataToStore[prop];
            }
        }
        this.updateAppComponentStorage(completeKey, storedObject);
    }
    getAppComponentData(key) {
        let componentData;
        const storedComponents = this.getSessionUserComponentsData() || {};
        if (storedComponents[key]) {
            const decoded = atob(storedComponents[key]);
            try {
                componentData = JSON.parse(decoded);
            }
            catch (e) {
                componentData = undefined;
            }
        }
        return componentData;
    }
    updateAppComponentStorage(componentKey, componentData) {
        let componentDataB64;
        try {
            componentDataB64 = btoa(JSON.stringify(componentData));
        }
        catch (e) {
            componentDataB64 = undefined;
        }
        this.storeComponentInSessionUser(componentKey, componentDataB64);
    }
    getSessionUserComponentsData() {
        let storedComponentsByUser = {};
        const appData = this.getStoredData();
        const session = appData[LocalStorageService.SESSION_STORAGE_KEY] || {};
        const users = appData[LocalStorageService.USERS_STORAGE_KEY] || {};
        storedComponentsByUser = (users[session.user] || {})[LocalStorageService.COMPONENTS_STORAGE_KEY] || {};
        return storedComponentsByUser;
    }
    storeSessionUserComponentsData(componentsData) {
        const appData = this.getStoredData();
        const session = appData[LocalStorageService.SESSION_STORAGE_KEY] || {};
        if (!Util.isDefined(appData[LocalStorageService.USERS_STORAGE_KEY])) {
            appData[LocalStorageService.USERS_STORAGE_KEY] = {};
        }
        const userData = appData[LocalStorageService.USERS_STORAGE_KEY][session.user] || {};
        userData[LocalStorageService.COMPONENTS_STORAGE_KEY] = componentsData;
        appData[LocalStorageService.USERS_STORAGE_KEY][session.user] = userData;
        this.setLocalStorage(appData);
    }
    storeComponentInSessionUser(componentKey, componentDataB64) {
        const appData = this.getStoredData();
        const session = appData[LocalStorageService.SESSION_STORAGE_KEY] || {};
        if (!Util.isDefined(session) || !Util.isDefined(session.user)) {
            return;
        }
        const users = appData[LocalStorageService.USERS_STORAGE_KEY] || {};
        const idUser = session.user || this.loginStorageService.getSessionInfo().user;
        const user = users[idUser] || {};
        let componentData = {};
        if (users[idUser]) {
            componentData = users[idUser][LocalStorageService.COMPONENTS_STORAGE_KEY];
        }
        componentData[componentKey] = componentDataB64 || {};
        user[LocalStorageService.COMPONENTS_STORAGE_KEY] = componentData;
        users[idUser] = user;
        appData[LocalStorageService.USERS_STORAGE_KEY] = users;
        this.setLocalStorage(appData);
    }
    getStoredData() {
        let appData = {};
        const appStoredData = localStorage.getItem(this._config.uuid);
        if (appStoredData) {
            try {
                appData = JSON.parse(appStoredData);
            }
            catch (e) {
                appData = {};
            }
        }
        return appData;
    }
    setBackwardCompatibility() {
        const appData = this.getStoredData();
        const session = appData[LocalStorageService.SESSION_STORAGE_KEY];
        if (!Util.isDefined(session) || !Util.isDefined(session.user)) {
            return;
        }
        const componentsInfo = appData[LocalStorageService.COMPONENTS_STORAGE_KEY] || {};
        let usersObject = {};
        const existsUsersTag = Util.isDefined(appData[LocalStorageService.USERS_STORAGE_KEY]);
        let createUserInfo = existsUsersTag;
        if (existsUsersTag) {
            usersObject = appData[LocalStorageService.USERS_STORAGE_KEY];
            createUserInfo = !Util.isDefined(appData[LocalStorageService.USERS_STORAGE_KEY][session.user]);
        }
        if (createUserInfo) {
            usersObject[session.user] = {};
            usersObject[session.user][LocalStorageService.COMPONENTS_STORAGE_KEY] = componentsInfo;
            appData[LocalStorageService.USERS_STORAGE_KEY] = usersObject;
            localStorage.setItem(this._config.uuid, JSON.stringify(appData));
        }
    }
    setLocalStorage(appData) {
        this.onSetLocalStorage.emit();
        localStorage.setItem(this._config.uuid, JSON.stringify(appData));
    }
}
LocalStorageService.COMPONENTS_STORAGE_KEY = 'components';
LocalStorageService.USERS_STORAGE_KEY = 'users';
LocalStorageService.SESSION_STORAGE_KEY = 'session';
LocalStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
LocalStorageService.ctorParameters = () => [
    { type: Injector }
];
LocalStorageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(i0.ɵɵinject(i0.INJECTOR)); }, token: LocalStorageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,