import { Injectable, Injector } from '@angular/core';
import { AppConfig } from '../config/app-config';
import { Util } from '../util/util';
import * as i0 from "@angular/core";
export class NumberService {
    constructor(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig).getConfiguration();
        this._minDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this._maxDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this._grouping = true;
        this._locale = this._config.locale;
    }
    get grouping() {
        return this._grouping;
    }
    set grouping(value) {
        this._grouping = value;
    }
    get minDecimalDigits() {
        return this._minDecimalDigits;
    }
    set minDecimalDigits(value) {
        this._minDecimalDigits = value;
    }
    get maxDecimalDigits() {
        return this._maxDecimalDigits;
    }
    set maxDecimalDigits(value) {
        this._maxDecimalDigits = value;
    }
    get locale() {
        return this._locale;
    }
    set locale(value) {
        this._locale = value;
    }
    getIntegerValue(value, args) {
        const grouping = args ? args.grouping : undefined;
        if (!Util.isDefined(value) && !Util.isDefined(grouping) || !grouping) {
            return value;
        }
        const thousandSeparator = args ? args.thousandSeparator : undefined;
        const locale = args ? args.locale : undefined;
        const intValue = parseInt(value, 10);
        if (isNaN(intValue)) {
            return void 0;
        }
        let formattedIntValue;
        if (Util.isDefined(locale)) {
            formattedIntValue = new Intl.NumberFormat(locale).format(intValue);
        }
        else if (!Util.isDefined(thousandSeparator)) {
            formattedIntValue = new Intl.NumberFormat(this._locale).format(intValue);
        }
        else {
            formattedIntValue = String(intValue).toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
        }
        return formattedIntValue;
    }
    getRealValue(value, args) {
        const grouping = args ? args.grouping : undefined;
        if (!Util.isDefined(value) && !Util.isDefined(grouping) || !grouping) {
            return value;
        }
        const locale = args ? args.locale : undefined;
        const thousandSeparator = args ? args.thousandSeparator : undefined;
        const decimalSeparator = args ? args.decimalSeparator : undefined;
        let minDecimalDigits = args ? args.minDecimalDigits : undefined;
        let maxDecimalDigits = args ? args.maxDecimalDigits : undefined;
        if (!Util.isDefined(minDecimalDigits)) {
            minDecimalDigits = this._minDecimalDigits;
        }
        if (!Util.isDefined(maxDecimalDigits)) {
            maxDecimalDigits = this._maxDecimalDigits;
        }
        let formattedRealValue = value;
        const formatterArgs = {
            minimumFractionDigits: minDecimalDigits,
            maximumFractionDigits: maxDecimalDigits
        };
        if (Util.isDefined(locale)) {
            formattedRealValue = new Intl.NumberFormat(locale, formatterArgs).format(value);
        }
        else if (!Util.isDefined(thousandSeparator) || !Util.isDefined(decimalSeparator)) {
            formattedRealValue = new Intl.NumberFormat(this._locale, formatterArgs).format(value);
        }
        else {
            const realValue = parseFloat(value);
            if (!isNaN(realValue)) {
                formattedRealValue = String(realValue);
                let tmpStr = realValue.toFixed(maxDecimalDigits);
                tmpStr = tmpStr.replace('.', decimalSeparator);
                if (grouping) {
                    const parts = tmpStr.split(decimalSeparator);
                    if (parts.length > 0) {
                        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
                        formattedRealValue = parts.join(decimalSeparator);
                    }
                }
                else {
                    formattedRealValue = tmpStr;
                }
            }
        }
        return formattedRealValue;
    }
    getPercentValue(value, args) {
        const valueBase = args ? args.valueBase : undefined;
        let parsedValue = value;
        switch (valueBase) {
            case 100:
                break;
            case 1:
            default:
                parsedValue = parsedValue * 100;
                break;
        }
        const formattedPercentValue = this.getRealValue(parsedValue, args) + ' %';
        return formattedPercentValue;
    }
}
NumberService.DEFAULT_DECIMAL_DIGITS = 2;
NumberService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NumberService.ctorParameters = () => [
    { type: Injector }
];
NumberService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NumberService_Factory() { return new NumberService(i0.ɵɵinject(i0.INJECTOR)); }, token: NumberService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,