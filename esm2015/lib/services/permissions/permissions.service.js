import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Util } from '../../util/util';
import { OntimizeEEPermissionsService } from './ontimize-ee-permissions.service';
import { OntimizePermissionsService } from './ontimize-permissions.service';
export class PermissionsService {
    constructor(injector) {
        this.injector = injector;
        const appConfig = this.injector.get(AppConfig).getConfiguration();
        if (Util.isDefined(appConfig.permissionsConfiguration)) {
            this.ontimizePermissionsConfig = appConfig.permissionsConfiguration;
        }
    }
    configureService() {
        const loadingService = OntimizePermissionsService;
        try {
            this.permissionsService = this.injector.get(loadingService);
            if (Util.isPermissionsService(this.permissionsService)) {
                if (this.permissionsService instanceof OntimizePermissionsService) {
                    this.permissionsService.configureService(this.ontimizePermissionsConfig);
                }
                else if (this.permissionsService instanceof OntimizeEEPermissionsService) {
                    this.permissionsService.configureService(this.ontimizePermissionsConfig);
                }
            }
        }
        catch (e) {
            console.error(e);
        }
    }
    restart() {
        this.permissions = undefined;
    }
    hasPermissions() {
        return this.permissions !== undefined;
    }
    getUserPermissionsAsPromise() {
        const self = this;
        return new Promise((resolve, reject) => {
            self.permissions = {};
            if (Util.isDefined(self.ontimizePermissionsConfig)) {
                self.configureService();
                self.queryPermissions().subscribe(() => {
                    resolve(true);
                }, error => {
                    resolve(true);
                });
            }
            else {
                resolve(true);
            }
        });
    }
    queryPermissions() {
        const self = this;
        const dataObservable = new Observable(innerObserver => {
            self.permissionsService.loadPermissions().subscribe((res) => {
                self.permissions = res;
                innerObserver.next(res);
            }, (err) => {
                console.error('[Permissions.queryPermissions]: error', err);
                innerObserver.error(err);
            }, () => {
                innerObserver.complete();
            });
        });
        return dataObservable.pipe(share());
    }
    getPermissionIdFromActRoute(actRoute) {
        let result;
        let snapshot = actRoute.snapshot;
        result = ((snapshot.data || {})['oPermission'] || {})['permissionId'];
        while (Util.isDefined(snapshot.firstChild) && !Util.isDefined(result)) {
            snapshot = snapshot.firstChild;
            result = ((snapshot.data || {})['oPermission'] || {})['permissionId'];
        }
        return result;
    }
    getComponentPermissionsUsingRoute(attr, actRoute) {
        let result;
        const permissionId = this.getPermissionIdFromActRoute(actRoute);
        if (Util.isDefined(permissionId)) {
            const routePermissions = (this.permissions.routes || []).find(route => route.permissionId === permissionId);
            if (Util.isDefined(routePermissions)) {
                result = (routePermissions.components || []).find(comp => comp.attr === attr);
            }
        }
        return result;
    }
    getOComponentPermissions(attr, actRoute, selector) {
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        let routePermissions;
        const genericRoutePerm = this.getComponentPermissionsUsingRoute(attr, actRoute);
        if (genericRoutePerm && genericRoutePerm.selector === selector) {
            routePermissions = genericRoutePerm;
        }
        let compPermissions;
        const attrPermissions = (this.permissions.components || []).find(comp => comp.attr === attr);
        if (attrPermissions && attrPermissions.selector === selector) {
            compPermissions = attrPermissions;
        }
        return {
            route: routePermissions,
            component: compPermissions
        };
    }
    getTablePermissions(attr, actRoute) {
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        const perm = this.getOComponentPermissions(attr, actRoute, 'o-table');
        const routePerm = perm.route;
        const compPerm = perm.component;
        if (!Util.isDefined(routePerm) || !Util.isDefined(compPerm)) {
            return compPerm || routePerm;
        }
        const permissions = {
            selector: 'o-table',
            attr: routePerm.attr,
            menu: this.mergeOTableMenuPermissions(compPerm.menu, routePerm.menu),
            columns: this.mergeOPermissionsArrays(compPerm.columns, routePerm.columns),
            actions: this.mergeOPermissionsArrays(compPerm.actions, routePerm.actions),
            contextMenu: this.mergeOPermissionsArrays(compPerm.contextMenu, routePerm.contextMenu)
        };
        return permissions;
    }
    getFormPermissions(attr, actRoute) {
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        const perm = this.getOComponentPermissions(attr, actRoute, 'o-form');
        const routePerm = perm.route;
        const compPerm = perm.component;
        if (!Util.isDefined(routePerm) || !Util.isDefined(compPerm)) {
            return compPerm || routePerm;
        }
        const permissions = {
            selector: 'o-form',
            attr: routePerm.attr,
            components: this.mergeOPermissionsArrays(compPerm.components, routePerm.components),
            actions: this.mergeOPermissionsArrays(compPerm.actions, routePerm.actions)
        };
        return permissions;
    }
    getMenuPermissions(attr) {
        let permissions;
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        const allMenu = this.permissions.menu || [];
        permissions = allMenu.find(comp => comp.attr === attr);
        return permissions;
    }
    mergeOPermissionsArrays(permissionsA, permissionsB) {
        if (!Util.isDefined(permissionsA) || !Util.isDefined(permissionsB)) {
            return permissionsA || permissionsB;
        }
        const result = Object.assign([], permissionsA);
        permissionsB.forEach((perm) => {
            const found = result.find(r => r.attr === perm.attr);
            if (found) {
                found.visible = perm.visible;
                found.enabled = perm.enabled;
            }
            else {
                result.push(perm);
            }
        });
        return result;
    }
    mergeOTableMenuPermissions(permissionsA, permissionsB) {
        if (!Util.isDefined(permissionsA) || !Util.isDefined(permissionsB)) {
            return permissionsA || permissionsB;
        }
        const result = {
            visible: permissionsB.visible,
            enabled: permissionsB.enabled,
            items: this.mergeOPermissionsArrays(permissionsA.items, permissionsB.items)
        };
        return result;
    }
    isPermissionIdRouteRestricted(permissionId) {
        const routeData = (this.permissions.routes || []).find(route => route.permissionId === permissionId);
        return Util.isDefined(routeData) && routeData.enabled === false;
    }
}
PermissionsService.decorators = [
    { type: Injectable }
];
PermissionsService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,