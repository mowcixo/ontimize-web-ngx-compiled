import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { combineLatest, Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Codes } from '../../util/codes';
import { OTranslateService } from './o-translate.service';
export class OTranslateHttpLoader extends TranslateHttpLoader {
    constructor(httpClient, prefix = OTranslateService.ASSETS_PATH, suffix = OTranslateService.ASSETS_EXTENSION, injector) {
        super(httpClient, prefix, suffix);
        this.injector = injector;
        this.appConfig = this.injector.get(AppConfig);
        this.httpClient = httpClient;
    }
    getAssetsPath() {
        return this.prefix;
    }
    getAssetsExtension() {
        return this.suffix;
    }
    getLocalTranslation(lang) {
        let innerObserver;
        const dataObservable = new Observable(observer => innerObserver = observer).pipe(share());
        super.getTranslation(lang)
            .subscribe((res) => {
            innerObserver.next(res);
            innerObserver.complete();
        }, error => {
            innerObserver.next(undefined);
        }, () => innerObserver.complete());
        return dataObservable;
    }
    getTranslation(lang) {
        const translationOrigins = [];
        translationOrigins.push(this.getLocalTranslation(lang));
        if (this.appConfig.useRemoteBundle()) {
            translationOrigins.push(this.getRemoteBundle(lang));
        }
        let innerObserver;
        const dataObservable = new Observable(observer => innerObserver = observer).pipe(share());
        combineLatest(translationOrigins).subscribe((res) => {
            const staticBundle = res[0] || {};
            const remoteBundle = res[1] || {};
            const allBundles = Object.assign(staticBundle, remoteBundle);
            innerObserver.next(allBundles);
        });
        return dataObservable;
    }
    getRemoteBundle(lang) {
        const bundleEndpoint = this.appConfig.getBundleEndpoint();
        let innerObserver;
        const dataObservable = new Observable(observer => innerObserver = observer).pipe(share());
        if (!bundleEndpoint) {
            innerObserver.next([]);
        }
        const url = bundleEndpoint + '?lang=' + lang;
        this.httpClient.get(url).subscribe((resp) => {
            let response = {};
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                response = this.parseBundleResponse(resp.data);
            }
            innerObserver.next(response);
        }, error => {
            console.log('Remote Bundle service is not available');
            innerObserver.next(error);
        }, () => innerObserver.complete());
        return dataObservable;
    }
    parseBundleResponse(data) {
        const result = {};
        data.forEach((item) => {
            result[item[OTranslateHttpLoader.BUNDLE_KEY]] = item[OTranslateHttpLoader.BUNDLE_VALUE];
        });
        return result;
    }
}
OTranslateHttpLoader.BUNDLE_KEY = 'key';
OTranslateHttpLoader.BUNDLE_VALUE = 'value';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10cmFuc2xhdGUtaHR0cC1sb2FkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RyYW5zbGF0ZS9vLXRyYW5zbGF0ZS1odHRwLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsbUJBQW1CO0lBUTNELFlBQ0UsVUFBc0IsRUFDdEIsU0FBaUIsaUJBQWlCLENBQUMsV0FBVyxFQUM5QyxTQUFpQixpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFDekMsUUFBa0I7UUFFNUIsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFGeEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUc1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxJQUFZO1FBQzlCLElBQUksYUFBa0IsQ0FBQztRQUN2QixNQUFNLGNBQWMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRixLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQzthQUN2QixTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNqQixhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQixDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDVCxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsRUFDQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQVk7UUFDekIsTUFBTSxrQkFBa0IsR0FBVSxFQUFFLENBQUM7UUFFckMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXhELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUNwQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxhQUFrQixDQUFDO1FBQ3ZCLE1BQU0sY0FBYyxHQUFHLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTFGLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQVUsRUFBRSxFQUFFO1lBQ3pELE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztZQUM3RCxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVELGVBQWUsQ0FBQyxJQUFZO1FBQzFCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMxRCxJQUFJLGFBQWtCLENBQUM7UUFDdkIsTUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUYsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNuQixhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsTUFBTSxHQUFHLEdBQUcsY0FBYyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsd0JBQXdCLEVBQUU7Z0JBQ2hELFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2hEO1lBQ0QsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixDQUFDLEVBQ0MsS0FBSyxDQUFDLEVBQUU7WUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7WUFDdEQsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixDQUFDLEVBQ0QsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUMvQixDQUFDO1FBRUYsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVTLG1CQUFtQixDQUFDLElBQVc7UUFDdkMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7QUE1Rk0sK0JBQVUsR0FBRyxLQUFLLENBQUM7QUFDbkIsaUNBQVksR0FBRyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZUh0dHBMb2FkZXIgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9odHRwLWxvYWRlcic7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2FwcC1jb25maWcnO1xuaW1wb3J0IHsgQ29kZXMgfSBmcm9tICcuLi8uLi91dGlsL2NvZGVzJztcbmltcG9ydCB7IE9UcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi9vLXRyYW5zbGF0ZS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIE9UcmFuc2xhdGVIdHRwTG9hZGVyIGV4dGVuZHMgVHJhbnNsYXRlSHR0cExvYWRlciB7XG5cbiAgc3RhdGljIEJVTkRMRV9LRVkgPSAna2V5JztcbiAgc3RhdGljIEJVTkRMRV9WQUxVRSA9ICd2YWx1ZSc7XG5cbiAgcHJvdGVjdGVkIGFwcENvbmZpZzogQXBwQ29uZmlnO1xuICBwcm90ZWN0ZWQgaHR0cENsaWVudDogSHR0cENsaWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxuICAgIHByZWZpeDogc3RyaW5nID0gT1RyYW5zbGF0ZVNlcnZpY2UuQVNTRVRTX1BBVEgsXG4gICAgc3VmZml4OiBzdHJpbmcgPSBPVHJhbnNsYXRlU2VydmljZS5BU1NFVFNfRVhURU5TSU9OLFxuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgc3VwZXIoaHR0cENsaWVudCwgcHJlZml4LCBzdWZmaXgpO1xuICAgIHRoaXMuYXBwQ29uZmlnID0gdGhpcy5pbmplY3Rvci5nZXQoQXBwQ29uZmlnKTtcbiAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xuICB9XG5cbiAgZ2V0QXNzZXRzUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnByZWZpeDtcbiAgfVxuXG4gIGdldEFzc2V0c0V4dGVuc2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnN1ZmZpeDtcbiAgfVxuXG4gIGdldExvY2FsVHJhbnNsYXRpb24obGFuZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBsZXQgaW5uZXJPYnNlcnZlcjogYW55O1xuICAgIGNvbnN0IGRhdGFPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4gaW5uZXJPYnNlcnZlciA9IG9ic2VydmVyKS5waXBlKHNoYXJlKCkpO1xuICAgIHN1cGVyLmdldFRyYW5zbGF0aW9uKGxhbmcpXG4gICAgICAuc3Vic2NyaWJlKChyZXMpID0+IHtcbiAgICAgICAgaW5uZXJPYnNlcnZlci5uZXh0KHJlcyk7XG4gICAgICAgIGlubmVyT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgaW5uZXJPYnNlcnZlci5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICB9LFxuICAgICAgICAoKSA9PiBpbm5lck9ic2VydmVyLmNvbXBsZXRlKCkpO1xuICAgIHJldHVybiBkYXRhT2JzZXJ2YWJsZTtcbiAgfVxuXG4gIGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IGFueSB7XG4gICAgY29uc3QgdHJhbnNsYXRpb25PcmlnaW5zOiBhbnlbXSA9IFtdO1xuXG4gICAgdHJhbnNsYXRpb25PcmlnaW5zLnB1c2godGhpcy5nZXRMb2NhbFRyYW5zbGF0aW9uKGxhbmcpKTtcblxuICAgIGlmICh0aGlzLmFwcENvbmZpZy51c2VSZW1vdGVCdW5kbGUoKSkge1xuICAgICAgdHJhbnNsYXRpb25PcmlnaW5zLnB1c2godGhpcy5nZXRSZW1vdGVCdW5kbGUobGFuZykpO1xuICAgIH1cblxuICAgIGxldCBpbm5lck9ic2VydmVyOiBhbnk7XG4gICAgY29uc3QgZGF0YU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiBpbm5lck9ic2VydmVyID0gb2JzZXJ2ZXIpLnBpcGUoc2hhcmUoKSk7XG5cbiAgICBjb21iaW5lTGF0ZXN0KHRyYW5zbGF0aW9uT3JpZ2lucykuc3Vic2NyaWJlKChyZXM6IGFueVtdKSA9PiB7XG4gICAgICBjb25zdCBzdGF0aWNCdW5kbGUgPSByZXNbMF0gfHwge307XG4gICAgICBjb25zdCByZW1vdGVCdW5kbGUgPSByZXNbMV0gfHwge307XG4gICAgICBjb25zdCBhbGxCdW5kbGVzID0gT2JqZWN0LmFzc2lnbihzdGF0aWNCdW5kbGUsIHJlbW90ZUJ1bmRsZSk7XG4gICAgICBpbm5lck9ic2VydmVyLm5leHQoYWxsQnVuZGxlcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFPYnNlcnZhYmxlO1xuICB9XG5cbiAgZ2V0UmVtb3RlQnVuZGxlKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgYnVuZGxlRW5kcG9pbnQgPSB0aGlzLmFwcENvbmZpZy5nZXRCdW5kbGVFbmRwb2ludCgpO1xuICAgIGxldCBpbm5lck9ic2VydmVyOiBhbnk7XG4gICAgY29uc3QgZGF0YU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiBpbm5lck9ic2VydmVyID0gb2JzZXJ2ZXIpLnBpcGUoc2hhcmUoKSk7XG4gICAgaWYgKCFidW5kbGVFbmRwb2ludCkge1xuICAgICAgaW5uZXJPYnNlcnZlci5uZXh0KFtdKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYnVuZGxlRW5kcG9pbnQgKyAnP2xhbmc9JyArIGxhbmc7XG5cbiAgICB0aGlzLmh0dHBDbGllbnQuZ2V0KHVybCkuc3Vic2NyaWJlKChyZXNwOiBhbnkpID0+IHtcbiAgICAgIGxldCByZXNwb25zZSA9IHt9O1xuICAgICAgaWYgKHJlc3AuY29kZSA9PT0gQ29kZXMuT05USU1JWkVfU1VDQ0VTU0ZVTF9DT0RFKSB7XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5wYXJzZUJ1bmRsZVJlc3BvbnNlKHJlc3AuZGF0YSk7XG4gICAgICB9XG4gICAgICBpbm5lck9ic2VydmVyLm5leHQocmVzcG9uc2UpO1xuICAgIH0sXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSZW1vdGUgQnVuZGxlIHNlcnZpY2UgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICBpbm5lck9ic2VydmVyLm5leHQoZXJyb3IpO1xuICAgICAgfSxcbiAgICAgICgpID0+IGlubmVyT2JzZXJ2ZXIuY29tcGxldGUoKVxuICAgICk7XG5cbiAgICByZXR1cm4gZGF0YU9ic2VydmFibGU7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VCdW5kbGVSZXNwb25zZShkYXRhOiBhbnlbXSk6IGFueSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICByZXN1bHRbaXRlbVtPVHJhbnNsYXRlSHR0cExvYWRlci5CVU5ETEVfS0VZXV0gPSBpdGVtW09UcmFuc2xhdGVIdHRwTG9hZGVyLkJVTkRMRV9WQUxVRV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19