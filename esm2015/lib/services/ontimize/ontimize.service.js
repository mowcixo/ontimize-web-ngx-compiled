import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { Util } from '../../util/util';
import { OntimizeBaseService } from './ontimize-base-service.class';
export class OntimizeService extends OntimizeBaseService {
    constructor() {
        super(...arguments);
        this.entity = '';
    }
    configureService(config) {
        super.configureService(config);
        this._startSessionPath = this._appConfig.startSessionPath ? this._appConfig.startSessionPath : '/startsession';
        this.user = config.session ? config.session.user : '';
        if (config.entity !== undefined) {
            this.entity = config.entity;
        }
    }
    startsession(user, password) {
        const encodedPassword = encodeURIComponent(password);
        const url = this.urlBase + this._startSessionPath + '?user=' + user + '&password=' + encodedPassword;
        const dataObservable = new Observable(_startSessionObserver => {
            this.httpClient.get(url).subscribe((resp) => {
                if (resp >= 0) {
                    _startSessionObserver.next(resp);
                }
                else {
                    _startSessionObserver.error('Invalid user or password');
                }
            }, error => _startSessionObserver.error(error));
        });
        return dataObservable.pipe(share());
    }
    endsession(user, sessionId) {
        const url = this.urlBase + '/endsession?user=' + user + '&sessionid=' + sessionId;
        const dataObservable = new Observable(_closeSessionObserver => {
            this.httpClient.get(url).subscribe(resp => {
                _closeSessionObserver.next(resp);
            }, error => {
                if (error.status === 401 || error.status === 0 || !error.ok) {
                    _closeSessionObserver.next(0);
                }
                else {
                    _closeSessionObserver.error(error);
                }
            });
        });
        return dataObservable.pipe(share());
    }
    hassession(user, sessionId) {
        const dataObservable = new Observable(observer => {
            const url = this.urlBase + '/hassession?user=' + user + '&sessionid=' + sessionId;
            this.httpClient.get(url).subscribe(resp => {
                observer.next(resp);
            }, error => observer.error(error));
        });
        return dataObservable.pipe(share());
    }
    query(kv, av, entity, sqltypes) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        const url = `${this.urlBase}/query`;
        const body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            type: 1,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulQueryResponse,
            errorCallBack: this.parseUnsuccessfulQueryResponse
        });
    }
    advancedQuery(kv, av, entity, sqltypes, offset, pagesize, orderby) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        orderby = (Util.isDefined(orderby)) ? orderby : this.orderby;
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        pagesize = (Util.isDefined(pagesize)) ? pagesize : this.pagesize;
        const url = `${this.urlBase}/advancedquery`;
        const body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            type: 1,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes,
            offset: offset,
            pageSize: pagesize,
            orderBy: orderby
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulAdvancedQueryResponse,
            errorCallBack: this.parseUnsuccessfulAdvancedQueryResponse
        });
    }
    insert(av = {}, entity, sqltypes) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        const url = `${this.urlBase}/insert`;
        const body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            entity: entity,
            av: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulInsertResponse,
            errorCallBack: this.parseUnsuccessfulInsertResponse
        });
    }
    update(kv = {}, av = {}, entity, sqltypes) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        const url = `${this.urlBase}/update`;
        const body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulUpdateResponse,
            errorCallBack: this.parseUnsuccessfulUpdateResponse
        });
    }
    delete(kv = {}, entity, sqltypes) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        const url = `${this.urlBase}/delete`;
        const body = JSON.stringify({
            user: this.user,
            sessionid: this._sessionid,
            entity: entity,
            kv: kv,
            sqltypes: sqltypes
        });
        return this.doRequest({
            method: 'POST',
            url: url,
            body: body,
            successCallback: this.parseSuccessfulDeleteResponse,
            errorCallBack: this.parseUnsuccessfulDeleteResponse
        });
    }
}
OntimizeService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,