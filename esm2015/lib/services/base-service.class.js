import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { map, share } from 'rxjs/operators';
import { AppConfig } from '../config/app-config';
import { Codes } from '../util/codes';
import { LoginStorageService } from './login-storage.service';
import { OntimizeServiceResponseAdapter } from './ontimize/ontimize-service-response.adapter';
import { OntimizeServiceResponseParser } from './parser/o-service-response.parser';
export class BaseService {
    constructor(injector) {
        this.injector = injector;
        this.httpClient = this.injector.get(HttpClient);
        this.router = this.injector.get(Router);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
        this.responseParser = this.injector.get(OntimizeServiceResponseParser);
        this.loginStorageService = this.injector.get(LoginStorageService);
        this.configureAdapter();
    }
    configureAdapter() {
        this.adapter = this.injector.get(OntimizeServiceResponseAdapter);
    }
    configureService(config) {
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig.apiEndpoint;
    }
    getDefaultServiceConfiguration(serviceName) {
        const configuration = this._config.getServiceConfiguration();
        let servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        servConfig[Codes.SESSION_KEY] = this.loginStorageService.getSessionInfo();
        return servConfig;
    }
    get urlBase() {
        return this._urlBase;
    }
    set urlBase(value) {
        this._urlBase = value;
    }
    doRequest(param) {
        const dataObservable = new Observable((observer) => {
            const options = param.options || {
                headers: this.buildHeaders()
            };
            options.observe = 'response';
            let requestObs;
            switch (param.method) {
                case 'GET':
                    requestObs = this.httpClient.get(param.url, options);
                    break;
                case 'PUT':
                    requestObs = this.httpClient.put(param.url, param.body, options);
                    break;
                case 'DELETE':
                    const deleteOptions = {
                        headers: options.headers,
                        body: param.body
                    };
                    deleteOptions.observe = 'response';
                    requestObs = this.httpClient.delete(param.url, deleteOptions);
                    break;
                case 'POST':
                default:
                    requestObs = this.httpClient.post(param.url, param.body, options);
                    break;
            }
            requestObs.pipe(map((data) => this.adapter.adapt(data))).subscribe(resp => {
                (param.successCallback || this.parseSuccessfulResponse).bind(this)(resp, observer);
            }, error => {
                (param.errorCallBack || this.parseUnsuccessfulResponse).bind(this)(error, observer);
            }, () => observer.complete());
        });
        return dataObservable.pipe(share());
    }
    buildHeaders() {
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8'
        });
    }
    clientErrorFallback(errorCode) {
    }
    serverErrorFallback(errorCode) {
    }
    parseSuccessfulResponse(resp, observer) {
        this.responseParser.parseSuccessfulResponse(resp, observer, this);
    }
    parseSuccessfulQueryResponse(resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    }
    parseSuccessfulAdvancedQueryResponse(resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    }
    parseSuccessfulInsertResponse(resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    }
    parseSuccessfulUpdateResponse(resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    }
    parseSuccessfulDeleteResponse(resp, observer) {
        this.parseSuccessfulResponse(resp, observer);
    }
    parseUnsuccessfulResponse(error, observer) {
        this.responseParser.parseUnsuccessfulResponse(error, observer, this);
    }
    parseUnsuccessfulQueryResponse(resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    }
    parseUnsuccessfulAdvancedQueryResponse(resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    }
    parseUnsuccessfulInsertResponse(resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    }
    parseUnsuccessfulUpdateResponse(resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    }
    parseUnsuccessfulDeleteResponse(resp, observer) {
        this.parseUnsuccessfulResponse(resp, observer);
    }
}
//# sourceMappingURL=data:application/json;base64,