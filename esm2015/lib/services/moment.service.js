import { Injectable, Injector } from '@angular/core';
import moment from 'moment';
import { AppConfig } from '../config/app-config';
import * as i0 from "@angular/core";
export class MomentService {
    constructor(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig).getConfiguration();
        this.load(this._config.locale);
    }
    load(locale) {
        this._locale = locale;
    }
    parseDate(value, format, locale) {
        let result = '';
        if (!locale) {
            locale = this._locale;
        }
        if (typeof value === 'number') {
            result = moment(new Date(value)).locale(locale).format(format ? format : MomentService.defaultFormat);
        }
        else {
            result = moment(value, MomentService.DATE_FORMATS, locale).format(format ? format : MomentService.defaultFormat);
        }
        result = (result === 'Invalid date') ? '' : result;
        return result;
    }
    getLocale() {
        return this._locale;
    }
}
MomentService.DATE_FORMATS = ['YYYY-MM-DD', 'DD-MM-YYYY', 'MM-DD-YYYY', 'YYYY-MM-DDThh:mm:ss.S', 'YYYY-MM-DDThh:mm:ss.SSSZ', 'YYYY-MM-DD hh:mm:ssZ'];
MomentService.defaultFormat = 'L';
MomentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MomentService.ctorParameters = () => [
    { type: Injector }
];
MomentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MomentService_Factory() { return new MomentService(i0.ɵɵinject(i0.INJECTOR)); }, token: MomentService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21vbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBTWpELE1BQU0sT0FBTyxhQUFhO0lBU3hCLFlBQXNCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxDQUFDLE1BQWM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFVLEVBQUUsTUFBZSxFQUFFLE1BQWU7UUFDcEQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN2QjtRQUNELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkc7YUFBTTtZQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbEg7UUFDRCxNQUFNLEdBQUcsQ0FBQyxNQUFNLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25ELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7O0FBOUJNLDBCQUFZLEdBQUcsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSwwQkFBMEIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3ZJLDJCQUFhLEdBQVcsR0FBRyxDQUFDOztZQVJwQyxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVJvQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2FwcC1jb25maWcnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMvY29uZmlnLnR5cGUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNb21lbnRTZXJ2aWNlIHtcblxuICAvLyBIVE1MNSBpbnB1dCBkYXRlOiBZWVlZLU1NLUREIC8vIGxvY2FsZSBFUy1lczogREQtTU0tWVlZWSAvLyBsb2NhbGUgRU4tZW46IE1NLURELVlZWVkgLy8gSVNPIDg2MDE6XG4gIC8vIFlZWVktTU0tRERUaGg6bW06c3MuUyAvLyBVVEM6IFlZWVktTU0tREQgaGg6bW06c3NaXG4gIHN0YXRpYyBEQVRFX0ZPUk1BVFMgPSBbJ1lZWVktTU0tREQnLCAnREQtTU0tWVlZWScsICdNTS1ERC1ZWVlZJywgJ1lZWVktTU0tRERUaGg6bW06c3MuUycsICdZWVlZLU1NLUREVGhoOm1tOnNzLlNTU1onLCAnWVlZWS1NTS1ERCBoaDptbTpzc1onXTtcbiAgc3RhdGljIGRlZmF1bHRGb3JtYXQ6IHN0cmluZyA9ICdMJztcbiAgcHJpdmF0ZSBfbG9jYWxlOiBzdHJpbmc7XG4gIHByaXZhdGUgX2NvbmZpZzogQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLmluamVjdG9yLmdldChBcHBDb25maWcpLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICB0aGlzLmxvYWQodGhpcy5fY29uZmlnLmxvY2FsZSk7XG4gIH1cblxuICBsb2FkKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbG9jYWxlID0gbG9jYWxlO1xuICB9XG5cbiAgcGFyc2VEYXRlKHZhbHVlOiBhbnksIGZvcm1hdD86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogYW55IHtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgaWYgKCFsb2NhbGUpIHtcbiAgICAgIGxvY2FsZSA9IHRoaXMuX2xvY2FsZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlc3VsdCA9IG1vbWVudChuZXcgRGF0ZSh2YWx1ZSkpLmxvY2FsZShsb2NhbGUpLmZvcm1hdChmb3JtYXQgPyBmb3JtYXQgOiBNb21lbnRTZXJ2aWNlLmRlZmF1bHRGb3JtYXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBtb21lbnQodmFsdWUsIE1vbWVudFNlcnZpY2UuREFURV9GT1JNQVRTLCBsb2NhbGUpLmZvcm1hdChmb3JtYXQgPyBmb3JtYXQgOiBNb21lbnRTZXJ2aWNlLmRlZmF1bHRGb3JtYXQpO1xuICAgIH1cbiAgICByZXN1bHQgPSAocmVzdWx0ID09PSAnSW52YWxpZCBkYXRlJykgPyAnJyA6IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0TG9jYWxlKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gIH1cblxufVxuIl19