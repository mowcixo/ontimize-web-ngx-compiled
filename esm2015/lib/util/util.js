import { Base64 } from './base64';
import { Codes } from './codes';
export class Util {
    static isObject(val) {
        const valType = typeof val;
        return valType === 'object';
    }
    static isArray(val) {
        return val instanceof Array;
    }
    static parseBoolean(value, defaultValue) {
        if ((typeof value === 'string') && (value.toUpperCase() === 'TRUE' || value.toUpperCase() === 'YES')) {
            return true;
        }
        else if ((typeof value === 'string') && (value.toUpperCase() === 'FALSE' || value.toUpperCase() === 'NO')) {
            return false;
        }
        else if (Util.isDefined(defaultValue)) {
            return defaultValue;
        }
        return false;
    }
    static parseArray(value, excludeRepeated = false) {
        let result = [];
        if (value) {
            result = value.split(Codes.ARRAY_INPUT_SEPARATOR);
        }
        if (excludeRepeated && result.length > 0) {
            result = Array.from(new Set(result));
        }
        return result;
    }
    static parseParentKeysEquivalences(pKeysArray, separator = ':') {
        const equivalences = {};
        if (pKeysArray && pKeysArray.length > 0) {
            pKeysArray.forEach(item => {
                const aux = item.split(separator);
                if (aux && aux.length === 2) {
                    if (/.+\[.+\]/.test(aux[1])) {
                        const equivKey = aux[1].substring(0, aux[1].indexOf('['));
                        const equivValue = aux[1].substring(aux[1].indexOf('[') + 1, aux[1].indexOf(']'));
                        const equiv = {};
                        equiv[equivKey] = equivValue;
                        equivalences[aux[0]] = equiv;
                    }
                    else {
                        equivalences[aux[0]] = aux[1];
                    }
                }
                else if (aux && aux.length === 1) {
                    equivalences[item] = item;
                }
            });
        }
        return equivalences;
    }
    static encodeParentKeys(parentKeys) {
        let encoded = '';
        if (parentKeys) {
            encoded = Base64.encode(JSON.stringify(parentKeys));
        }
        return encoded;
    }
    static decodeParentKeys(parentKeys) {
        let decoded = {};
        if (parentKeys && parentKeys.length > 0) {
            const d = Base64.decode(parentKeys);
            decoded = JSON.parse(d);
        }
        return decoded;
    }
    static isArrayEmpty(array) {
        if (array && array.length === 0) {
            return true;
        }
        return false;
    }
    static isDataService(arg) {
        if (arg === undefined || arg === null) {
            return false;
        }
        return (arg.getDefaultServiceConfiguration !== undefined &&
            arg.configureService !== undefined);
    }
    static isPermissionsService(arg) {
        if (arg === undefined || arg === null) {
            return false;
        }
        return (arg.loadPermissions !== undefined);
    }
    static isFormDataComponent(arg) {
        if (arg === undefined || arg === null) {
            return false;
        }
        return (arg.isAutomaticBinding !== undefined);
    }
    static isEquivalent(a, b) {
        const aProps = Object.getOwnPropertyNames(a);
        const bProps = Object.getOwnPropertyNames(b);
        if (aProps.length !== bProps.length) {
            return false;
        }
        for (let i = 0; i < aProps.length; i++) {
            const propName = aProps[i];
            let bValue = b[propName];
            if (typeof a[propName] === 'number') {
                const intB = parseInt(bValue, 10);
                bValue = isNaN(intB) ? bValue : intB;
            }
            if (a[propName] !== bValue) {
                return false;
            }
        }
        return true;
    }
    static equals(o1, o2) {
        if (o1 === o2) {
            return true;
        }
        if (o1 === null || o2 === null) {
            return false;
        }
        if (o1 !== o1 && o2 !== o2) {
            return true;
        }
        const t1 = typeof o1;
        const t2 = typeof o2;
        let length;
        let key;
        let keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(o1)) {
                if (!Array.isArray(o2)) {
                    return false;
                }
                length = o1.length;
                if (length === o2.length) {
                    for (key = 0; key < length; key++) {
                        if (!Util.equals(o1[key], o2[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(o2)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in o1) {
                    if (!Util.equals(o1[key], o2[key])) {
                        return false;
                    }
                    keySet[key] = true;
                }
                for (key in o2) {
                    if (!(key in keySet) && typeof o2[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }
    static isDefined(value) {
        return typeof value !== 'undefined' && value !== null;
    }
    static normalizeString(value, toLowerCase = true) {
        if (value && value.length) {
            let result = value.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
            if (toLowerCase) {
                result = result.toLowerCase();
            }
            return result;
        }
        return '';
    }
    static flatten(array) {
        return [].concat(...array);
    }
    static getValuesFromObject(obj = {}) {
        const array = [];
        Object.keys(obj).forEach(key => {
            if (typeof obj[key] === 'object') {
                array.push(Util.getValuesFromObject(obj[key]));
            }
            array.push(obj[key]);
        });
        return Util.flatten(array);
    }
    static parseIconPosition(value, defaultValue) {
        let result = defaultValue || Codes.ICON_POSITION_LEFT;
        const availablePositions = [Codes.ICON_POSITION_LEFT, Codes.ICON_POSITION_RIGHT];
        if (value && value.length) {
            result = value.toLowerCase();
        }
        if (availablePositions.indexOf(result) === -1) {
            result = defaultValue || Codes.ICON_POSITION_LEFT;
        }
        return result;
    }
    static copyToClipboard(data) {
        document.addEventListener('copy', (e) => {
            e.clipboardData.setData('text/plain', data);
            e.preventDefault();
            document.removeEventListener('copy', null);
        });
        document.execCommand('copy');
    }
    static checkPixelsValueString(value) {
        return typeof value === 'string' ? value.toLowerCase().endsWith('px') : false;
    }
    static extractPixelsValue(value, defaultValue) {
        let result = typeof value === 'number' ? value : undefined;
        if (Util.checkPixelsValueString(value)) {
            const parsed = parseFloat(value.substr(0, value.length - 'px'.length));
            result = isNaN(parsed) ? defaultValue : parsed;
        }
        return Util.isDefined(result) ? result : defaultValue;
    }
    static parseOInputsOptions(elRef, oInputsOptions) {
        if (oInputsOptions.iconColor === Codes.O_INPUTS_OPTIONS_COLOR_ACCENT) {
            const matFormFieldEL = elRef.nativeElement.getElementsByTagName('mat-form-field')[0];
            if (Util.isDefined(matFormFieldEL)) {
                matFormFieldEL.classList.add('accent');
            }
        }
    }
    static escapeSpecialCharacter(S) {
        const str = String(S);
        const cpList = Array.from(str[Symbol.iterator]());
        const cuList = [];
        for (const c of cpList) {
            if ('^$\\.*+?()[]{}|'.indexOf(c) !== -1) {
                cuList.push('\\');
            }
            cuList.push(c);
        }
        const L = cuList.join('');
        return L;
    }
    static differenceArrays(array1, array2) {
        const difference = array1.filter(obj => {
            return !array2.some(obj2 => {
                return this.equals(obj, obj2);
            });
        });
        return difference;
    }
    static convertToODateValueType(val) {
        let result = 'timestamp';
        const lowerVal = (val || '').toLowerCase();
        if (lowerVal === 'string' || lowerVal === 'date' || lowerVal === 'timestamp' || lowerVal === 'iso-8601') {
            result = lowerVal;
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,