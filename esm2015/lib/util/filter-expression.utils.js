export class FilterExpressionUtils {
    static instanceofBasicExpression(arg) {
        return arg.hasOwnProperty(FilterExpressionUtils.BASIC_EXPRESSION_KEY)
            && FilterExpressionUtils.instanceofExpression(arg[FilterExpressionUtils.BASIC_EXPRESSION_KEY]);
    }
    static buildBasicExpression(exp) {
        if (exp) {
            if (!FilterExpressionUtils.instanceofExpression(exp)) {
                console.error('The expression provided is not an instance of \'Expression\'');
            }
            const be = {
                '@basic_expression': exp
            };
            return be;
        }
        return undefined;
    }
    static instanceofFilterExpression(exp) {
        return exp.hasOwnProperty(FilterExpressionUtils.FILTER_EXPRESSION_KEY)
            && FilterExpressionUtils.instanceofExpression(exp[FilterExpressionUtils.FILTER_EXPRESSION_KEY]);
    }
    static buildFilterExpression(exp) {
        if (exp) {
            if (!FilterExpressionUtils.instanceofExpression(exp)) {
                console.error('The expression provided is not an instance of \'Expression\'');
            }
            const be = {
                '@filter_expression': exp
            };
            return be;
        }
        return undefined;
    }
    static instanceofExpression(exp) {
        return exp.hasOwnProperty('lop') && exp.hasOwnProperty('op');
    }
    static buildComplexExpression(expr1, expr2, op) {
        if (expr1.lop === undefined && expr1.op === undefined) {
            return expr2;
        }
        if (expr2.lop === undefined && expr2.op === undefined) {
            return expr1;
        }
        const expr = {
            lop: expr1,
            op: op,
            rop: expr2
        };
        return expr;
    }
    static buildExpressionEquals(key, value) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_EQUAL,
            rop: value
        };
        return expr;
    }
    static buildExpressionIsNotNull(key) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NOT_NULL
        };
        return expr;
    }
    static buildExpressionIsNull(key) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NULL
        };
        return expr;
    }
    static buildExpressionLess(key, value) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LESS,
            rop: value
        };
        return expr;
    }
    static buildExpressionLessEqual(key, value) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LESS_EQUAL,
            rop: value
        };
        return expr;
    }
    static buildExpressionMore(key, value) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_MORE,
            rop: value
        };
        return expr;
    }
    static buildExpressionMoreEqual(key, value) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_MORE_EQUAL,
            rop: value
        };
        return expr;
    }
    static buildExpressionIn(key, values) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_IN,
            rop: values
        };
        return expr;
    }
    static buildExpressionNotLike(key, value) {
        if (value !== undefined) {
            value = value.replace(new RegExp('\\*', 'g'), '%');
            if (value.indexOf('%') === -1) {
                value = '%' + value + '%';
            }
        }
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NOT_LIKE,
            rop: value
        };
        return expr;
    }
    static buildExpressionLike(key, value) {
        if (value !== undefined) {
            value = value.replace(new RegExp('\\*', 'g'), '%');
            if (value.indexOf('%') === -1) {
                value = '%' + value + '%';
            }
        }
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LIKE,
            rop: value
        };
        return expr;
    }
    static buildExpressionLikeEnd(key, value) {
        if (value !== undefined) {
            value = '%' + value;
        }
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LIKE,
            rop: value
        };
        return expr;
    }
    static buildExpressionLikeStart(key, value) {
        if (value !== undefined) {
            value = value + '%';
        }
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_LIKE,
            rop: value
        };
        return expr;
    }
    static buildExpressionNotEquals(key, value) {
        const expr = {
            lop: key,
            op: FilterExpressionUtils.OP_NOT_EQUAL,
            rop: value
        };
        return expr;
    }
    static buildExpressionNullAndValue(key, value, op) {
        const isNull = FilterExpressionUtils.buildExpressionIsNull(key);
        const equals = FilterExpressionUtils.buildExpressionEquals(key, value);
        const expr = {
            lop: isNull,
            op: op,
            rop: equals
        };
        return expr;
    }
    static buildArrayExpressionLike(keys, value) {
        let result = {
            lop: undefined,
            op: undefined
        };
        keys.forEach((col) => {
            result = FilterExpressionUtils.stackExpressionLikeOR(col, value, result);
        });
        return result;
    }
    static buildExpressionFromObject(obj) {
        let result = {
            lop: undefined,
            op: undefined
        };
        Object.keys(obj || {}).forEach((key) => {
            result = FilterExpressionUtils.stackExpressionEqualsAND(key, obj[key], result);
        });
        return result;
    }
    static stackExpressionLikeOR(key, value, expr) {
        const likeExpr = FilterExpressionUtils.buildExpressionLike(key, value);
        if (expr.lop === undefined && expr.op === undefined) {
            return likeExpr;
        }
        else {
            expr = FilterExpressionUtils.buildComplexExpression(expr, likeExpr, FilterExpressionUtils.OP_OR);
        }
        return expr;
    }
    static stackExpressionEqualsAND(key, value, expr) {
        const equalsExpr = FilterExpressionUtils.buildExpressionEquals(key, value);
        if (expr.lop === undefined && expr.op === undefined) {
            return equalsExpr;
        }
        else {
            expr = FilterExpressionUtils.buildComplexExpression(expr, equalsExpr, FilterExpressionUtils.OP_AND);
        }
        return expr;
    }
}
FilterExpressionUtils.BASIC_EXPRESSION_KEY = '@basic_expression';
FilterExpressionUtils.FILTER_EXPRESSION_KEY = '@filter_expression';
FilterExpressionUtils.OP_OR = 'OR';
FilterExpressionUtils.OP_AND = 'AND';
FilterExpressionUtils.OP_LIKE = 'LIKE';
FilterExpressionUtils.OP_NOT_LIKE = 'NOT LIKE';
FilterExpressionUtils.OP_EQUAL = '=';
FilterExpressionUtils.OP_NOT_EQUAL = '<>';
FilterExpressionUtils.OP_NULL = 'IS NULL';
FilterExpressionUtils.OP_NOT_NULL = 'IS NOT NULL';
FilterExpressionUtils.OP_LESS = '<';
FilterExpressionUtils.OP_LESS_EQUAL = '<=';
FilterExpressionUtils.OP_MORE = '>';
FilterExpressionUtils.OP_MORE_EQUAL = '>=';
FilterExpressionUtils.OP_IN = 'IN';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWV4cHJlc3Npb24udXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL3V0aWwvZmlsdGVyLWV4cHJlc3Npb24udXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxPQUFPLHFCQUFxQjtJQWtGaEMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQVE7UUFDdkMsT0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDO2VBQ2hFLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQU9ELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxHQUFlO1FBQ3pDLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7YUFDL0U7WUFDRCxNQUFNLEVBQUUsR0FBb0I7Z0JBQzFCLG1CQUFtQixFQUFFLEdBQUc7YUFDekIsQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBT0QsTUFBTSxDQUFDLDBCQUEwQixDQUFDLEdBQVE7UUFDeEMsT0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDO2VBQ2pFLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDcEcsQ0FBQztJQU9ELE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFlO1FBQzFDLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7YUFDL0U7WUFDRCxNQUFNLEVBQUUsR0FBcUI7Z0JBQzNCLG9CQUFvQixFQUFFLEdBQUc7YUFDMUIsQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBT0QsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEdBQVE7UUFDbEMsT0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQVNELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxLQUFpQixFQUFFLEtBQWlCLEVBQUUsRUFBVTtRQUM1RSxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3JELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3JELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLElBQUksR0FBZTtZQUN2QixHQUFHLEVBQUUsS0FBSztZQUNWLEVBQUUsRUFBRSxFQUFFO1lBQ04sR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ2xELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLFFBQVE7WUFDbEMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBT0QsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQVc7UUFDekMsTUFBTSxJQUFJLEdBQWU7WUFDdkIsR0FBRyxFQUFFLEdBQUc7WUFDUixFQUFFLEVBQUUscUJBQXFCLENBQUMsV0FBVztTQUN0QyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBT0QsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQVc7UUFDdEMsTUFBTSxJQUFJLEdBQWU7WUFDdkIsR0FBRyxFQUFFLEdBQUc7WUFDUixFQUFFLEVBQUUscUJBQXFCLENBQUMsT0FBTztTQUNsQyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ2hELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLE9BQU87WUFDakMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ3JELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLGFBQWE7WUFDdkMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ2hELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLE9BQU87WUFDakMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ3JELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLGFBQWE7WUFDdkMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQVcsRUFBRSxNQUFhO1FBQ2pELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLEtBQUs7WUFDL0IsR0FBRyxFQUFFLE1BQU07U0FDWixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ3RELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7YUFDM0I7U0FDRjtRQUNELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLFdBQVc7WUFDckMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ25ELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7YUFDM0I7U0FDRjtRQUNELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLE9BQU87WUFDakMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ3RELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztTQUNyQjtRQUNELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLE9BQU87WUFDakMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ3hELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixLQUFLLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNyQjtRQUNELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLE9BQU87WUFDakMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ3JELE1BQU0sSUFBSSxHQUFlO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsRUFBRSxFQUFFLHFCQUFxQixDQUFDLFlBQVk7WUFDdEMsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBYUQsTUFBTSxDQUFDLDJCQUEyQixDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsRUFBVTtRQUNwRSxNQUFNLE1BQU0sR0FBZSxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1RSxNQUFNLE1BQU0sR0FBZSxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkYsTUFBTSxJQUFJLEdBQWU7WUFDdkIsR0FBRyxFQUFFLE1BQU07WUFDWCxFQUFFLEVBQUUsRUFBRTtZQUNOLEdBQUcsRUFBRSxNQUFNO1NBQ1osQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQVFELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFXLEVBQUUsS0FBVTtRQUNyRCxJQUFJLE1BQU0sR0FBZTtZQUN2QixHQUFHLEVBQUUsU0FBUztZQUNkLEVBQUUsRUFBRSxTQUFTO1NBQ2QsQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNuQixNQUFNLEdBQUcscUJBQXFCLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFPRCxNQUFNLENBQUMseUJBQXlCLENBQUMsR0FBUTtRQUN2QyxJQUFJLE1BQU0sR0FBZTtZQUN2QixHQUFHLEVBQUUsU0FBUztZQUNkLEVBQUUsRUFBRSxTQUFTO1NBQ2QsQ0FBQztRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3JDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFXLEVBQUUsS0FBVSxFQUFFLElBQWdCO1FBQzVFLE1BQU0sUUFBUSxHQUFHLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2RSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ25ELE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxJQUFJLEdBQUcscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsRztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFXLEVBQUUsS0FBVSxFQUFFLElBQWdCO1FBQy9FLE1BQU0sVUFBVSxHQUFHLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ25ELE9BQU8sVUFBVSxDQUFDO1NBQ25CO2FBQU07WUFDTCxJQUFJLEdBQUcscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyRztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7QUFuYk0sMENBQW9CLEdBQUcsbUJBQW1CLENBQUM7QUFLM0MsMkNBQXFCLEdBQUcsb0JBQW9CLENBQUM7QUFLN0MsMkJBQUssR0FBVyxJQUFJLENBQUM7QUFLckIsNEJBQU0sR0FBVyxLQUFLLENBQUM7QUFLdkIsNkJBQU8sR0FBVyxNQUFNLENBQUM7QUFLekIsaUNBQVcsR0FBVyxVQUFVLENBQUM7QUFLakMsOEJBQVEsR0FBVyxHQUFHLENBQUM7QUFLdkIsa0NBQVksR0FBVyxJQUFJLENBQUM7QUFLNUIsNkJBQU8sR0FBVyxTQUFTLENBQUM7QUFLNUIsaUNBQVcsR0FBVyxhQUFhLENBQUM7QUFLcEMsNkJBQU8sR0FBVyxHQUFHLENBQUM7QUFLdEIsbUNBQWEsR0FBVyxJQUFJLENBQUM7QUFLN0IsNkJBQU8sR0FBVyxHQUFHLENBQUM7QUFLdEIsbUNBQWEsR0FBVyxJQUFJLENBQUM7QUFLN0IsMkJBQUssR0FBVyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNpY0V4cHJlc3Npb24gfSBmcm9tICcuLi90eXBlcy9iYXNpYy1leHByZXNzaW9uLnR5cGUnO1xuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL3R5cGVzL2V4cHJlc3Npb24udHlwZSc7XG5pbXBvcnQgeyBGaWx0ZXJFeHByZXNzaW9uIH0gZnJvbSAnLi4vdHlwZXMvZmlsdGVyLWV4cHJlc3Npb24udHlwZSc7XG5cbi8qKlxuICogVXRpbGl0eSBjbGFzcyBmb3IgYnVpbGRpbmcgYmFzaWMgYW5kIGZpbHRlciBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIEZpbHRlckV4cHJlc3Npb25VdGlscyB7XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNpYyBleHByZXNpb24ga2V5LlxuICAgKi9cbiAgc3RhdGljIEJBU0lDX0VYUFJFU1NJT05fS0VZID0gJ0BiYXNpY19leHByZXNzaW9uJztcblxuICAvKipcbiAgICogVGhlIGZpbHRlciBleHByZXNpb24ga2V5LlxuICAgKi9cbiAgc3RhdGljIEZJTFRFUl9FWFBSRVNTSU9OX0tFWSA9ICdAZmlsdGVyX2V4cHJlc3Npb24nO1xuXG4gIC8qKlxuICAgKiBUaGUgYE9SYCBvcGVyYXRvci5cbiAgICovXG4gIHN0YXRpYyBPUF9PUjogc3RyaW5nID0gJ09SJztcblxuICAvKipcbiAgICogVGhlIGBBTkRgIG9wZXJhdG9yLlxuICAgKi9cbiAgc3RhdGljIE9QX0FORDogc3RyaW5nID0gJ0FORCc7XG5cbiAgLyoqXG4gICAqIFRoZSBgTElLRWAgb3BlcmF0b3JcbiAgICovXG4gIHN0YXRpYyBPUF9MSUtFOiBzdHJpbmcgPSAnTElLRSc7XG5cbiAgLyoqXG4gICAqIFRoZSBgTk9UIExJS0VgIG9wZXJhdG9yLlxuICAgKi9cbiAgc3RhdGljIE9QX05PVF9MSUtFOiBzdHJpbmcgPSAnTk9UIExJS0UnO1xuXG4gIC8qKlxuICAgKiBUaGUgYEVRVUFMYCBvcGVyYXRvci5cbiAgICovXG4gIHN0YXRpYyBPUF9FUVVBTDogc3RyaW5nID0gJz0nO1xuXG4gIC8qKlxuICAgKiBUaGUgYE5PVCBFUVVBTGAgb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgT1BfTk9UX0VRVUFMOiBzdHJpbmcgPSAnPD4nO1xuXG4gIC8qKlxuICAgKiBUaGUgYElTIE5VTExgIG9wZXJhdG9yLlxuICAgKi9cbiAgc3RhdGljIE9QX05VTEw6IHN0cmluZyA9ICdJUyBOVUxMJztcblxuICAvKipcbiAgICogVGhlIGBJUyBOT1QgTlVMTGAgb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgT1BfTk9UX05VTEw6IHN0cmluZyA9ICdJUyBOT1QgTlVMTCc7XG5cbiAgLyoqXG4gICAqIFRoZSBgTEVTU2Agb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgT1BfTEVTUzogc3RyaW5nID0gJzwnO1xuXG4gIC8qKlxuICAgKiBUaGUgYExFUyBFUVVBTGAgb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgT1BfTEVTU19FUVVBTDogc3RyaW5nID0gJzw9JztcblxuICAvKipcbiAgICogVGhlIGBNT1JFYCBvcGVyYXRvci5cbiAgICovXG4gIHN0YXRpYyBPUF9NT1JFOiBzdHJpbmcgPSAnPic7XG5cbiAgLyoqXG4gICAqIFRoZSBgTU9SRSBFUVVBTGAgb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgT1BfTU9SRV9FUVVBTDogc3RyaW5nID0gJz49JztcblxuICAvKipcbiAgICogVGhlIGBJTmAgb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgT1BfSU46IHN0cmluZyA9ICdJTic7XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlcyBpZiB0aGUgdGhlIGV4cHJlc3Npb24gcHJvdmlkZWQgaXMgYW4gaW5zdGFuY2Ugb2YgYEJhc2ljRXhwcmVzc2lvbmAuLlxuICAgKiBAcGFyYW0gYXJnIHRoZSBleHByZXNzaW9uIHRvIGV2YWx1YXRlLlxuICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3ZpZGVkIGV4cHJlc3Npb24gaXMgYW4gaW5zdGFuY2Ugb2YgYEJhc2ljRXhwcmVzc2lvbmAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgc3RhdGljIGluc3RhbmNlb2ZCYXNpY0V4cHJlc3Npb24oYXJnOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gYXJnLmhhc093blByb3BlcnR5KEZpbHRlckV4cHJlc3Npb25VdGlscy5CQVNJQ19FWFBSRVNTSU9OX0tFWSlcbiAgICAgICYmIEZpbHRlckV4cHJlc3Npb25VdGlscy5pbnN0YW5jZW9mRXhwcmVzc2lvbihhcmdbRmlsdGVyRXhwcmVzc2lvblV0aWxzLkJBU0lDX0VYUFJFU1NJT05fS0VZXSk7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGEgYEJhc2ljRXhwcmVzc2lvbmAgaW5zdGFuY2UgZnJvbSB0aGUgZmlsdGVyaW5nIGV4cHJlc3Npb24gKGBFeHByZXNzaW9uYCkgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSBleHAgdGhlIGZpbHRlcmluZyBleHByZXNzaW9uLlxuICAgKiBAcmV0dXJucyB0aGUgYmFzaWMgZXhwcmVzc2lvbi5cbiAgICovXG4gIHN0YXRpYyBidWlsZEJhc2ljRXhwcmVzc2lvbihleHA6IEV4cHJlc3Npb24pOiBCYXNpY0V4cHJlc3Npb24ge1xuICAgIGlmIChleHApIHtcbiAgICAgIGlmICghRmlsdGVyRXhwcmVzc2lvblV0aWxzLmluc3RhbmNlb2ZFeHByZXNzaW9uKGV4cCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVGhlIGV4cHJlc3Npb24gcHJvdmlkZWQgaXMgbm90IGFuIGluc3RhbmNlIG9mIFxcJ0V4cHJlc3Npb25cXCcnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJlOiBCYXNpY0V4cHJlc3Npb24gPSB7XG4gICAgICAgICdAYmFzaWNfZXhwcmVzc2lvbic6IGV4cFxuICAgICAgfTtcbiAgICAgIHJldHVybiBiZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZXMgaWYgYW4gZXhwcmVzaW9uIGlzIGluc3RhbmNlIG9mIGBGaWx0ZXJFeHByZXNzaW9uYC5cbiAgICogQHBhcmFtIGV4cCB0aGUgZXhwcmVzc2lvbiB0byBldmFsdWF0ZS5cbiAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBwcm92aWRlZCBleHByZXNzaW9uIGlzIGFuIGluc3RhbmNlIG9mIGBGaWx0ZXJFeHByZXNzaW9uYCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAqL1xuICBzdGF0aWMgaW5zdGFuY2VvZkZpbHRlckV4cHJlc3Npb24oZXhwOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZXhwLmhhc093blByb3BlcnR5KEZpbHRlckV4cHJlc3Npb25VdGlscy5GSUxURVJfRVhQUkVTU0lPTl9LRVkpXG4gICAgICAmJiBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuaW5zdGFuY2VvZkV4cHJlc3Npb24oZXhwW0ZpbHRlckV4cHJlc3Npb25VdGlscy5GSUxURVJfRVhQUkVTU0lPTl9LRVldKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYW4gYEZpbHRlckV4cHJlc3Npb25gIGluc3RhbmNlIGZyb20gdGhlIGZpbHRlcmluZyBleHByZXNzaW9uIChgRXhwcmVzc2lvbmApIHByb3ZpZGVkLlxuICAgKiBAcGFyYW0gZXhwIHRoZSBmaWx0ZXJpbmcgZXhwcmVzc2lvbi5cbiAgICogQHJldHVybnMgdGhlIGBGaWx0ZXJFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEZpbHRlckV4cHJlc3Npb24oZXhwOiBFeHByZXNzaW9uKTogRmlsdGVyRXhwcmVzc2lvbiB7XG4gICAgaWYgKGV4cCkge1xuICAgICAgaWYgKCFGaWx0ZXJFeHByZXNzaW9uVXRpbHMuaW5zdGFuY2VvZkV4cHJlc3Npb24oZXhwKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdUaGUgZXhwcmVzc2lvbiBwcm92aWRlZCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgXFwnRXhwcmVzc2lvblxcJycpO1xuICAgICAgfVxuICAgICAgY29uc3QgYmU6IEZpbHRlckV4cHJlc3Npb24gPSB7XG4gICAgICAgICdAZmlsdGVyX2V4cHJlc3Npb24nOiBleHBcbiAgICAgIH07XG4gICAgICByZXR1cm4gYmU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogRXZhbHVhdGVzIGlmIGFuIGV4cHJlc2lvbiBpcyBpbnN0YW5jZSBvZiBgRXhwcmVzc2lvbmAuXG4gICAqIEBwYXJhbSBleHAgdGhlIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUuXG4gICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvdmlkZWQgZXhwcmVzc2lvbiBpcyBhbiBpbnN0YW5jZSBvZiBgRXhwcmVzc2lvbmAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgc3RhdGljIGluc3RhbmNlb2ZFeHByZXNzaW9uKGV4cDogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV4cC5oYXNPd25Qcm9wZXJ0eSgnbG9wJykgJiYgZXhwLmhhc093blByb3BlcnR5KCdvcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBsZXggYEV4cHJlc3Npb25gIGluc3RhbmNlIGpvaW5pbmcgdHdvIGV4cHJlc3Npb25zIHdpdGggdGhlIHByb3ZpZGVkIG9wZXJhdG9yLlxuICAgKiBAcGFyYW0gZXhwcjEgdGhlIGZpcnN0IGBFeHByZXNzaW9uYCB0byBqb2luLlxuICAgKiBAcGFyYW0gZXhwcjIgdGhlIHNlY29uZCBgRXhwcmVzc2lvbmAgdG8gam9pbi5cbiAgICogQHBhcmFtIG9wIHRoZSBqb2luaW5nIG9wZXJhdG9yLlxuICAgKiBAcmV0dXJucyB0aGUgY29tcGxleCBgRXhwcmVzc2lvbmAuXG4gICAqL1xuICBzdGF0aWMgYnVpbGRDb21wbGV4RXhwcmVzc2lvbihleHByMTogRXhwcmVzc2lvbiwgZXhwcjI6IEV4cHJlc3Npb24sIG9wOiBzdHJpbmcpOiBFeHByZXNzaW9uIHtcbiAgICBpZiAoZXhwcjEubG9wID09PSB1bmRlZmluZWQgJiYgZXhwcjEub3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV4cHIyO1xuICAgIH1cbiAgICBpZiAoZXhwcjIubG9wID09PSB1bmRlZmluZWQgJiYgZXhwcjIub3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV4cHIxO1xuICAgIH1cbiAgICBjb25zdCBleHByOiBFeHByZXNzaW9uID0ge1xuICAgICAgbG9wOiBleHByMSxcbiAgICAgIG9wOiBvcCxcbiAgICAgIHJvcDogZXhwcjJcbiAgICB9O1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhbiBgRXhwcmVzc2lvbmAgaW5zdGFuY2UgZm9yIGZpbHRlcmluZyB0aGUgcHJvdmlkZWQga2V5IEVRVUFMIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5LlxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB0aGUgYEV4cHJlc3Npb25gLlxuICAgKi9cbiAgc3RhdGljIGJ1aWxkRXhwcmVzc2lvbkVxdWFscyhrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IEV4cHJlc3Npb24ge1xuICAgIGNvbnN0IGV4cHI6IEV4cHJlc3Npb24gPSB7XG4gICAgICBsb3A6IGtleSxcbiAgICAgIG9wOiBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfRVFVQUwsXG4gICAgICByb3A6IHZhbHVlXG4gICAgfTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYW4gYEV4cHJlc3Npb25gIGluc3RhbmNlIGZvciBmaWx0ZXJpbmcgdGhlIHByb3ZpZGVkIGtleSB3aXRoIGEgTk9UIE5VTEwgdmFsdWUuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleS5cbiAgICogQHJldHVybnMgdGhlIGBFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEV4cHJlc3Npb25Jc05vdE51bGwoa2V5OiBzdHJpbmcpOiBFeHByZXNzaW9uIHtcbiAgICBjb25zdCBleHByOiBFeHByZXNzaW9uID0ge1xuICAgICAgbG9wOiBrZXksXG4gICAgICBvcDogRmlsdGVyRXhwcmVzc2lvblV0aWxzLk9QX05PVF9OVUxMXG4gICAgfTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYW4gYEV4cHJlc3Npb25gIGluc3RhbmNlIGZvciBmaWx0ZXJpbmcgdGhlIHByb3ZpZGVkIGtleSB3aXRoIGEgTlVMTCB2YWx1ZS5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5LlxuICAgKiBAcmV0dXJucyB0aGUgYEV4cHJlc3Npb25gLlxuICAgKi9cbiAgc3RhdGljIGJ1aWxkRXhwcmVzc2lvbklzTnVsbChrZXk6IHN0cmluZyk6IEV4cHJlc3Npb24ge1xuICAgIGNvbnN0IGV4cHI6IEV4cHJlc3Npb24gPSB7XG4gICAgICBsb3A6IGtleSxcbiAgICAgIG9wOiBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfTlVMTFxuICAgIH07XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGFuIGBFeHByZXNzaW9uYCBpbnN0YW5jZSBmb3IgZmlsdGVyaW5nIHRoZSBwcm92aWRlZCBrZXkgTEVTUyB0aGFuIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5LlxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB0aGUgYEV4cHJlc3Npb25gLlxuICAgKi9cbiAgc3RhdGljIGJ1aWxkRXhwcmVzc2lvbkxlc3Moa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBFeHByZXNzaW9uIHtcbiAgICBjb25zdCBleHByOiBFeHByZXNzaW9uID0ge1xuICAgICAgbG9wOiBrZXksXG4gICAgICBvcDogRmlsdGVyRXhwcmVzc2lvblV0aWxzLk9QX0xFU1MsXG4gICAgICByb3A6IHZhbHVlXG4gICAgfTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYW4gYEV4cHJlc3Npb25gIGluc3RhbmNlIGZvciBmaWx0ZXJpbmcgdGhlIHByb3ZpZGVkIGtleSBMRVNTIE9SIEVRVUFMIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5LlxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB0aGUgYEV4cHJlc3Npb25gLlxuICAgKi9cbiAgc3RhdGljIGJ1aWxkRXhwcmVzc2lvbkxlc3NFcXVhbChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IEV4cHJlc3Npb24ge1xuICAgIGNvbnN0IGV4cHI6IEV4cHJlc3Npb24gPSB7XG4gICAgICBsb3A6IGtleSxcbiAgICAgIG9wOiBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfTEVTU19FUVVBTCxcbiAgICAgIHJvcDogdmFsdWVcbiAgICB9O1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhbiBgRXhwcmVzc2lvbmAgaW5zdGFuY2UgZm9yIGZpbHRlcmluZyB0aGUgcHJvdmlkZWQga2V5IE1PUkUgdGhhbiB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleS5cbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZS5cbiAgICogQHJldHVybnMgdGhlIGBFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEV4cHJlc3Npb25Nb3JlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogRXhwcmVzc2lvbiB7XG4gICAgY29uc3QgZXhwcjogRXhwcmVzc2lvbiA9IHtcbiAgICAgIGxvcDoga2V5LFxuICAgICAgb3A6IEZpbHRlckV4cHJlc3Npb25VdGlscy5PUF9NT1JFLFxuICAgICAgcm9wOiB2YWx1ZVxuICAgIH07XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGFuIGBFeHByZXNzaW9uYCBpbnN0YW5jZSBmb3IgZmlsdGVyaW5nIHRoZSBwcm92aWRlZCBrZXkgTU9SRSBPUiBFUVVBTCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleS5cbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZS5cbiAgICogQHJldHVybnMgdGhlIGBFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEV4cHJlc3Npb25Nb3JlRXF1YWwoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBFeHByZXNzaW9uIHtcbiAgICBjb25zdCBleHByOiBFeHByZXNzaW9uID0ge1xuICAgICAgbG9wOiBrZXksXG4gICAgICBvcDogRmlsdGVyRXhwcmVzc2lvblV0aWxzLk9QX01PUkVfRVFVQUwsXG4gICAgICByb3A6IHZhbHVlXG4gICAgfTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIHN0YXRpYyBidWlsZEV4cHJlc3Npb25JbihrZXk6IHN0cmluZywgdmFsdWVzOiBhbnlbXSk6IEV4cHJlc3Npb24ge1xuICAgIGNvbnN0IGV4cHI6IEV4cHJlc3Npb24gPSB7XG4gICAgICBsb3A6IGtleSxcbiAgICAgIG9wOiBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfSU4sXG4gICAgICByb3A6IHZhbHVlc1xuICAgIH07XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGFuIGBFeHByZXNzaW9uYCBpbnN0YW5jZSBmb3IgZmlsdGVyaW5nIHRoZSBwcm92aWRlZCBrZXkgTk9UIExJS0UgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkuXG4gICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUuXG4gICAqIEByZXR1cm5zIHRoZSBgRXhwcmVzc2lvbmAuXG4gICAqL1xuICBzdGF0aWMgYnVpbGRFeHByZXNzaW9uTm90TGlrZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IEV4cHJlc3Npb24ge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXConLCAnZycpLCAnJScpO1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJyUnKSA9PT0gLTEpIHtcbiAgICAgICAgdmFsdWUgPSAnJScgKyB2YWx1ZSArICclJztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXhwcjogRXhwcmVzc2lvbiA9IHtcbiAgICAgIGxvcDoga2V5LFxuICAgICAgb3A6IEZpbHRlckV4cHJlc3Npb25VdGlscy5PUF9OT1RfTElLRSxcbiAgICAgIHJvcDogdmFsdWVcbiAgICB9O1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhbiBgRXhwcmVzc2lvbmAgaW5zdGFuY2UgZm9yIGZpbHRlcmluZyB0aGUgcHJvdmlkZWQga2V5IExJS0UgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkuXG4gICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUuXG4gICAqIEByZXR1cm5zIHRoZSBgRXhwcmVzc2lvbmAuXG4gICAqL1xuICBzdGF0aWMgYnVpbGRFeHByZXNzaW9uTGlrZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IEV4cHJlc3Npb24ge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXConLCAnZycpLCAnJScpO1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJyUnKSA9PT0gLTEpIHtcbiAgICAgICAgdmFsdWUgPSAnJScgKyB2YWx1ZSArICclJztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXhwcjogRXhwcmVzc2lvbiA9IHtcbiAgICAgIGxvcDoga2V5LFxuICAgICAgb3A6IEZpbHRlckV4cHJlc3Npb25VdGlscy5PUF9MSUtFLFxuICAgICAgcm9wOiB2YWx1ZVxuICAgIH07XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGFuIGBFeHByZXNzaW9uYCBpbnN0YW5jZSBmb3IgZmlsdGVyaW5nIHRoZSBwcm92aWRlZCBrZXkgRU5EUyBMSUtFIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5LlxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJucyB0aGUgYEV4cHJlc3Npb25gLlxuICAgKi9cbiAgc3RhdGljIGJ1aWxkRXhwcmVzc2lvbkxpa2VFbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBFeHByZXNzaW9uIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsdWUgPSAnJScgKyB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgZXhwcjogRXhwcmVzc2lvbiA9IHtcbiAgICAgIGxvcDoga2V5LFxuICAgICAgb3A6IEZpbHRlckV4cHJlc3Npb25VdGlscy5PUF9MSUtFLFxuICAgICAgcm9wOiB2YWx1ZVxuICAgIH07XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGFuIGBFeHByZXNzaW9uYCBpbnN0YW5jZSBmb3IgZmlsdGVyaW5nIHRoZSBwcm92aWRlZCBrZXkgU1RBUlRTIExJS0UgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkuXG4gICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUuXG4gICAqIEByZXR1cm5zIHRoZSBgRXhwcmVzc2lvbmAuXG4gICAqL1xuICBzdGF0aWMgYnVpbGRFeHByZXNzaW9uTGlrZVN0YXJ0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogRXhwcmVzc2lvbiB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKyAnJSc7XG4gICAgfVxuICAgIGNvbnN0IGV4cHI6IEV4cHJlc3Npb24gPSB7XG4gICAgICBsb3A6IGtleSxcbiAgICAgIG9wOiBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfTElLRSxcbiAgICAgIHJvcDogdmFsdWVcbiAgICB9O1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhbiBgRXhwcmVzc2lvbmAgaW5zdGFuY2UgZm9yIGZpbHRlcmluZyB0aGUgcHJvdmlkZWQga2V5IE5PVCBFUVVBTCB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAqIEBwYXJhbSBrZXkgdGhlIGtleS5cbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZS5cbiAgICogQHJldHVybnMgdGhlIGBFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEV4cHJlc3Npb25Ob3RFcXVhbHMoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBFeHByZXNzaW9uIHtcbiAgICBjb25zdCBleHByOiBFeHByZXNzaW9uID0ge1xuICAgICAgbG9wOiBrZXksXG4gICAgICBvcDogRmlsdGVyRXhwcmVzc2lvblV0aWxzLk9QX05PVF9FUVVBTCxcbiAgICAgIHJvcDogdmFsdWVcbiAgICB9O1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBsZXggYEV4cHJlc3Npb25gIGZvciBmaWx0ZXJpbmcgdGhlIHByb3ZpZGVkIGtleSB3aXRoIHR3byBjb25kaXRpb25zOlxuICAgKiAqIFRoZSBmaXJzdCBmaWx0ZXIgdGhlIHByb3ZpZGVkIGtleSB3aXRoIGEgTlVMTCB2YWx1ZS5cbiAgICogKiBUaGUgc2Vjb25kIGZpbHRlciB0aGUgcHJvdmlkZWQga2V5IEVRVUFMIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICpcbiAgICogQm90aCBleHByZXNzaW9ucyBhcmUgam9pbmVkIHVzaW5nIHRoZSBwcm92aWRlZCBvcGVyYXRvci5cbiAgICogQHBhcmFtIGtleSB0aGUga2V5LlxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlLlxuICAgKiBAcGFyYW0gb3AgdGhlIG9wZXJhdG9yLlxuICAgKiBAcmV0dXJucyB0aGUgYEV4cHJlc3Npb25gLlxuICAgKi9cbiAgc3RhdGljIGJ1aWxkRXhwcmVzc2lvbk51bGxBbmRWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgb3A6IHN0cmluZyk6IEV4cHJlc3Npb24ge1xuICAgIGNvbnN0IGlzTnVsbDogRXhwcmVzc2lvbiA9IEZpbHRlckV4cHJlc3Npb25VdGlscy5idWlsZEV4cHJlc3Npb25Jc051bGwoa2V5KTtcbiAgICBjb25zdCBlcXVhbHM6IEV4cHJlc3Npb24gPSBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuYnVpbGRFeHByZXNzaW9uRXF1YWxzKGtleSwgdmFsdWUpO1xuICAgIGNvbnN0IGV4cHI6IEV4cHJlc3Npb24gPSB7XG4gICAgICBsb3A6IGlzTnVsbCxcbiAgICAgIG9wOiBvcCxcbiAgICAgIHJvcDogZXF1YWxzXG4gICAgfTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjb21wbGV4IGBFeHByZXNzaW9uYCBmb3IgZmlsdGVyaW5nIHRoZSBwcm92aWRlZCBrZXlzIExJS0UgdGhlIHZhbHVlIHByb3ZpZGVkLlxuICAgKiBAcGFyYW0ga2V5cyB0aGUga2V5cy5cbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZS5cbiAgICogQHJldHVybnMgdGhlIGBFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEFycmF5RXhwcmVzc2lvbkxpa2Uoa2V5czogYW55W10sIHZhbHVlOiBhbnkpOiBFeHByZXNzaW9uIHtcbiAgICBsZXQgcmVzdWx0OiBFeHByZXNzaW9uID0ge1xuICAgICAgbG9wOiB1bmRlZmluZWQsXG4gICAgICBvcDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBrZXlzLmZvckVhY2goKGNvbCkgPT4ge1xuICAgICAgcmVzdWx0ID0gRmlsdGVyRXhwcmVzc2lvblV0aWxzLnN0YWNrRXhwcmVzc2lvbkxpa2VPUihjb2wsIHZhbHVlLCByZXN1bHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGFuIGBFeHByZXNzaW9uYCBpbnN0YW5jZSBmcm9tIHRoZSBwcm92aWRlZCBvYmplY3QuXG4gICAqIEBwYXJhbSBvYmogdGhlIG9iamVjdC5cbiAgICogQHJldHVybnMgdGhlIGBFeHByZXNzaW9uYC5cbiAgICovXG4gIHN0YXRpYyBidWlsZEV4cHJlc3Npb25Gcm9tT2JqZWN0KG9iajogYW55KTogRXhwcmVzc2lvbiB7XG4gICAgbGV0IHJlc3VsdDogRXhwcmVzc2lvbiA9IHtcbiAgICAgIGxvcDogdW5kZWZpbmVkLFxuICAgICAgb3A6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgT2JqZWN0LmtleXMob2JqIHx8IHt9KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHJlc3VsdCA9IEZpbHRlckV4cHJlc3Npb25VdGlscy5zdGFja0V4cHJlc3Npb25FcXVhbHNBTkQoa2V5LCBvYmpba2V5XSwgcmVzdWx0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgc3RhY2tFeHByZXNzaW9uTGlrZU9SKGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBleHByOiBFeHByZXNzaW9uKTogRXhwcmVzc2lvbiB7XG4gICAgY29uc3QgbGlrZUV4cHIgPSBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuYnVpbGRFeHByZXNzaW9uTGlrZShrZXksIHZhbHVlKTtcbiAgICBpZiAoZXhwci5sb3AgPT09IHVuZGVmaW5lZCAmJiBleHByLm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsaWtlRXhwcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwciA9IEZpbHRlckV4cHJlc3Npb25VdGlscy5idWlsZENvbXBsZXhFeHByZXNzaW9uKGV4cHIsIGxpa2VFeHByLCBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfT1IpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHN0YWNrRXhwcmVzc2lvbkVxdWFsc0FORChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgZXhwcjogRXhwcmVzc2lvbik6IEV4cHJlc3Npb24ge1xuICAgIGNvbnN0IGVxdWFsc0V4cHIgPSBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuYnVpbGRFeHByZXNzaW9uRXF1YWxzKGtleSwgdmFsdWUpO1xuICAgIGlmIChleHByLmxvcCA9PT0gdW5kZWZpbmVkICYmIGV4cHIub3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGVxdWFsc0V4cHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cHIgPSBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuYnVpbGRDb21wbGV4RXhwcmVzc2lvbihleHByLCBlcXVhbHNFeHByLCBGaWx0ZXJFeHByZXNzaW9uVXRpbHMuT1BfQU5EKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxufVxuIl19