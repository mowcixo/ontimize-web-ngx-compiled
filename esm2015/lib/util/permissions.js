import { Util } from './util';
export class PermissionsUtils {
    static checkEnabledPermission(permission) {
        if (Util.isDefined(permission) && permission.enabled === false) {
            console.warn('MESSAGES.OPERATION_NOT_ALLOWED_PERMISSION');
            return false;
        }
        return true;
    }
    static registerDisabledChangesInDom(nativeElement, args) {
        const callback = args && args.callback ? args.callback : PermissionsUtils.setDisabledDOMElement;
        const checkStringValue = !!(args && args.checkStringValue);
        if (!Util.isDefined(nativeElement)) {
            return undefined;
        }
        const mutationObserver = new MutationObserver((mutations) => {
            const mutation = mutations[0];
            if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {
                const attribute = mutation.target.attributes.getNamedItem('disabled');
                if (attribute === null || (checkStringValue && attribute.value !== 'true')) {
                    callback(mutation);
                }
            }
        });
        mutationObserver.observe(nativeElement, {
            attributes: true,
            attributeFilter: ['disabled']
        });
        return mutationObserver;
    }
    static setDisabledDOMElement(mutation) {
        const element = mutation.target;
        element.setAttribute('disabled', 'true');
    }
}
PermissionsUtils.ACTION_REFRESH = 'refresh';
PermissionsUtils.ACTION_INSERT = 'insert';
PermissionsUtils.ACTION_UPDATE = 'update';
PermissionsUtils.ACTION_DELETE = 'delete';
PermissionsUtils.STANDARD_ACTIONS = [
    PermissionsUtils.ACTION_REFRESH,
    PermissionsUtils.ACTION_INSERT,
    PermissionsUtils.ACTION_UPDATE,
    PermissionsUtils.ACTION_DELETE
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL3V0aWwvcGVybWlzc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLE9BQU8sZ0JBQWdCO0lBYTNCLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxVQUF3QjtRQUNwRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7WUFDOUQsT0FBTyxDQUFDLElBQUksQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1lBQzFELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLENBQUMsNEJBQTRCLENBQUMsYUFBa0IsRUFBRSxJQUFVO1FBQ2hFLE1BQU0sUUFBUSxHQUFhLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQztRQUMxRyxNQUFNLGdCQUFnQixHQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNsQyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLFNBQTJCLEVBQUUsRUFBRTtZQUM1RSxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLFlBQVksSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLFVBQVUsRUFBRTtnQkFDM0UsTUFBTSxTQUFTLEdBQUksUUFBUSxDQUFDLE1BQWMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvRSxJQUFJLFNBQVMsS0FBSyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxFQUFFO29CQUMxRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3BCO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDdEMsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQzlCLENBQUMsQ0FBQztRQUVILE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxRQUF3QjtRQUNuRCxNQUFNLE9BQU8sR0FBcUIsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUNsRCxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDOztBQWhEYSwrQkFBYyxHQUFHLFNBQVMsQ0FBQztBQUMzQiw4QkFBYSxHQUFHLFFBQVEsQ0FBQztBQUN6Qiw4QkFBYSxHQUFHLFFBQVEsQ0FBQztBQUN6Qiw4QkFBYSxHQUFHLFFBQVEsQ0FBQztBQUV6QixpQ0FBZ0IsR0FBRztJQUMvQixnQkFBZ0IsQ0FBQyxjQUFjO0lBQy9CLGdCQUFnQixDQUFDLGFBQWE7SUFDOUIsZ0JBQWdCLENBQUMsYUFBYTtJQUM5QixnQkFBZ0IsQ0FBQyxhQUFhO0NBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPUGVybWlzc2lvbnMgfSBmcm9tICcuLi90eXBlcy9vLXBlcm1pc3Npb25zLnR5cGUnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9uc1V0aWxzIHtcbiAgcHVibGljIHN0YXRpYyBBQ1RJT05fUkVGUkVTSCA9ICdyZWZyZXNoJztcbiAgcHVibGljIHN0YXRpYyBBQ1RJT05fSU5TRVJUID0gJ2luc2VydCc7XG4gIHB1YmxpYyBzdGF0aWMgQUNUSU9OX1VQREFURSA9ICd1cGRhdGUnO1xuICBwdWJsaWMgc3RhdGljIEFDVElPTl9ERUxFVEUgPSAnZGVsZXRlJztcblxuICBwdWJsaWMgc3RhdGljIFNUQU5EQVJEX0FDVElPTlMgPSBbXG4gICAgUGVybWlzc2lvbnNVdGlscy5BQ1RJT05fUkVGUkVTSCxcbiAgICBQZXJtaXNzaW9uc1V0aWxzLkFDVElPTl9JTlNFUlQsXG4gICAgUGVybWlzc2lvbnNVdGlscy5BQ1RJT05fVVBEQVRFLFxuICAgIFBlcm1pc3Npb25zVXRpbHMuQUNUSU9OX0RFTEVURVxuICBdO1xuXG4gIHN0YXRpYyBjaGVja0VuYWJsZWRQZXJtaXNzaW9uKHBlcm1pc3Npb246IE9QZXJtaXNzaW9ucyk6IGJvb2xlYW4ge1xuICAgIGlmIChVdGlsLmlzRGVmaW5lZChwZXJtaXNzaW9uKSAmJiBwZXJtaXNzaW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01FU1NBR0VTLk9QRVJBVElPTl9OT1RfQUxMT1dFRF9QRVJNSVNTSU9OJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGljIHJlZ2lzdGVyRGlzYWJsZWRDaGFuZ2VzSW5Eb20obmF0aXZlRWxlbWVudDogYW55LCBhcmdzPzogYW55KTogTXV0YXRpb25PYnNlcnZlciB7XG4gICAgY29uc3QgY2FsbGJhY2s6IEZ1bmN0aW9uID0gYXJncyAmJiBhcmdzLmNhbGxiYWNrID8gYXJncy5jYWxsYmFjayA6IFBlcm1pc3Npb25zVXRpbHMuc2V0RGlzYWJsZWRET01FbGVtZW50O1xuICAgIGNvbnN0IGNoZWNrU3RyaW5nVmFsdWU6IGJvb2xlYW4gPSAhIShhcmdzICYmIGFyZ3MuY2hlY2tTdHJpbmdWYWx1ZSk7XG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZChuYXRpdmVFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBtdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9uczogTXV0YXRpb25SZWNvcmRbXSkgPT4ge1xuICAgICAgY29uc3QgbXV0YXRpb24gPSBtdXRhdGlvbnNbMF07XG4gICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gKG11dGF0aW9uLnRhcmdldCBhcyBhbnkpLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkaXNhYmxlZCcpO1xuICAgICAgICBpZiAoYXR0cmlidXRlID09PSBudWxsIHx8IChjaGVja1N0cmluZ1ZhbHVlICYmIGF0dHJpYnV0ZS52YWx1ZSAhPT0gJ3RydWUnKSkge1xuICAgICAgICAgIGNhbGxiYWNrKG11dGF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnZGlzYWJsZWQnXVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG11dGF0aW9uT2JzZXJ2ZXI7XG4gIH1cblxuICBzdGF0aWMgc2V0RGlzYWJsZWRET01FbGVtZW50KG11dGF0aW9uOiBNdXRhdGlvblJlY29yZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSA8SFRNTElucHV0RWxlbWVudD5tdXRhdGlvbi50YXJnZXQ7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgfVxufVxuIl19