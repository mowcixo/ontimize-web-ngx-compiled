import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, Inject, Injector } from '@angular/core';
import { Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { OFormComponent } from '../../components/form/o-form.component';
import { InputConverter } from '../../decorators/input-converter';
import { Codes } from '../../util/codes';
import { FilterExpressionUtils } from '../../util/filter-expression.utils';
import { Util } from '../../util/util';
export const DEFAULT_INPUTS_O_FILTER_BUILDER = [
    'filters',
    'targetCmp: target',
    'expressionBuilder: expression-builder',
    'queryOnChange: query-on-change',
    'queryOnChangeDelay: query-on-change-delay'
];
export const DEFAULT_OUTPUTS_O_FILTER_BUILDER = [
    'onFilter',
    'onClear'
];
export class OFilterBuilderComponent {
    constructor(form, injector) {
        this.form = form;
        this.onFilter = new EventEmitter();
        this.onClear = new EventEmitter();
        this.queryOnChange = false;
        this.queryOnChangeDelay = 0;
        this.filterComponents = [];
        this.subscriptions = new Subscription();
    }
    ngOnInit() {
        this.initialize();
    }
    ngAfterViewInit() {
        this.initializeListeners();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    initialize() {
        if (this.filters) {
            const filterArray = Util.parseArray(this.filters);
            filterArray.forEach(filter => {
                const filterElms = filter.split(Codes.COLUMNS_ALIAS_SEPARATOR);
                this.filterComponents.push({
                    targetAttr: filterElms[0],
                    formComponentAttr: filterElms[1] ? filterElms[1] : filterElms[0]
                });
            });
        }
        if (Util.isDefined(this.targetCmp)) {
            this.targetCmp.setFilterBuilder(this);
        }
    }
    initializeListeners() {
        if (this.queryOnChange) {
            this.filterComponents.forEach((filterComponent) => {
                const formComponent = this.form.getComponents()[filterComponent.formComponentAttr];
                if (formComponent) {
                    this.subscriptions.add(formComponent.getFormControl().valueChanges
                        .pipe(debounceTime(this.queryOnChangeDelay))
                        .subscribe(a => this.triggerReload()));
                }
            });
        }
    }
    getExpression() {
        const formComponents = this.form.getComponents();
        const params = [];
        this.filterComponents.forEach((filterComponent) => {
            const formComponent = formComponents[filterComponent.formComponentAttr];
            const value = formComponent.getValue();
            params.push({
                attr: filterComponent.targetAttr,
                value: value
            });
        });
        if (this.expressionBuilder) {
            return this.expressionBuilder(params);
        }
        const expressions = [];
        params.forEach(elem => {
            if (Util.isDefined(elem.value)) {
                expressions.push(FilterExpressionUtils.buildExpressionEquals(elem.attr, elem.value));
            }
        });
        return expressions.length ? expressions.reduce((fe1, fe2) => FilterExpressionUtils.buildComplexExpression(fe1, fe2, FilterExpressionUtils.OP_OR)) : undefined;
    }
    getBasicExpression() {
        return FilterExpressionUtils.buildBasicExpression(this.getExpression());
    }
    getTargetComponent() {
        return this.targetCmp;
    }
    triggerReload() {
        if (!this.targetCmp) {
            return;
        }
        if (this.targetCmp.pageable) {
            this.targetCmp.reloadPaginatedDataFromStart();
        }
        else {
            this.targetCmp.reloadData();
        }
        this.onFilter.emit();
    }
    clearFilter() {
        const formComponents = this.form.getComponents();
        this.getFilterAttrs().forEach((attr) => {
            formComponents[attr].setValue(void 0);
        });
        this.onClear.emit();
    }
    getFilterAttrs() {
        return this.filterComponents.map((elem) => elem.formComponentAttr);
    }
}
OFilterBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-filter-builder',
                template: "",
                inputs: DEFAULT_INPUTS_O_FILTER_BUILDER,
                outputs: DEFAULT_OUTPUTS_O_FILTER_BUILDER
            }] }
];
OFilterBuilderComponent.ctorParameters = () => [
    { type: OFormComponent, decorators: [{ type: Inject, args: [forwardRef(() => OFormComponent),] }] },
    { type: Injector }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFilterBuilderComponent.prototype, "queryOnChange", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Number)
], OFilterBuilderComponent.prototype, "queryOnChangeDelay", void 0);
//# sourceMappingURL=data:application/json;base64,