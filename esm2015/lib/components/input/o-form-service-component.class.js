import * as tslib_1 from "tslib";
import { EventEmitter, NgZone } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { InputConverter } from '../../decorators/input-converter';
import { DialogService } from '../../services/dialog.service';
import { OntimizeService } from '../../services/ontimize/ontimize.service';
import { Codes } from '../../util/codes';
import { ServiceUtils } from '../../util/service.utils';
import { Util } from '../../util/util';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent, } from '../o-form-data-component.class';
export const DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT = [
    ...DEFAULT_INPUTS_O_FORM_DATA_COMPONENT,
    'staticData: static-data',
    'entity',
    'service',
    'columns',
    'valueColumn: value-column',
    'valueColumnType: value-column-type',
    'parentKeys: parent-keys',
    'visibleColumns: visible-columns',
    'descriptionColumns: description-columns',
    'separator',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'queryMethod: query-method',
    'serviceType: service-type',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'setValueOnValueChange: set-value-on-value-change',
    'queryFallbackFunction: query-fallback-function'
];
export const DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT = [
    ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT,
    'onSetValueOnValueChange',
    'onDataLoaded'
];
export class OFormServiceComponent extends OFormDataComponent {
    constructor(form, elRef, injector) {
        super(form, elRef, injector);
        this.valueColumnType = Codes.TYPE_INT;
        this.separator = Codes.SPACE_SEPARATOR;
        this.queryOnInit = true;
        this.queryOnBind = false;
        this.queryMethod = Codes.QUERY_METHOD;
        this.queryWithNullParentKeys = false;
        this.onSetValueOnValueChange = new EventEmitter();
        this.onDataLoaded = new EventEmitter();
        this.dataArray = [];
        this.colArray = [];
        this.visibleColArray = [];
        this.descriptionColArray = [];
        this.loading = false;
        this.cacheQueried = false;
        this._pKeysEquiv = {};
        this._setValueOnValueChangeEquiv = {};
        this.delayLoad = 250;
        this.loadingSubject = new BehaviorSubject(false);
        this.form = form;
        this.elRef = elRef;
        this.dialogService = injector.get(DialogService);
    }
    initialize() {
        super.initialize();
        this.cacheQueried = false;
        this.colArray = Util.parseArray(this.columns, true);
        this.visibleColArray = Util.parseArray(this.visibleColumns, true);
        if (Util.isArrayEmpty(this.visibleColArray)) {
            this.visibleColumns = this.columns;
            this.visibleColArray = this.colArray;
        }
        this.descriptionColArray = Util.parseArray(this.descriptionColumns);
        if (Util.isArrayEmpty(this.descriptionColArray)) {
            this.descriptionColArray = this.visibleColArray;
        }
        const pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        const setValueSetArray = Util.parseArray(this.setValueOnValueChange);
        this._setValueOnValueChangeEquiv = Util.parseParentKeysEquivalences(setValueSetArray);
        if (this.form && this.queryOnBind) {
            const self = this;
            this._formDataSubcribe = this.form.onDataLoaded.subscribe(() => self.queryData());
        }
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.queryOnEvent !== undefined && this.queryOnEvent.subscribe !== undefined) {
            const self = this;
            this.queryOnEventSubscription = this.queryOnEvent.subscribe((value) => {
                if (Util.isDefined(value) || this.queryWithNullParentKeys) {
                    self.queryData();
                }
            });
        }
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    }
    destroy() {
        super.destroy();
        if (this._formDataSubcribe) {
            this._formDataSubcribe.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
    }
    emitOnValueChange(type, newValue, oldValue) {
        super.emitOnValueChange(type, newValue, oldValue);
        const record = this.getSelectedRecord();
        this.onSetValueOnValueChange.emit(record);
        const setValueSetKeys = Object.keys(this._setValueOnValueChangeEquiv);
        if (setValueSetKeys.length) {
            const formComponents = this.form.getComponents();
            if (Util.isDefined(record)) {
                setValueSetKeys.forEach(key => {
                    const comp = formComponents[this._setValueOnValueChangeEquiv[key]];
                    if (Util.isDefined(comp)) {
                        comp.setValue(record[key]);
                    }
                });
            }
        }
    }
    configureService() {
        let loadingService = OntimizeService;
        if (this.serviceType) {
            loadingService = this.serviceType;
        }
        try {
            this.dataService = this.injector.get(loadingService);
            if (Util.isDataService(this.dataService)) {
                const serviceCfg = this.dataService.getDefaultServiceConfiguration(this.service);
                if (this.entity) {
                    serviceCfg.entity = this.entity;
                }
                this.dataService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    }
    getAttributesValuesToQuery(columns) {
        const result = Util.isDefined(columns) ? columns : this.colArray;
        if (result.indexOf(this.valueColumn) === -1) {
            result.push(this.valueColumn);
        }
        return result;
    }
    queryData(filter) {
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        filter = Object.assign(filter || {}, ServiceUtils.getParentKeysFromForm(this._pKeysEquiv, this.form));
        if (!ServiceUtils.filterContainsAllParentKeys(filter, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setDataArray([]);
        }
        else {
            if (this.querySuscription) {
                this.querySuscription.unsubscribe();
            }
            if (this.loaderSubscription) {
                this.loaderSubscription.unsubscribe();
            }
            const queryCols = this.getAttributesValuesToQuery();
            this.loaderSubscription = this.load();
            this.querySuscription = this.dataService[this.queryMethod](filter, queryCols, this.entity)
                .subscribe((resp) => {
                if (resp.isSuccessful()) {
                    this.cacheQueried = true;
                    this.setDataArray(resp.data);
                }
                this.loadingSubject.next(false);
                this.loaderSubscription.unsubscribe();
            }, err => {
                console.error(err);
                this.loadingSubject.next(false);
                this.loaderSubscription.unsubscribe();
                if (Util.isDefined(this.queryFallbackFunction)) {
                    this.queryFallbackFunction(err);
                }
                else if (err && !Util.isObject(err)) {
                    this.dialogService.alert('ERROR', err);
                }
                else {
                    this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
                }
            });
        }
    }
    getDataArray() {
        return this.dataArray;
    }
    setDataArray(data) {
        if (Util.isArray(data)) {
            this.dataArray = data;
            this.syncDataIndex(false);
        }
        else if (Util.isObject(data) && Object.keys(data).length > 0) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or not empty Object');
            this.dataArray = [];
        }
        this.onDataLoaded.emit(this.dataArray);
    }
    syncDataIndex(queryIfNotFound = true) {
        this._currentIndex = undefined;
        if (this.value && this.value.value && this.dataArray) {
            const self = this;
            this.dataArray.forEach((item, index) => {
                if (this.value.value instanceof Array) {
                    this._currentIndex = [];
                    this.value.value.forEach((itemValue, indexValue) => {
                        if (item[self.valueColumn] === itemValue) {
                            this._currentIndex[this._currentIndex.length] = indexValue;
                        }
                    });
                }
                else if (item[self.valueColumn] === this.value.value) {
                    self._currentIndex = index;
                }
                if (item[self.valueColumn] === this.value.value) {
                    self._currentIndex = index;
                }
            });
            if (this._currentIndex === undefined && queryIfNotFound) {
                if (this.queryOnBind && this.dataArray && this.dataArray.length === 0
                    && !this.cacheQueried && !this.isEmpty()) {
                    this.queryData();
                }
                return;
            }
        }
    }
    parseByValueColumnType(val) {
        let value = val;
        if (this.valueColumnType === Codes.TYPE_INT) {
            const parsed = parseInt(value, 10);
            if (!isNaN(parsed)) {
                value = parsed;
            }
        }
        return value;
    }
    setValue(val, options) {
        const value = this.parseByValueColumnType(val);
        super.setValue(value, options);
    }
    setData(val) {
        const value = this.parseByValueColumnType(val);
        super.setData(value);
    }
    getSelectedRecord() {
        let result;
        const selectedValue = this.getValue();
        if (Util.isDefined(selectedValue)) {
            result = this.getDataArray().find(item => item[this.valueColumn] === selectedValue);
        }
        return result;
    }
    load() {
        const self = this;
        const zone = this.injector.get(NgZone);
        const loadObservable = new Observable(observer => {
            const timer = window.setTimeout(() => {
                observer.next(true);
            }, self.delayLoad);
            return () => {
                window.clearTimeout(timer);
                zone.run(() => {
                    observer.next(false);
                    self.loading = false;
                });
            };
        });
        const subscription = loadObservable.subscribe(val => {
            zone.run(() => {
                self.loading = val;
                self.loadingSubject.next(val);
            });
        });
        return subscription;
    }
    onFormControlChange(value) {
        if (this.oldValue === value) {
            return;
        }
        super.onFormControlChange(value);
    }
}
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "queryOnInit", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "queryOnBind", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OFormServiceComponent.prototype, "queryWithNullParentKeys", void 0);
//# sourceMappingURL=data:application/json;base64,