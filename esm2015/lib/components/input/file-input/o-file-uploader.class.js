import { Codes } from '../../../util/codes';
export class OFileUploader {
    constructor(service, entity) {
        this.service = service;
        this.files = [];
        this.isUploading = false;
        this.progress = 0;
        this.nextIndex = 0;
        this.splitUpload = true;
        this.entity = entity;
    }
    addFile(fileItem) {
        this.files.push(fileItem);
        this.progress = this._getTotalProgress();
    }
    clear() {
        this.cancel();
        while (this.files.length) {
            this.files[0].remove();
        }
        this.progress = 0;
    }
    removeFile(value) {
        const index = this.getIndexOfItem(value);
        const item = this.files[index];
        if (item) {
            if (item.isUploading) {
                item.cancel();
            }
            this.files.splice(index, 1);
            this.progress = this._getTotalProgress();
        }
    }
    upload() {
        this.files.forEach((item) => {
            if (item.pendingUpload) {
                item.prepareToUpload();
            }
        });
        if (this.splitUpload) {
            this.files.forEach((item) => {
                if (item.pendingUpload) {
                    this.uploadItem(item);
                }
            });
        }
        else {
            this.uploadItems(this.files);
        }
    }
    uploadItem(item) {
        item.prepareToUpload();
        if (this.isUploading || item.isUploading) {
            return;
        }
        this.isUploading = true;
        item.isUploading = true;
        this._onBeforeUploadItem(item);
        if (this.service === undefined) {
            console.warn('No service configured! aborting upload');
            return;
        }
        if (this._uploadSuscription) {
            this._uploadSuscription.unsubscribe();
        }
        const self = this;
        this._uploadSuscription = item._uploadSuscription = this.service.upload([item], this.entity, this.data).subscribe(resp => {
            if (resp.loaded && resp.total) {
                const progress = Math.round(resp.loaded * 100 / resp.total);
                self._onProgressItem(item, progress);
            }
            else if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self._onSuccessItem(item, resp);
            }
            else {
                console.error('uploadItem error');
                self._onErrorItem(item, 'Unknow error');
            }
        }, err => self._onErrorItem(item, err), () => self._onCompleteItem(item));
    }
    uploadItems(items) {
        if (this.isUploading || items.some(item => item.isUploading)) {
            return;
        }
        this.isUploading = true;
        this._onBeforeUploadAll();
        if (this.service === undefined) {
            console.warn('No service configured! aborting upload');
            return;
        }
        if (this._uploadSuscription) {
            this._uploadSuscription.unsubscribe();
        }
        const self = this;
        this._uploadSuscription = this.service.upload(items, this.entity, this.data).subscribe(resp => {
            if (resp.loaded && resp.total) {
                const progress = Math.round(resp.loaded * 100 / resp.total);
                self._onProgressAll(progress);
            }
            else if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self._onSuccessAll(resp);
            }
            else {
                console.error('uploadItems error');
            }
        }, err => self._onErrorAll(err), () => self._onCompleteAll());
    }
    cancel() {
        if (this.splitUpload) {
            this.files.forEach(item => item.cancel());
        }
        else {
            if (this._uploadSuscription) {
                this._uploadSuscription.unsubscribe();
            }
            this._onCancelAll();
            this._onCompleteAll();
        }
    }
    cancelItem(value) {
        const index = this.getIndexOfItem(value);
        const item = this.files[index];
        if (item && item.isUploading && this.splitUpload) {
            item._uploadSuscription.unsubscribe();
        }
        this._onCancelItem(item);
        this._onCompleteItem(item);
    }
    getNotUploadedItems() {
        return this.files.filter((item) => !item.isUploaded);
    }
    getIndexOfItem(value) {
        return typeof value === 'number' ? value : this.files.indexOf(value);
    }
    onBeforeUploadItem(fileItem) {
        return { fileItem };
    }
    onBeforeUploadAll() {
        return {};
    }
    onProgressItem(fileItem, progress) {
        return { fileItem, progress };
    }
    onProgressAll(progress) {
        return { progress };
    }
    onCancelItem(fileItem) {
        return { fileItem };
    }
    onCancelAll() {
        return {};
    }
    onSuccessItem(fileItem, response) {
        return { fileItem, response };
    }
    onSuccessAll(response) {
        return { response };
    }
    onErrorItem(fileItem, error) {
        return { fileItem, error };
    }
    onErrorAll(error) {
        return { error };
    }
    onCompleteItem(fileItem) {
        return { fileItem };
    }
    onCompleteAll() {
        return void 0;
    }
    _onBeforeUploadItem(item) {
        item._onBeforeUpload();
        this.onBeforeUploadItem(item);
    }
    _onBeforeUploadAll() {
        this.files.forEach(item => item._onBeforeUpload(false));
        this.onBeforeUploadAll();
    }
    _onProgressItem(item, progress) {
        const total = this._getTotalProgress(progress);
        this.progress = total;
        item._onProgress(progress);
        this.onProgressItem(item, progress);
        this.onProgressAll(total);
    }
    _onProgressAll(progress) {
        const total = this._getTotalProgress(progress);
        this.progress = total;
        this.onProgressAll(total);
    }
    _onSuccessItem(item, response) {
        item._onSuccess(response);
        this.onSuccessItem(item, response);
    }
    _onSuccessAll(response) {
        this.files.forEach(item => item._onSuccess(response, false));
        this.onSuccessAll(response);
    }
    _onErrorItem(item, error) {
        item._onError(error);
        this.onErrorItem(item, error);
    }
    _onErrorAll(error) {
        this.files.forEach(item => item._onError(error, false));
        this.onErrorAll(error);
    }
    _onCancelItem(item) {
        item._onCancel();
        this.onCancelItem(item);
    }
    _onCancelAll() {
        this.files.forEach(item => item._onCancel(false));
        this.onCancelAll();
    }
    _onCompleteItem(item) {
        item._onComplete();
        this.onCompleteItem(item);
        const nextItem = this._getReadyItems()[0];
        this.isUploading = false;
        if (nextItem) {
            nextItem.upload();
            return;
        }
        this.onCompleteAll();
        this.progress = this._getTotalProgress();
    }
    _onCompleteAll() {
        this.files.forEach(item => item._onComplete(false));
        this.isUploading = false;
        this.onCompleteAll();
        this.progress = this._getTotalProgress();
    }
    _getReadyItems() {
        return this.files
            .filter((item) => (item.isReady && !item.isUploading))
            .sort((item1, item2) => item1.index - item2.index);
    }
    _getTotalProgress(value = 0) {
        const notUploaded = this.getNotUploadedItems().length;
        const uploaded = notUploaded ? this.files.length - notUploaded : this.files.length;
        const ratio = this.splitUpload ? 100 / this.files.length : 100;
        const current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    }
}
//# sourceMappingURL=data:application/json;base64,