export class OFileItem {
    constructor(file, uploader) {
        this.index = void 0;
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this._file = file;
        this.uploader = uploader;
    }
    upload() {
        this.uploader.uploadItem(this);
    }
    cancel() {
        this.uploader.cancelItem(this);
    }
    remove() {
        this.uploader.removeFile(this);
    }
    prepareToUpload() {
        this.index = this.index || ++this.uploader.nextIndex;
        this.isReady = true;
    }
    get file() {
        return this._file;
    }
    get name() {
        return this._file.name;
    }
    get size() {
        return this._file.size;
    }
    get type() {
        return this._file.type;
    }
    get lastModifiedDate() {
        return this._file.lastModified;
    }
    _onBeforeUpload(notify = true) {
        this.isReady = true;
        this.isUploading = true;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        if (notify) {
            this.onBeforeUpload();
        }
    }
    _onProgress(progress) {
        this.progress = progress;
        this.onProgress(progress);
    }
    _onSuccess(data, notify = true) {
        this.index = void 0;
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        if (notify) {
            this.onSuccess(data);
        }
    }
    _onError(error, notify = true) {
        this.index = void 0;
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        if (notify) {
            this.onError(error);
        }
    }
    _onCancel(notify = true) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        if (notify) {
            this.onCancel();
        }
    }
    _onComplete(notify = true) {
        if (notify) {
            this.onComplete();
        }
    }
    onBeforeUpload() {
        return {};
    }
    onProgress(progress) {
        return { progress };
    }
    onSuccess(data) {
        return { data };
    }
    onError(error) {
        return { error };
    }
    onCancel() {
        return {};
    }
    onComplete() {
        return {};
    }
    get pendingUpload() {
        return !this.isUploaded && !this.isUploading && !this.isCancel;
    }
}
//# sourceMappingURL=data:application/json;base64,