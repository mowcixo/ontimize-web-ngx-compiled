import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export const DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = [
    'columns',
    'preloadValues: preload-values',
    'mode'
];
export const DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = [];
export class OTableColumnsFilterComponent {
    constructor(injector, table) {
        this.injector = injector;
        this.table = table;
        this._mode = 'default';
        this.preloadValues = true;
        this._columnsArray = [];
        this.columnsComparisonProperty = {};
    }
    get mode() {
        return this._mode;
    }
    set mode(val) {
        const m = OTableColumnsFilterComponent.OTableColumnsFilterModes.find(e => e === val);
        if (Util.isDefined(m)) {
            this._mode = m;
        }
        else {
            console.error('Invalid `o-table-columns-filter` mode (' + val + ')');
        }
    }
    ngOnInit() {
        if (this.columnsArray.length === 0) {
            this.columnsArray = this.table.oTableOptions.visibleColumns;
        }
        const self = this;
        this.columnsArray.forEach((colData, i, arr) => {
            const colDef = colData.split(Codes.TYPE_SEPARATOR);
            const colName = colDef[0];
            let compType = (colDef[1] || '').toUpperCase();
            if ([OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE, OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE].indexOf(compType) === -1) {
                compType = OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE;
            }
            arr[i] = colName;
            self.columnsComparisonProperty[colName] = compType;
        });
        this.table.setOTableColumnsFilter(this);
    }
    isColumnFilterable(attr) {
        return (this.columnsArray.indexOf(attr) !== -1);
    }
    getColumnComparisonValue(column, val) {
        if (!column || this.columnsComparisonProperty[column.attr] === OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE) {
            return val;
        }
        else {
            return column.renderer ? column.renderer.getCellData(val) : val;
        }
    }
    set columns(arg) {
        this._columns = arg;
        this._columnsArray = Util.parseArray(this._columns, true);
    }
    set columnsArray(arg) {
        this._columnsArray = arg;
    }
    get columnsArray() {
        return this._columnsArray;
    }
}
OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE = 'VIEW';
OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE = 'MODEL';
OTableColumnsFilterComponent.OTableColumnsFilterModes = ['default', 'selection', 'custom'];
OTableColumnsFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-columns-filter',
                template: ' ',
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER,
                outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER
            }] }
];
OTableColumnsFilterComponent.ctorParameters = () => [
    { type: Injector },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableColumnsFilterComponent.prototype, "preloadValues", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], OTableColumnsFilterComponent.prototype, "mode", null);
//# sourceMappingURL=data:application/json;base64,