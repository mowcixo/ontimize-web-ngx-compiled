import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector, ContentChildren, QueryList } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Codes } from '../../../../../util/codes';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
import { OTableColumnsFilterColumnComponent } from './columns/o-table-columns-filter-column.component';
export const DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = [
    'columns',
    'preloadValues: preload-values',
    'mode'
];
export const DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = [];
export class OTableColumnsFilterComponent {
    constructor(injector, table) {
        this.injector = injector;
        this.table = table;
        this._mode = 'default';
        this.preloadValues = true;
        this._columnsArray = [];
        this.columnsComparisonProperty = {};
    }
    get mode() {
        return this._mode;
    }
    set mode(val) {
        const m = OTableColumnsFilterComponent.OTableColumnsFilterModes.find(e => e === val);
        if (Util.isDefined(m)) {
            this._mode = m;
        }
        else {
            console.error('Invalid `o-table-columns-filter` mode (' + val + ')');
        }
    }
    ngOnInit() {
        if (this.columnsArray.length === 0) {
            this.columnsArray = this.table.oTableOptions.visibleColumns;
        }
        const self = this;
        let columns = Util.parseArray(this._columns, true);
        columns.forEach((colData, i, arr) => {
            const colDef = colData.split(Codes.TYPE_SEPARATOR);
            const colName = colDef[0];
            let compType = (colDef[1] || '').toUpperCase();
            if ([OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE, OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE].indexOf(compType) === -1) {
                compType = OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE;
            }
            arr[i] = colName;
            self.columnsComparisonProperty[colName] = compType;
        });
        this.table.setOTableColumnsFilter(this);
    }
    ngAfterContentInit() {
        if (Util.isDefined(this.filterColumns)) {
            this.columnsArray = this.columnsArray.concat(this.parseFilterColumns(this.filterColumns));
        }
    }
    isColumnFilterable(attr) {
        return Util.isDefined(this.columnsArray.find(x => x.attr === attr));
    }
    getSortValueOfFilterColumn(attr) {
        let sortValue = '';
        if (Util.isDefined(this.columnsArray) && this.columnsArray.find(x => x.attr === attr)) {
            sortValue = this.columnsArray.find(x => x.attr === attr).sort;
        }
        return sortValue;
    }
    getColumnComparisonValue(column, val) {
        if (!column || this.columnsComparisonProperty[column.attr] === OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE) {
            return val;
        }
        else {
            return column.renderer ? column.renderer.getCellData(val) : val;
        }
    }
    set columns(arg) {
        this._columns = arg;
        this._columnsArray = this.parseColumns(this._columns);
    }
    set columnsArray(arg) {
        this._columnsArray = arg;
    }
    get columnsArray() {
        return this._columnsArray;
    }
    parseColumns(columns) {
        return columns.split(';')
            .map(x => {
            let obj = { attr: '', sort: '' };
            obj.attr = x;
            obj.sort = '';
            return obj;
        });
    }
    parseFilterColumns(columns) {
        return columns
            .map(x => {
            let obj = { attr: '', sort: '' };
            obj.attr = x.attr;
            obj.sort = x.sort;
            return obj;
        });
    }
}
OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE = 'VIEW';
OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE = 'MODEL';
OTableColumnsFilterComponent.OTableColumnsFilterModes = ['default', 'selection', 'custom'];
OTableColumnsFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-columns-filter',
                template: ' ',
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER,
                outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER
            }] }
];
OTableColumnsFilterComponent.ctorParameters = () => [
    { type: Injector },
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] }
];
OTableColumnsFilterComponent.propDecorators = {
    filterColumns: [{ type: ContentChildren, args: [OTableColumnsFilterColumnComponent, { descendants: true },] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableColumnsFilterComponent.prototype, "preloadValues", void 0);
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], OTableColumnsFilterComponent.prototype, "mode", null);
//# sourceMappingURL=data:application/json;base64,