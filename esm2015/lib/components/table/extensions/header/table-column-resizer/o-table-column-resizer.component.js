import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostListener, Inject, NgZone, Renderer2, ViewEncapsulation, } from '@angular/core';
import { InputConverter } from '../../../../../decorators/input-converter';
import { Util } from '../../../../../util/util';
import { OTableComponent } from '../../../o-table.component';
export const DEFAULT_INPUTS_O_TABLE_COLUMN_RESIZER = [
    'column'
];
export const DEFAULT_OUTPUTS_O_TABLE_COLUMN_RESIZER = [];
export class OTableColumnResizerComponent {
    constructor(table, elRef, ngZone, renderer) {
        this.table = table;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.disabled = false;
        this.dragListeners = [];
        this.isResizing = false;
        this.blockedMinCols = [];
        this.blockedMaxCols = [];
        this.columnsStartWidth = {};
    }
    ngOnInit() {
        if (!this.isDisabled) {
            this.headerEl = this.getHeaderEL();
            if (this.headerEl) {
                this.nextOColumns = this.getFollowingOColumns();
            }
        }
    }
    ngOnDestroy() {
        this.stopDragging();
    }
    onClick(event) {
        event.stopPropagation();
        event.preventDefault();
    }
    get isDisabled() {
        return this.column && !this.column.resizable;
    }
    onMousedown(e) {
        if (!this.isDisabled) {
            this.startResize(e);
        }
    }
    onMouseup() {
        this.isResizing = false;
        this.stopDragging();
    }
    stopDragging() {
        this.isResizing = false;
        this.columnsStartWidth = {};
        while (this.dragListeners.length > 0) {
            const fct = this.dragListeners.pop();
            if (fct) {
                fct();
            }
        }
    }
    startResize(startEvent) {
        startEvent.preventDefault();
        startEvent.stopPropagation();
        if (!Util.isDefined(this.headerEl)) {
            return;
        }
        this.startX = startEvent.screenX;
        this.startWidth = this.column.DOMWidth;
        this.minWidth = this.column.getMinWidthValue();
        this.initializeWidthData();
        this.ngZone.runOutsideAngular(() => {
            this.dragListeners.push(this.renderer.listen('document', 'mouseup', (e) => this.stopDragging()));
        });
        if (!(startEvent instanceof MouseEvent)) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.dragListeners.push(this.renderer.listen('document', 'mousemove', (e) => this.resizeEvent(e)));
        });
        this.isResizing = true;
    }
    resizeEvent(event) {
        if (!this.isResizing || !(event instanceof MouseEvent)) {
            return;
        }
        const movementX = (event.screenX - this.startX);
        if (movementX === 0) {
            return;
        }
        const newColumnWidth = this.startWidth + movementX;
        const lessThanMin = newColumnWidth < this.minWidth;
        const moreThanMax = newColumnWidth > this.maxWidth;
        if (lessThanMin || moreThanMax) {
            return;
        }
        if (!this.table.horizontalScroll) {
            this.calculateNewColumnsWidth(movementX, newColumnWidth);
            this.updateBlockedCols();
        }
        else {
            this.column.setWidth(newColumnWidth);
        }
        this.table.cd.detectChanges();
    }
    getHeaderEL() {
        let element;
        let currentEl = this.elRef.nativeElement.parentElement;
        while (!element && currentEl) {
            if (currentEl.nodeName === 'TH') {
                element = currentEl;
            }
            else {
                currentEl = currentEl.parentElement;
            }
        }
        return currentEl;
    }
    getFollowingOColumns() {
        const result = [];
        let nextTh = this.headerEl.nextSibling;
        const self = this;
        while (nextTh) {
            const oCol = self.table.getOColumnFromTh(nextTh);
            if (Util.isDefined(oCol)) {
                result.push(oCol);
            }
            nextTh = nextTh.nextSibling;
        }
        return result;
    }
    updateBlockedCols() {
        const self = this;
        this.blockedMinCols = [];
        this.blockedMaxCols = [];
        const columns = [this.column, ...this.nextOColumns];
        columns.forEach(oCol => {
            if (oCol.DOMWidth <= oCol.getMinWidthValue()) {
                self.blockedMinCols.push(oCol.attr);
            }
            const maxW = oCol.getMaxWidthValue();
            if (Util.isDefined(maxW) && oCol.DOMWidth >= maxW) {
                self.blockedMaxCols.push(oCol.attr);
            }
        });
    }
    calculateNewColumnsWidth(movementX, newColumnWidth) {
        const positive = (movementX > 0);
        if (positive) {
            this.calculateUsingNextColumnsRestrictions(movementX, newColumnWidth);
        }
        else {
            this.calculateUsingOwnColumnRestriction(movementX, newColumnWidth);
        }
    }
    calculateUsingNextColumnsRestrictions(movementX, newColumnWidth) {
        const availableCols = this.nextOColumns.length - this.blockedMinCols.length;
        if (availableCols <= 0) {
            return;
        }
        const widthRatio = movementX / availableCols;
        const cols = this.nextOColumns.filter((oCol) => this.blockedMinCols.indexOf(oCol.attr) === -1);
        cols.forEach(oCol => {
            let newWidth = (this.columnsStartWidth[oCol.attr] - widthRatio);
            const minWidth = oCol.getMinWidthValue();
            if (newWidth <= minWidth) {
                newWidth = minWidth;
                this.blockedMinCols.push(oCol.attr);
            }
            oCol.setWidth(newWidth);
        });
        this.column.setWidth(newColumnWidth);
    }
    calculateUsingOwnColumnRestriction(movementX, newColumnWidth) {
        let widthRatio = Math.abs(movementX) / this.nextOColumns.length;
        let widthDifference = 0;
        if (widthRatio > 0 && this.blockedMaxCols.length < this.nextOColumns.length) {
            const cols = this.nextOColumns.filter((oCol) => this.blockedMaxCols.indexOf(oCol.attr) === -1);
            cols.forEach(oCol => {
                let newWidthValue = (this.columnsStartWidth[oCol.attr] + widthRatio);
                const maxWidth = oCol.getMaxWidthValue();
                if (maxWidth && newWidthValue > maxWidth) {
                    const diff = newWidthValue - maxWidth;
                    newWidthValue = maxWidth;
                    this.blockedMaxCols.push(oCol.attr);
                    const notBlocked = this.nextOColumns.length - this.blockedMaxCols.length;
                    widthRatio += notBlocked > 0 ? Math.floor(diff / notBlocked) : 0;
                }
                widthDifference += newWidthValue - oCol.DOMWidth;
                oCol.setWidth(newWidthValue);
            });
        }
        const newWidth = Math.min(this.startWidth - widthDifference, newColumnWidth);
        this.column.setWidth(newWidth);
    }
    initializeWidthData() {
        let maxWidth = this.column.getMaxWidthValue();
        let nextColMinWidthAcum = 0;
        let nextColWidthAcum = 0;
        this.nextOColumns.forEach((col) => {
            nextColMinWidthAcum += col.getMinWidthValue();
            nextColWidthAcum += col.DOMWidth;
            this.columnsStartWidth[col.attr] = col.DOMWidth;
        });
        const calcMaxWidth = this.headerEl.clientWidth + (nextColWidthAcum - nextColMinWidthAcum);
        if (Util.isDefined(maxWidth)) {
            maxWidth = Math.min(maxWidth, calcMaxWidth);
        }
        else {
            maxWidth = calcMaxWidth;
        }
        this.maxWidth = maxWidth;
    }
}
OTableColumnResizerComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-column-resizer',
                inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_RESIZER,
                outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_RESIZER,
                template: "<span class=\"resizer\" (click)=\"onClick($event)\"></span>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.o-table-column-resizer]': 'true',
                    '[class.disabled]': 'isDisabled',
                },
                styles: [".o-table-column-resizer{display:inline-block;width:13px;position:absolute;right:0;top:6px;bottom:6px}.o-table-column-resizer:not(.disabled){cursor:col-resize}.o-table-column-resizer span{height:100%;width:1px;display:block;margin-left:auto;margin-right:auto}.o-table-column-resizer.disabled{cursor:default}"]
            }] }
];
OTableColumnResizerComponent.ctorParameters = () => [
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
OTableColumnResizerComponent.propDecorators = {
    onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
tslib_1.__decorate([
    InputConverter(),
    tslib_1.__metadata("design:type", Boolean)
], OTableColumnResizerComponent.prototype, "disabled", void 0);
//# sourceMappingURL=data:application/json;base64,