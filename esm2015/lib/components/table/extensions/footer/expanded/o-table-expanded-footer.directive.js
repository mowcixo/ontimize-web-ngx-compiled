import { Directive, ElementRef, forwardRef, Inject, Injector, Renderer2 } from '@angular/core';
import { OTranslateService } from '../../../../../services/translate/o-translate.service';
import { OTableComponent } from './../../../o-table.component';
export class OTableExpandedFooterDirective {
    constructor(table, element, renderer, injector) {
        this.table = table;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.translateService = this.injector.get(OTranslateService);
    }
    ngAfterViewInit() {
        if (this.element.nativeElement.childNodes[2]) {
            this.tableBody = this.element.nativeElement.childNodes[1];
            this.tableHeader = this.element.nativeElement.childNodes[0];
        }
        this.registerContentChange();
        this.registerVisibleColumnsChange();
    }
    registerContentChange() {
        let tr = this.renderer.createElement('tr');
        this.tdTableWithMessage = this.renderer.createElement('td');
        this.renderer.addClass(tr, 'o-table-no-results');
        tr.appendChild(this.tdTableWithMessage);
        this.renderer.appendChild(this.tableBody, tr);
        const self = this;
        this.onContentChangeSubscription = this.table.onContentChange.subscribe((data) => {
            self.updateMessageNotResults(data);
            self.table.cd.detectChanges();
        });
    }
    registerVisibleColumnsChange() {
        const self = this;
        this.onVisibleColumnsChangeSubscription = this.table.onVisibleColumnsChange.subscribe(() => {
            self.updateColspanTd();
        });
    }
    updateMessageNotResults(data) {
        if (this.spanMessageNotResults) {
            this.renderer.removeChild(this.element.nativeElement, this.spanMessageNotResults);
        }
        if (data.length === 0) {
            let result = '';
            result = this.translateService.get('TABLE.EMPTY');
            if (this.table.quickFilter && this.table.oTableQuickFilterComponent &&
                this.table.oTableQuickFilterComponent.value && this.table.oTableQuickFilterComponent.value.length > 0) {
                result += this.translateService.get('TABLE.EMPTY_USING_FILTER', [(this.table.oTableQuickFilterComponent.value)]);
            }
            this.spanMessageNotResults = this.renderer.createElement('span');
            let messageNotResults = this.renderer.createText(result);
            this.tdTableWithMessage.setAttribute('colspan', this.tableHeader.querySelectorAll('th').length);
            this.renderer.appendChild(this.spanMessageNotResults, messageNotResults);
            this.renderer.appendChild(this.tdTableWithMessage, this.spanMessageNotResults);
        }
    }
    updateColspanTd() {
        if (this.tdTableWithMessage) {
            this.tdTableWithMessage.setAttribute('colspan', this.tableHeader.querySelectorAll('th').length);
        }
    }
    destroy() {
        if (this.onContentChangeSubscription) {
            this.onContentChangeSubscription.unsubscribe();
        }
        if (this.onVisibleColumnsChangeSubscription) {
            this.onVisibleColumnsChangeSubscription.unsubscribe();
        }
    }
}
OTableExpandedFooterDirective.decorators = [
    { type: Directive, args: [{
                selector: '[oTableExpandedFooter]'
            },] }
];
OTableExpandedFooterDirective.ctorParameters = () => [
    { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(() => OTableComponent),] }] },
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,