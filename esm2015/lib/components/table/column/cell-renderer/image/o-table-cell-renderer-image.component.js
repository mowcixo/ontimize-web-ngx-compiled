import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE = [
    ...DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER,
    'imageType: image-type',
    'emptyImage: empty-image',
    'avatar'
];
export const DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE = [
    'onClick'
];
export class OTableCellRendererImageComponent extends OBaseTableCellRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.tableColumn.type = 'image';
        this.tableColumn.orderable = false;
        this.tableColumn.searchable = false;
    }
    initialize() {
        super.initialize();
        if (this.table) {
            const oCol = this.table.getOColumn(this.tableColumn.attr);
            oCol.title = Util.isDefined(this.tableColumn.title) ? this.tableColumn.title : undefined;
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
    }
    getSource(cellData) {
        this._source = '';
        switch (this.imageType) {
            case 'base64':
                this._source = cellData ? ('data:image/png;base64,' + ((typeof (cellData.bytes) !== 'undefined') ? cellData.bytes : cellData)) : this.emptyImage;
                break;
            case 'url':
                this._source = cellData ? cellData : this.emptyImage;
                break;
            default:
                this._source = this.emptyImage;
                break;
        }
        return this._source;
    }
}
OTableCellRendererImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-cell-renderer-image',
                template: "<ng-template #templateref let-cellvalue=\"cellvalue\">\n  <div [ngClass]=\"{'image-avatar':avatar,'image-plain':!avatar} \">\n    <img [src]=\"getSource(cellvalue)\">\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE
            }] }
];
OTableCellRendererImageComponent.ctorParameters = () => [
    { type: Injector }
];
OTableCellRendererImageComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby10YWJsZS1jZWxsLXJlbmRlcmVyLWltYWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29udGltaXplLXdlYi1uZ3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb2x1bW4vY2VsbC1yZW5kZXJlci9pbWFnZS9vLXRhYmxlLWNlbGwtcmVuZGVyZXItaW1hZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhELE9BQU8sRUFBRSx5Q0FBeUMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXhILE1BQU0sQ0FBQyxNQUFNLDBDQUEwQyxHQUFHO0lBQ3hELEdBQUcseUNBQXlDO0lBRTVDLHVCQUF1QjtJQUV2Qix5QkFBeUI7SUFFekIsUUFBUTtDQUNULENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQ0FBMkMsR0FBRztJQUN6RCxTQUFTO0NBQ1YsQ0FBQztBQVFGLE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSxzQkFBc0I7SUFRMUUsWUFBc0IsUUFBa0I7UUFDdEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBREksYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUV0QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7UUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN0QyxDQUFDO0lBRUQsVUFBVTtRQUNSLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxNQUFNLElBQUksR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3pGLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ3ZHO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBQyxRQUFhO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUN0QixLQUFLLFFBQVE7Z0JBQ1gsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQ2pKLE1BQU07WUFDUixLQUFLLEtBQUs7Z0JBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDckQsTUFBTTtZQUNSO2dCQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDL0IsTUFBTTtTQUNUO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsOE1BQTJEO2dCQUMzRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsTUFBTSxFQUFFLDBDQUEwQzthQUNuRDs7O1lBekI0QyxRQUFROzs7MEJBZ0NsRCxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5qZWN0b3IsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE9Db2x1bW4gfSBmcm9tICcuLi8uLi9vLWNvbHVtbi5jbGFzcyc7XG5pbXBvcnQgeyBERUZBVUxUX0lOUFVUU19PX0JBU0VfVEFCTEVfQ0VMTF9SRU5ERVJFUiwgT0Jhc2VUYWJsZUNlbGxSZW5kZXJlciB9IGZyb20gJy4uL28tYmFzZS10YWJsZS1jZWxsLXJlbmRlcmVyLmNsYXNzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fVEFCTEVfQ0VMTF9SRU5ERVJFUl9JTUFHRSA9IFtcbiAgLi4uREVGQVVMVF9JTlBVVFNfT19CQVNFX1RBQkxFX0NFTExfUkVOREVSRVIsXG4gIC8vIGltYWdlLXR5cGUgW2Jhc2U2NHx1cmxdOiBpbWFnZSB0eXBlIChleHRlcm4gdXJsIG9yIGJhc2U2NCkuIERlZmF1bHQ6IG5vIHZhbHVlLlxuICAnaW1hZ2VUeXBlOiBpbWFnZS10eXBlJyxcbiAgLy8gZW1wdHktaW1hZ2UgW3N0cmluZ106IHVybCBvZiB0aGUgaW1hZ2UgdG8gYmUgc2hvd24gaWYgdGhlIGNvbHVtbiBoYXMgbm90IGFueSB2YWx1ZS4gRGVmYXVsdDogbm8gdmFsdWUuXG4gICdlbXB0eUltYWdlOiBlbXB0eS1pbWFnZScsXG4gIC8vIGF2YXRhciBbbm98eWVzXTogdmlldyBpbWFnZSBhcyBhdmF0YXIgKGNpcmNsZSksIG9ubHkgYXQgcHJlc2VudGF0aW9uIGxldmVsLiBEZWZhdWx0OiBuby5cbiAgJ2F2YXRhcidcbl07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09VVFBVVFNfT19UQUJMRV9DRUxMX1JFTkRFUkVSX0lNQUdFID0gW1xuICAnb25DbGljaydcbl07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ28tdGFibGUtY2VsbC1yZW5kZXJlci1pbWFnZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vLXRhYmxlLWNlbGwtcmVuZGVyZXItaW1hZ2UuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaW5wdXRzOiBERUZBVUxUX0lOUFVUU19PX1RBQkxFX0NFTExfUkVOREVSRVJfSU1BR0Vcbn0pXG5leHBvcnQgY2xhc3MgT1RhYmxlQ2VsbFJlbmRlcmVySW1hZ2VDb21wb25lbnQgZXh0ZW5kcyBPQmFzZVRhYmxlQ2VsbFJlbmRlcmVyIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwdWJsaWMgaW1hZ2VUeXBlOiBzdHJpbmc7XG4gIHB1YmxpYyBlbXB0eUltYWdlOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfc291cmNlOiBzdHJpbmc7XG4gIGF2YXRhcjogc3RyaW5nO1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZXJlZicsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgdGVtcGxhdGVyZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB0aGlzLnRhYmxlQ29sdW1uLnR5cGUgPSAnaW1hZ2UnO1xuICAgIHRoaXMudGFibGVDb2x1bW4ub3JkZXJhYmxlID0gZmFsc2U7XG4gICAgdGhpcy50YWJsZUNvbHVtbi5zZWFyY2hhYmxlID0gZmFsc2U7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBpZiAodGhpcy50YWJsZSkge1xuICAgICAgY29uc3Qgb0NvbDogT0NvbHVtbiA9IHRoaXMudGFibGUuZ2V0T0NvbHVtbih0aGlzLnRhYmxlQ29sdW1uLmF0dHIpO1xuICAgICAgb0NvbC50aXRsZSA9IFV0aWwuaXNEZWZpbmVkKHRoaXMudGFibGVDb2x1bW4udGl0bGUpID8gdGhpcy50YWJsZUNvbHVtbi50aXRsZSA6IHVuZGVmaW5lZDtcbiAgICAgIG9Db2wuZGVmaW5pdGlvbi5jb250ZW50QWxpZ24gPSBvQ29sLmRlZmluaXRpb24uY29udGVudEFsaWduID8gb0NvbC5kZWZpbml0aW9uLmNvbnRlbnRBbGlnbiA6ICdjZW50ZXInO1xuICAgIH1cbiAgfVxuXG4gIGdldFNvdXJjZShjZWxsRGF0YTogYW55KSB7XG4gICAgdGhpcy5fc291cmNlID0gJyc7XG4gICAgc3dpdGNoICh0aGlzLmltYWdlVHlwZSkge1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgdGhpcy5fc291cmNlID0gY2VsbERhdGEgPyAoJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICsgKCh0eXBlb2YgKGNlbGxEYXRhLmJ5dGVzKSAhPT0gJ3VuZGVmaW5lZCcpID8gY2VsbERhdGEuYnl0ZXMgOiBjZWxsRGF0YSkpIDogdGhpcy5lbXB0eUltYWdlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IGNlbGxEYXRhID8gY2VsbERhdGEgOiB0aGlzLmVtcHR5SW1hZ2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5fc291cmNlID0gdGhpcy5lbXB0eUltYWdlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZTtcbiAgfVxuXG59XG4iXX0=