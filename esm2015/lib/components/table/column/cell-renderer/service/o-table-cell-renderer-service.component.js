import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OTranslatePipe } from '../../../../../pipes/o-translate.pipe';
import { DialogService } from '../../../../../services/dialog.service';
import { OntimizeServiceProvider } from '../../../../../services/factories';
import { OntimizeService } from '../../../../../services/ontimize/ontimize.service';
import { Codes } from '../../../../../util/codes';
import { FilterExpressionUtils } from '../../../../../util/filter-expression.utils';
import { ServiceUtils } from '../../../../../util/service.utils';
import { SQLTypes } from '../../../../../util/sqltypes';
import { Util } from '../../../../../util/util';
import { DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER, OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = [
    ...DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER,
    'entity',
    'service',
    'columns',
    'translate',
    'valueColumn: value-column',
    'parentKeys: parent-keys',
    'queryMethod: query-method',
    'serviceType : service-type',
    'translateArgsFn: translate-params'
];
export class OTableCellRendererServiceComponent extends OBaseTableCellRenderer {
    constructor(injector) {
        super(injector);
        this.injector = injector;
        this.cellValues = [];
        this.responseMap = {};
        this.translate = false;
        this.queryMethod = Codes.QUERY_METHOD;
        this.colArray = [];
        this._pKeysEquiv = {};
        this.pipeArguments = {};
        this.tableColumn.type = 'service';
        this.dialogService = injector.get(DialogService);
    }
    initialize() {
        super.initialize();
        if (this.table) {
            const oCol = this.table.getOColumn(this.column);
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
        this.colArray = Util.parseArray(this.columns, true);
        const pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        this.configureService();
    }
    ngAfterViewInit() {
        const oCol = this.table.getOColumn(this.column);
        if (Util.isDefined(oCol.editor)) {
            this.editorSuscription = oCol.editor.onPostUpdateRecord.subscribe((data) => {
                this.queryData(data[this.tableColumn.attr], data);
            });
        }
    }
    ngOnDestroy() {
        if (this.editorSuscription) {
            this.editorSuscription.unsubscribe();
        }
    }
    getDescriptionValue(cellvalue, rowValue) {
        if (cellvalue !== undefined && this.cellValues.indexOf(cellvalue) === -1) {
            this.queryData(cellvalue, rowValue);
            this.cellValues.push(cellvalue);
        }
        return '';
    }
    queryData(cellvalue, parentItem) {
        const self = this;
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        const filter = ServiceUtils.getFilterUsingParentKeys(parentItem, this._pKeysEquiv);
        const tableColAlias = Object.keys(this._pKeysEquiv).find(key => this._pKeysEquiv[key] === this.column);
        if (Util.isDefined(tableColAlias)) {
            if (!filter[tableColAlias]) {
                filter[tableColAlias] = cellvalue;
            }
        }
        else {
            filter[this.column] = cellvalue;
        }
        this.querySubscription = this.dataService[this.queryMethod](filter, this.colArray, this.entity)
            .subscribe((resp) => {
            if (resp.isSuccessful()) {
                self.responseMap[cellvalue] = resp.data[0][self.valueColumn];
            }
        }, err => {
            console.error(err);
            if (err && typeof err !== 'object') {
                this.dialogService.alert('ERROR', err);
            }
            else {
                this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
            }
        });
    }
    configureService() {
        let loadingService = OntimizeService;
        if (this.serviceType) {
            loadingService = this.serviceType;
        }
        try {
            this.dataService = this.injector.get(loadingService);
            if (Util.isDataService(this.dataService)) {
                const serviceCfg = this.dataService.getDefaultServiceConfiguration(this.service);
                if (this.entity) {
                    serviceCfg.entity = this.entity;
                }
                this.dataService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    }
    getCellData(cellvalue, rowvalue) {
        return this.responseMap[cellvalue];
    }
    getFilterExpression(quickFilter) {
        const oCol = this.table.getOColumn(this.column);
        let result;
        const cacheValue = Object.keys(this.responseMap).find(key => Util.normalizeString(this.responseMap[key]).indexOf(Util.normalizeString(quickFilter)) !== -1);
        if (cacheValue) {
            result = FilterExpressionUtils.buildExpressionEquals(this.column, SQLTypes.parseUsingSQLType(cacheValue, SQLTypes.getSQLTypeKey(oCol.sqlType)));
        }
        return result;
    }
    setComponentPipe() {
        this.componentPipe = new OTranslatePipe(this.injector);
    }
    responseValue(cellvalue, rowvalue) {
        if (this.translate) {
            this.pipeArguments = this.translateArgsFn ? { values: this.translateArgsFn(rowvalue) } : {};
            return super.getCellData(cellvalue, rowvalue);
        }
        else {
            return cellvalue;
        }
    }
}
OTableCellRendererServiceComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE;
OTableCellRendererServiceComponent.decorators = [
    { type: Component, args: [{
                selector: 'o-table-cell-renderer-service',
                template: "<ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n  {{ getDescriptionValue(cellvalue, rowvalue) }}{{ responseValue(responseMap[cellvalue]) }}\n</ng-template>\n",
                inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    OntimizeServiceProvider
                ]
            }] }
];
OTableCellRendererServiceComponent.ctorParameters = () => [
    { type: Injector }
];
OTableCellRendererServiceComponent.propDecorators = {
    templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,