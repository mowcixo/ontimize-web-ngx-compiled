import { Util } from '../../../../util/util';
import { OTableColumnComponent } from '../o-table-column.component';
export const DEFAULT_INPUTS_O_BASE_TABLE_CELL_RENDERER = [
    'filterSource: filter-source',
    'filterFunction: filter-function'
];
export class OBaseTableCellRenderer {
    constructor(injector) {
        this.injector = injector;
        this._filterSource = 'render';
        this.tableColumn = this.injector.get(OTableColumnComponent);
    }
    ngOnInit() {
        this.initialize();
    }
    initialize() {
    }
    ngAfterContentInit() {
        if (typeof this.filterFunction !== 'function') {
            this.filterFunction = undefined;
        }
        this.registerRenderer();
    }
    get table() {
        return this.tableColumn.table;
    }
    get column() {
        return this.tableColumn.attr;
    }
    registerRenderer() {
        this.tableColumn.registerRenderer(this);
        if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
            this.type = this.tableColumn.type;
        }
    }
    getCellData(cellvalue, rowvalue) {
        let parsedValue;
        if (this.componentPipe && this.pipeArguments !== undefined && cellvalue !== undefined) {
            parsedValue = this.componentPipe.transform(cellvalue, this.pipeArguments);
        }
        else {
            parsedValue = cellvalue;
        }
        return parsedValue;
    }
    getTooltip(cellValue, rowValue) {
        return this.getCellData(cellValue, rowValue);
    }
    set filterSource(val) {
        const lowerVal = (val || '').toLowerCase();
        this._filterSource = (lowerVal === 'render' || lowerVal === 'data' || lowerVal === 'both') ? lowerVal : 'render';
    }
    get filterSource() {
        return this._filterSource;
    }
    getFilter(cellValue, rowValue) {
        let result;
        switch (this.filterSource) {
            case 'render':
                result = [this.getCellData(cellValue, rowValue)];
                break;
            case 'data':
                result = [cellValue];
                break;
            case 'both':
                result = [cellValue, this.getCellData(cellValue, rowValue)];
                break;
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vbnRpbWl6ZS13ZWItbmd4LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFibGUvY29sdW1uL2NlbGwtcmVuZGVyZXIvby1iYXNlLXRhYmxlLWNlbGwtcmVuZGVyZXIuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHO0lBQ3ZELDZCQUE2QjtJQUM3QixpQ0FBaUM7Q0FDbEMsQ0FBQztBQUVGLE1BQU0sT0FBTyxzQkFBc0I7SUFXakMsWUFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVBqQyxrQkFBYSxHQUErQixRQUFRLENBQUM7UUFRMUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxVQUFVO0lBRWpCLENBQUM7SUFFTSxrQkFBa0I7UUFDdkIsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO1lBQzdDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUVNLGdCQUFnQjtRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztTQUNuQztJQUNILENBQUM7SUFPTSxXQUFXLENBQUMsU0FBYyxFQUFFLFFBQWM7UUFDL0MsSUFBSSxXQUFtQixDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ3JGLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzNFO2FBQU07WUFDTCxXQUFXLEdBQUcsU0FBUyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVNLFVBQVUsQ0FBQyxTQUFjLEVBQUUsUUFBYTtRQUM3QyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLFlBQVksQ0FBQyxHQUFXO1FBQzFCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxRQUFRLEtBQUssUUFBUSxJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNuSCxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRCxTQUFTLENBQUMsU0FBYyxFQUFFLFFBQWM7UUFDdEMsSUFBSSxNQUFNLENBQUM7UUFDWCxRQUFRLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDekIsS0FBSyxRQUFRO2dCQUNYLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pELE1BQU07WUFDUixLQUFLLE1BQU07Z0JBQ1QsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3JCLE1BQU07WUFDUixLQUFLLE1BQU07Z0JBQ1QsTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELE1BQU07U0FDVDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEluamVjdG9yLCBQaXBlVHJhbnNmb3JtLCBUZW1wbGF0ZVJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9UYWJsZUNvbHVtbiB9IGZyb20gJy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvby10YWJsZS1jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgT1RhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vby10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgT1RhYmxlQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vby10YWJsZS1jb2x1bW4uY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5QVVRTX09fQkFTRV9UQUJMRV9DRUxMX1JFTkRFUkVSID0gW1xuICAnZmlsdGVyU291cmNlOiBmaWx0ZXItc291cmNlJyxcbiAgJ2ZpbHRlckZ1bmN0aW9uOiBmaWx0ZXItZnVuY3Rpb24nXG5dO1xuXG5leHBvcnQgY2xhc3MgT0Jhc2VUYWJsZUNlbGxSZW5kZXJlciBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgcHVibGljIHRlbXBsYXRlcmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBwdWJsaWMgdGFibGVDb2x1bW46IE9UYWJsZUNvbHVtbjtcbiAgcHVibGljIF9maWx0ZXJTb3VyY2U6ICdyZW5kZXInIHwgJ2RhdGEnIHwgJ2JvdGgnID0gJ3JlbmRlcic7XG4gIHB1YmxpYyBmaWx0ZXJGdW5jdGlvbjogKGNlbGxWYWx1ZTogYW55LCByb3dWYWx1ZTogYW55LCBxdWlja0ZpbHRlcj86IHN0cmluZykgPT4gYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgdHlwZTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgcGlwZUFyZ3VtZW50czogYW55O1xuICBwcm90ZWN0ZWQgY29tcG9uZW50UGlwZTogUGlwZVRyYW5zZm9ybTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy50YWJsZUNvbHVtbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KE9UYWJsZUNvbHVtbkNvbXBvbmVudCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcblxuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZmlsdGVyRnVuY3Rpb24gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZmlsdGVyRnVuY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMucmVnaXN0ZXJSZW5kZXJlcigpO1xuICB9XG5cbiAgZ2V0IHRhYmxlKCk6IE9UYWJsZUNvbXBvbmVudCB7XG4gICAgcmV0dXJuIHRoaXMudGFibGVDb2x1bW4udGFibGU7XG4gIH1cblxuICBnZXQgY29sdW1uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGFibGVDb2x1bW4uYXR0cjtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclJlbmRlcmVyKCk6IHZvaWQge1xuICAgIHRoaXMudGFibGVDb2x1bW4ucmVnaXN0ZXJSZW5kZXJlcih0aGlzKTtcbiAgICBpZiAoIVV0aWwuaXNEZWZpbmVkKHRoaXMudHlwZSkgJiYgVXRpbC5pc0RlZmluZWQodGhpcy50YWJsZUNvbHVtbi50eXBlKSkge1xuICAgICAgdGhpcy50eXBlID0gdGhpcy50YWJsZUNvbHVtbi50eXBlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaXNwbGF5ZWQgdGFibGUgY2VsbCB2YWx1ZVxuICAgKiBAcGFyYW0gY2VsbHZhbHVlIHRoZSBpbnRlcm5hbCB0YWJsZSBjZWxsIHZhbHVlXG4gICAqIEBwYXJhbSByb3d2YWx1ZSB0aGUgdGFibGUgcm93IHZhbHVlXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2VsbERhdGEoY2VsbHZhbHVlOiBhbnksIHJvd3ZhbHVlPzogYW55KTogc3RyaW5nIHtcbiAgICBsZXQgcGFyc2VkVmFsdWU6IHN0cmluZztcbiAgICBpZiAodGhpcy5jb21wb25lbnRQaXBlICYmIHRoaXMucGlwZUFyZ3VtZW50cyAhPT0gdW5kZWZpbmVkICYmIGNlbGx2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJzZWRWYWx1ZSA9IHRoaXMuY29tcG9uZW50UGlwZS50cmFuc2Zvcm0oY2VsbHZhbHVlLCB0aGlzLnBpcGVBcmd1bWVudHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRWYWx1ZSA9IGNlbGx2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICB9XG5cbiAgcHVibGljIGdldFRvb2x0aXAoY2VsbFZhbHVlOiBhbnksIHJvd1ZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldENlbGxEYXRhKGNlbGxWYWx1ZSwgcm93VmFsdWUpO1xuICB9XG5cbiAgc2V0IGZpbHRlclNvdXJjZSh2YWw6IHN0cmluZykge1xuICAgIGNvbnN0IGxvd2VyVmFsID0gKHZhbCB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLl9maWx0ZXJTb3VyY2UgPSAobG93ZXJWYWwgPT09ICdyZW5kZXInIHx8IGxvd2VyVmFsID09PSAnZGF0YScgfHwgbG93ZXJWYWwgPT09ICdib3RoJykgPyBsb3dlclZhbCA6ICdyZW5kZXInO1xuICB9XG5cbiAgZ2V0IGZpbHRlclNvdXJjZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9maWx0ZXJTb3VyY2U7XG4gIH1cblxuICBnZXRGaWx0ZXIoY2VsbFZhbHVlOiBhbnksIHJvd1ZhbHVlPzogYW55KTogYW55W10ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgc3dpdGNoICh0aGlzLmZpbHRlclNvdXJjZSkge1xuICAgICAgY2FzZSAncmVuZGVyJzpcbiAgICAgICAgcmVzdWx0ID0gW3RoaXMuZ2V0Q2VsbERhdGEoY2VsbFZhbHVlLCByb3dWYWx1ZSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICByZXN1bHQgPSBbY2VsbFZhbHVlXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib3RoJzpcbiAgICAgICAgcmVzdWx0ID0gW2NlbGxWYWx1ZSwgdGhpcy5nZXRDZWxsRGF0YShjZWxsVmFsdWUsIHJvd1ZhbHVlKV07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn1cbiJdfQ==