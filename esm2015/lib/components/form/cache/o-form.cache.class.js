import { EventEmitter } from '@angular/core';
import { Util } from '../../../util/util';
export class OFormCacheClass {
    constructor(form) {
        this.form = form;
        this.initialDataCache = {};
        this.valueChangesStack = [];
        this._componentsSubscritpions = {};
        this.blockCaching = false;
        this.initializedCache = false;
        this.onCacheEmptyStateChanges = new EventEmitter();
        this.onCacheStateChanges = new EventEmitter();
        this.changedFormControls = [];
    }
    updateFormDataCache() {
        this.formDataCache = this.form.getRegisteredFieldsValues();
    }
    addChangeToStack(comp) {
        const currentValue = comp.getFormControl().value;
        const wasEmpty = this.valueChangesStack.length === 0;
        this.valueChangesStack.push({
            attr: comp.getAttribute(),
            value: currentValue
        });
        if (wasEmpty) {
            this.onCacheEmptyStateChanges.emit(false);
        }
        this.onCacheStateChanges.emit();
    }
    registerComponentCaching(comp) {
        const self = this;
        const attr = comp.getAttribute();
        const listenTo = this.form.detectChangesOnBlur ? comp.onValueChange : comp.onChange;
        if (!Util.isDefined(listenTo)) {
            return;
        }
        this._componentsSubscritpions[attr] = listenTo.subscribe(() => {
            if (self.initializedCache && !self.blockCaching && self.hasComponentChanged(attr, comp)) {
                if (self.changedFormControls.indexOf(attr) === -1) {
                    self.changedFormControls.push(attr);
                }
                self.updateFormDataCache();
                self.addChangeToStack(comp);
            }
        });
    }
    getCachedValue(attr) {
        if (this.formDataCache && this.formDataCache.hasOwnProperty(attr)) {
            return this.formDataCache[attr];
        }
        return undefined;
    }
    destroy() {
        Object.keys(this._componentsSubscritpions).forEach((attr) => {
            const subs = this._componentsSubscritpions[attr];
            subs.unsubscribe();
        });
        this._componentsSubscritpions = {};
        this.formDataCache = undefined;
        this.changedFormControls = [];
    }
    removeUndefinedProperties(arg) {
        Object.keys(arg).forEach((key) => {
            if (arg[key] === undefined) {
                delete arg[key];
            }
        });
        return arg;
    }
    registerCache() {
        const initialCache = this.form.getRegisteredFieldsValues();
        this.removeUndefinedProperties(initialCache);
        this.initializeCache(initialCache);
        this.formDataCache = initialCache;
        const components = this.form.getComponents();
        const self = this;
        Object.keys(components).forEach(attr => {
            const comp = components[attr];
            if (comp.isAutomaticRegistering()) {
                self.registerComponentCaching(comp);
            }
        });
    }
    initializeCache(val) {
        this.initialDataCache = val;
        this.valueChangesStack = [];
        this.onCacheEmptyStateChanges.emit(true);
        this.initializedCache = true;
        this.changedFormControls = [];
    }
    getInitialDataCache() {
        return this.initialDataCache;
    }
    getDataCache() {
        return this.formDataCache;
    }
    restartCache() {
        this.formDataCache = undefined;
        this.initializeCache({});
        this.initializedCache = false;
        this.onCacheStateChanges.emit();
    }
    setCacheSnapshot() {
        this.initializeCache(this.getDataCache());
    }
    undoLastChange(options = {}) {
        const lastElement = this.valueChangesStack[this.valueChangesStack.length - 1];
        if (lastElement) {
            const lastCacheValue = this.getCacheLastValue(lastElement.attr);
            const lastValue = (lastCacheValue !== null) ? lastCacheValue : this.initialDataCache[lastElement.attr];
            this.undoComponentValue(lastElement.attr, lastValue);
            this.updateFormDataCache();
            this.onCacheStateChanges.emit();
        }
    }
    undoComponentValue(attr, val) {
        this.blockCaching = true;
        const comp = this.form.getFieldReference(attr);
        if (comp) {
            comp.setValue(val);
        }
        this.blockCaching = false;
    }
    hasComponentChanged(attr, comp) {
        const currentValue = comp.getFormControl().value;
        const cache = this.formDataCache || this.initialDataCache;
        return (currentValue !== cache[attr]);
    }
    getCacheLastValue(attr) {
        this.updateChangesStack(attr);
        let result = null;
        for (let i = this.valueChangesStack.length - 1; i >= 0; i--) {
            const current = this.valueChangesStack[i];
            if (current.attr === attr) {
                result = current.value;
                break;
            }
        }
        return result;
    }
    updateChangesStack(attr) {
        let index;
        for (let i = this.valueChangesStack.length - 1; i >= 0; i--) {
            const current = this.valueChangesStack[i];
            if (current.attr === attr) {
                index = i;
                break;
            }
        }
        if (index !== undefined) {
            for (let i = index; i >= 0; i--) {
                const prev = this.valueChangesStack[i - 1];
                const current = this.valueChangesStack[i];
                if (current.attr === attr) {
                    this.valueChangesStack.splice(i, 1);
                    if (!prev || prev.attr === attr) {
                        continue;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        if (this.valueChangesStack.length === 0) {
            this.onCacheEmptyStateChanges.emit(true);
        }
    }
    get isCacheStackEmpty() {
        return (this.valueChangesStack.length === 0);
    }
    isInitialStateChanged() {
        let currentCache;
        if (this.formDataCache) {
            currentCache = Object.assign({}, this.formDataCache);
            this.removeUndefinedProperties(currentCache);
        }
        const initialKeys = Object.keys(this.initialDataCache);
        const currentKeys = currentCache ? Object.keys(currentCache) : initialKeys;
        if (initialKeys.length !== currentKeys.length) {
            return true;
        }
        let res = false;
        for (let i = 0, len = initialKeys.length; i < len; i++) {
            const key = initialKeys[i];
            res = (this.initialDataCache[key] !== currentCache[key]);
            if (res) {
                break;
            }
        }
        return res;
    }
    getChangedFormControlsAttr() {
        return this.changedFormControls;
    }
}
//# sourceMappingURL=data:application/json;base64,